// Generated by jextract

package com.sunya.netchdf.hdf5Clib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct H5VL_file_specific_args_t {
 *     H5VL_file_specific_t op_type;
 *     union  args;
 * };
 * }
 */
public class H5VL_file_specific_args_t {

    public static MemoryLayout $LAYOUT() {
        return constants$237.const$0;
    }
    public static VarHandle op_type$VH() {
        return constants$237.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * H5VL_file_specific_t op_type;
     * }
     */
    public static int op_type$get(MemorySegment seg) {
        return (int)constants$237.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * H5VL_file_specific_t op_type;
     * }
     */
    public static void op_type$set(MemorySegment seg, int x) {
        constants$237.const$1.set(seg, x);
    }
    public static int op_type$get(MemorySegment seg, long index) {
        return (int)constants$237.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void op_type$set(MemorySegment seg, long index, int x) {
        constants$237.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * union {
     *     struct  flush;
     *     struct  reopen;
     *     struct  is_accessible;
     *     struct  del;
     *     struct  is_equal;
     * };
     * }
     */
    public static final class args {

        // Suppresses default constructor, ensuring non-instantiability.
        private args() {}
        public static MemoryLayout $LAYOUT() {
            return constants$237.const$2;
        }
        /**
         * {@snippet :
         * struct {
         *     H5I_type_t obj_type;
         *     H5F_scope_t scope;
         * };
         * }
         */
        public static final class flush {

            // Suppresses default constructor, ensuring non-instantiability.
            private flush() {}
            public static MemoryLayout $LAYOUT() {
                return constants$237.const$3;
            }
            public static VarHandle obj_type$VH() {
                return constants$237.const$4;
            }
            /**
             * Getter for field:
             * {@snippet :
             * H5I_type_t obj_type;
             * }
             */
            public static int obj_type$get(MemorySegment seg) {
                return (int)constants$237.const$4.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * H5I_type_t obj_type;
             * }
             */
            public static void obj_type$set(MemorySegment seg, int x) {
                constants$237.const$4.set(seg, x);
            }
            public static int obj_type$get(MemorySegment seg, long index) {
                return (int)constants$237.const$4.get(seg.asSlice(index*sizeof()));
            }
            public static void obj_type$set(MemorySegment seg, long index, int x) {
                constants$237.const$4.set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle scope$VH() {
                return constants$237.const$5;
            }
            /**
             * Getter for field:
             * {@snippet :
             * H5F_scope_t scope;
             * }
             */
            public static int scope$get(MemorySegment seg) {
                return (int)constants$237.const$5.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * H5F_scope_t scope;
             * }
             */
            public static void scope$set(MemorySegment seg, int x) {
                constants$237.const$5.set(seg, x);
            }
            public static int scope$get(MemorySegment seg, long index) {
                return (int)constants$237.const$5.get(seg.asSlice(index*sizeof()));
            }
            public static void scope$set(MemorySegment seg, long index, int x) {
                constants$237.const$5.set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
        }

        public static MemorySegment flush$slice(MemorySegment seg) {
            return seg.asSlice(0, 8);
        }
        /**
         * {@snippet :
         * struct {
         *     void** file;
         * };
         * }
         */
        public static final class reopen {

            // Suppresses default constructor, ensuring non-instantiability.
            private reopen() {}
            public static MemoryLayout $LAYOUT() {
                return constants$238.const$0;
            }
            public static VarHandle file$VH() {
                return constants$238.const$1;
            }
            /**
             * Getter for field:
             * {@snippet :
             * void** file;
             * }
             */
            public static MemorySegment file$get(MemorySegment seg) {
                return (java.lang.foreign.MemorySegment)constants$238.const$1.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * void** file;
             * }
             */
            public static void file$set(MemorySegment seg, MemorySegment x) {
                constants$238.const$1.set(seg, x);
            }
            public static MemorySegment file$get(MemorySegment seg, long index) {
                return (java.lang.foreign.MemorySegment)constants$238.const$1.get(seg.asSlice(index*sizeof()));
            }
            public static void file$set(MemorySegment seg, long index, MemorySegment x) {
                constants$238.const$1.set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
        }

        public static MemorySegment reopen$slice(MemorySegment seg) {
            return seg.asSlice(0, 8);
        }
        /**
         * {@snippet :
         * struct {
         *     char* filename;
         *     hid_t fapl_id;
         *     hbool_t* accessible;
         * };
         * }
         */
        public static final class is_accessible {

            // Suppresses default constructor, ensuring non-instantiability.
            private is_accessible() {}
            public static MemoryLayout $LAYOUT() {
                return constants$238.const$2;
            }
            public static VarHandle filename$VH() {
                return constants$238.const$3;
            }
            /**
             * Getter for field:
             * {@snippet :
             * char* filename;
             * }
             */
            public static MemorySegment filename$get(MemorySegment seg) {
                return (java.lang.foreign.MemorySegment)constants$238.const$3.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * char* filename;
             * }
             */
            public static void filename$set(MemorySegment seg, MemorySegment x) {
                constants$238.const$3.set(seg, x);
            }
            public static MemorySegment filename$get(MemorySegment seg, long index) {
                return (java.lang.foreign.MemorySegment)constants$238.const$3.get(seg.asSlice(index*sizeof()));
            }
            public static void filename$set(MemorySegment seg, long index, MemorySegment x) {
                constants$238.const$3.set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle fapl_id$VH() {
                return constants$238.const$4;
            }
            /**
             * Getter for field:
             * {@snippet :
             * hid_t fapl_id;
             * }
             */
            public static long fapl_id$get(MemorySegment seg) {
                return (long)constants$238.const$4.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * hid_t fapl_id;
             * }
             */
            public static void fapl_id$set(MemorySegment seg, long x) {
                constants$238.const$4.set(seg, x);
            }
            public static long fapl_id$get(MemorySegment seg, long index) {
                return (long)constants$238.const$4.get(seg.asSlice(index*sizeof()));
            }
            public static void fapl_id$set(MemorySegment seg, long index, long x) {
                constants$238.const$4.set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle accessible$VH() {
                return constants$238.const$5;
            }
            /**
             * Getter for field:
             * {@snippet :
             * hbool_t* accessible;
             * }
             */
            public static MemorySegment accessible$get(MemorySegment seg) {
                return (java.lang.foreign.MemorySegment)constants$238.const$5.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * hbool_t* accessible;
             * }
             */
            public static void accessible$set(MemorySegment seg, MemorySegment x) {
                constants$238.const$5.set(seg, x);
            }
            public static MemorySegment accessible$get(MemorySegment seg, long index) {
                return (java.lang.foreign.MemorySegment)constants$238.const$5.get(seg.asSlice(index*sizeof()));
            }
            public static void accessible$set(MemorySegment seg, long index, MemorySegment x) {
                constants$238.const$5.set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
        }

        public static MemorySegment is_accessible$slice(MemorySegment seg) {
            return seg.asSlice(0, 24);
        }
        /**
         * {@snippet :
         * struct {
         *     char* filename;
         *     hid_t fapl_id;
         * };
         * }
         */
        public static final class del {

            // Suppresses default constructor, ensuring non-instantiability.
            private del() {}
            public static MemoryLayout $LAYOUT() {
                return constants$239.const$0;
            }
            public static VarHandle filename$VH() {
                return constants$239.const$1;
            }
            /**
             * Getter for field:
             * {@snippet :
             * char* filename;
             * }
             */
            public static MemorySegment filename$get(MemorySegment seg) {
                return (java.lang.foreign.MemorySegment)constants$239.const$1.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * char* filename;
             * }
             */
            public static void filename$set(MemorySegment seg, MemorySegment x) {
                constants$239.const$1.set(seg, x);
            }
            public static MemorySegment filename$get(MemorySegment seg, long index) {
                return (java.lang.foreign.MemorySegment)constants$239.const$1.get(seg.asSlice(index*sizeof()));
            }
            public static void filename$set(MemorySegment seg, long index, MemorySegment x) {
                constants$239.const$1.set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle fapl_id$VH() {
                return constants$239.const$2;
            }
            /**
             * Getter for field:
             * {@snippet :
             * hid_t fapl_id;
             * }
             */
            public static long fapl_id$get(MemorySegment seg) {
                return (long)constants$239.const$2.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * hid_t fapl_id;
             * }
             */
            public static void fapl_id$set(MemorySegment seg, long x) {
                constants$239.const$2.set(seg, x);
            }
            public static long fapl_id$get(MemorySegment seg, long index) {
                return (long)constants$239.const$2.get(seg.asSlice(index*sizeof()));
            }
            public static void fapl_id$set(MemorySegment seg, long index, long x) {
                constants$239.const$2.set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
        }

        public static MemorySegment del$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        /**
         * {@snippet :
         * struct {
         *     void* obj2;
         *     hbool_t* same_file;
         * };
         * }
         */
        public static final class is_equal {

            // Suppresses default constructor, ensuring non-instantiability.
            private is_equal() {}
            public static MemoryLayout $LAYOUT() {
                return constants$239.const$3;
            }
            public static VarHandle obj2$VH() {
                return constants$239.const$4;
            }
            /**
             * Getter for field:
             * {@snippet :
             * void* obj2;
             * }
             */
            public static MemorySegment obj2$get(MemorySegment seg) {
                return (java.lang.foreign.MemorySegment)constants$239.const$4.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * void* obj2;
             * }
             */
            public static void obj2$set(MemorySegment seg, MemorySegment x) {
                constants$239.const$4.set(seg, x);
            }
            public static MemorySegment obj2$get(MemorySegment seg, long index) {
                return (java.lang.foreign.MemorySegment)constants$239.const$4.get(seg.asSlice(index*sizeof()));
            }
            public static void obj2$set(MemorySegment seg, long index, MemorySegment x) {
                constants$239.const$4.set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle same_file$VH() {
                return constants$239.const$5;
            }
            /**
             * Getter for field:
             * {@snippet :
             * hbool_t* same_file;
             * }
             */
            public static MemorySegment same_file$get(MemorySegment seg) {
                return (java.lang.foreign.MemorySegment)constants$239.const$5.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * hbool_t* same_file;
             * }
             */
            public static void same_file$set(MemorySegment seg, MemorySegment x) {
                constants$239.const$5.set(seg, x);
            }
            public static MemorySegment same_file$get(MemorySegment seg, long index) {
                return (java.lang.foreign.MemorySegment)constants$239.const$5.get(seg.asSlice(index*sizeof()));
            }
            public static void same_file$set(MemorySegment seg, long index, MemorySegment x) {
                constants$239.const$5.set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
        }

        public static MemorySegment is_equal$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment args$slice(MemorySegment seg) {
        return seg.asSlice(8, 24);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


