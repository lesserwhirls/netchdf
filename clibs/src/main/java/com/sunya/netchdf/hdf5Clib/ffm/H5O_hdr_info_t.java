// Generated by jextract

package com.sunya.netchdf.hdf5Clib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct H5O_hdr_info_t {
 *     unsigned int version;
 *     unsigned int nmesgs;
 *     unsigned int nchunks;
 *     unsigned int flags;
 *     struct  space;
 *     struct  mesg;
 * };
 * }
 */
public class H5O_hdr_info_t {

    public static MemoryLayout $LAYOUT() {
        return constants$23.const$0;
    }
    public static VarHandle version$VH() {
        return constants$23.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int version;
     * }
     */
    public static int version$get(MemorySegment seg) {
        return (int)constants$23.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int version;
     * }
     */
    public static void version$set(MemorySegment seg, int x) {
        constants$23.const$1.set(seg, x);
    }
    public static int version$get(MemorySegment seg, long index) {
        return (int)constants$23.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void version$set(MemorySegment seg, long index, int x) {
        constants$23.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nmesgs$VH() {
        return constants$23.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int nmesgs;
     * }
     */
    public static int nmesgs$get(MemorySegment seg) {
        return (int)constants$23.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int nmesgs;
     * }
     */
    public static void nmesgs$set(MemorySegment seg, int x) {
        constants$23.const$2.set(seg, x);
    }
    public static int nmesgs$get(MemorySegment seg, long index) {
        return (int)constants$23.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void nmesgs$set(MemorySegment seg, long index, int x) {
        constants$23.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nchunks$VH() {
        return constants$23.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int nchunks;
     * }
     */
    public static int nchunks$get(MemorySegment seg) {
        return (int)constants$23.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int nchunks;
     * }
     */
    public static void nchunks$set(MemorySegment seg, int x) {
        constants$23.const$3.set(seg, x);
    }
    public static int nchunks$get(MemorySegment seg, long index) {
        return (int)constants$23.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void nchunks$set(MemorySegment seg, long index, int x) {
        constants$23.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle flags$VH() {
        return constants$23.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int flags;
     * }
     */
    public static int flags$get(MemorySegment seg) {
        return (int)constants$23.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int flags;
     * }
     */
    public static void flags$set(MemorySegment seg, int x) {
        constants$23.const$4.set(seg, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int)constants$23.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        constants$23.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * struct {
     *     hsize_t total;
     *     hsize_t meta;
     *     hsize_t mesg;
     *     hsize_t free;
     * };
     * }
     */
    public static final class space {

        // Suppresses default constructor, ensuring non-instantiability.
        private space() {}
        public static MemoryLayout $LAYOUT() {
            return constants$23.const$5;
        }
        public static VarHandle total$VH() {
            return constants$24.const$0;
        }
        /**
         * Getter for field:
         * {@snippet :
         * hsize_t total;
         * }
         */
        public static long total$get(MemorySegment seg) {
            return (long)constants$24.const$0.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * hsize_t total;
         * }
         */
        public static void total$set(MemorySegment seg, long x) {
            constants$24.const$0.set(seg, x);
        }
        public static long total$get(MemorySegment seg, long index) {
            return (long)constants$24.const$0.get(seg.asSlice(index*sizeof()));
        }
        public static void total$set(MemorySegment seg, long index, long x) {
            constants$24.const$0.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle meta$VH() {
            return constants$24.const$1;
        }
        /**
         * Getter for field:
         * {@snippet :
         * hsize_t meta;
         * }
         */
        public static long meta$get(MemorySegment seg) {
            return (long)constants$24.const$1.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * hsize_t meta;
         * }
         */
        public static void meta$set(MemorySegment seg, long x) {
            constants$24.const$1.set(seg, x);
        }
        public static long meta$get(MemorySegment seg, long index) {
            return (long)constants$24.const$1.get(seg.asSlice(index*sizeof()));
        }
        public static void meta$set(MemorySegment seg, long index, long x) {
            constants$24.const$1.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle mesg$VH() {
            return constants$24.const$2;
        }
        /**
         * Getter for field:
         * {@snippet :
         * hsize_t mesg;
         * }
         */
        public static long mesg$get(MemorySegment seg) {
            return (long)constants$24.const$2.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * hsize_t mesg;
         * }
         */
        public static void mesg$set(MemorySegment seg, long x) {
            constants$24.const$2.set(seg, x);
        }
        public static long mesg$get(MemorySegment seg, long index) {
            return (long)constants$24.const$2.get(seg.asSlice(index*sizeof()));
        }
        public static void mesg$set(MemorySegment seg, long index, long x) {
            constants$24.const$2.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle free$VH() {
            return constants$24.const$3;
        }
        /**
         * Getter for field:
         * {@snippet :
         * hsize_t free;
         * }
         */
        public static long free$get(MemorySegment seg) {
            return (long)constants$24.const$3.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * hsize_t free;
         * }
         */
        public static void free$set(MemorySegment seg, long x) {
            constants$24.const$3.set(seg, x);
        }
        public static long free$get(MemorySegment seg, long index) {
            return (long)constants$24.const$3.get(seg.asSlice(index*sizeof()));
        }
        public static void free$set(MemorySegment seg, long index, long x) {
            constants$24.const$3.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment space$slice(MemorySegment seg) {
        return seg.asSlice(16, 32);
    }
    /**
     * {@snippet :
     * struct {
     *     uint64_t present;
     *     uint64_t shared;
     * };
     * }
     */
    public static final class mesg {

        // Suppresses default constructor, ensuring non-instantiability.
        private mesg() {}
        public static MemoryLayout $LAYOUT() {
            return constants$24.const$4;
        }
        public static VarHandle present$VH() {
            return constants$24.const$5;
        }
        /**
         * Getter for field:
         * {@snippet :
         * uint64_t present;
         * }
         */
        public static long present$get(MemorySegment seg) {
            return (long)constants$24.const$5.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * uint64_t present;
         * }
         */
        public static void present$set(MemorySegment seg, long x) {
            constants$24.const$5.set(seg, x);
        }
        public static long present$get(MemorySegment seg, long index) {
            return (long)constants$24.const$5.get(seg.asSlice(index*sizeof()));
        }
        public static void present$set(MemorySegment seg, long index, long x) {
            constants$24.const$5.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle shared$VH() {
            return constants$25.const$0;
        }
        /**
         * Getter for field:
         * {@snippet :
         * uint64_t shared;
         * }
         */
        public static long shared$get(MemorySegment seg) {
            return (long)constants$25.const$0.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * uint64_t shared;
         * }
         */
        public static void shared$set(MemorySegment seg, long x) {
            constants$25.const$0.set(seg, x);
        }
        public static long shared$get(MemorySegment seg, long index) {
            return (long)constants$25.const$0.get(seg.asSlice(index*sizeof()));
        }
        public static void shared$set(MemorySegment seg, long index, long x) {
            constants$25.const$0.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment mesg$slice(MemorySegment seg) {
        return seg.asSlice(48, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


