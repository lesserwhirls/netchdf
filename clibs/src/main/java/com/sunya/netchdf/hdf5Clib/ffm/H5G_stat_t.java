// Generated by jextract

package com.sunya.netchdf.hdf5Clib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct H5G_stat_t {
 *     unsigned long fileno[2];
 *     unsigned long objno[2];
 *     unsigned int nlink;
 *     H5G_obj_t type;
 *     time_t mtime;
 *     size_t linklen;
 *     H5O_stat_t ohdr;
 * };
 * }
 */
public class H5G_stat_t {

    public static MemoryLayout $LAYOUT() {
        return constants$204.const$2;
    }
    public static MemorySegment fileno$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static MemorySegment objno$slice(MemorySegment seg) {
        return seg.asSlice(16, 16);
    }
    public static VarHandle nlink$VH() {
        return constants$204.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int nlink;
     * }
     */
    public static int nlink$get(MemorySegment seg) {
        return (int)constants$204.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int nlink;
     * }
     */
    public static void nlink$set(MemorySegment seg, int x) {
        constants$204.const$3.set(seg, x);
    }
    public static int nlink$get(MemorySegment seg, long index) {
        return (int)constants$204.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void nlink$set(MemorySegment seg, long index, int x) {
        constants$204.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle type$VH() {
        return constants$204.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * H5G_obj_t type;
     * }
     */
    public static int type$get(MemorySegment seg) {
        return (int)constants$204.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * H5G_obj_t type;
     * }
     */
    public static void type$set(MemorySegment seg, int x) {
        constants$204.const$4.set(seg, x);
    }
    public static int type$get(MemorySegment seg, long index) {
        return (int)constants$204.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, int x) {
        constants$204.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle mtime$VH() {
        return constants$204.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * time_t mtime;
     * }
     */
    public static long mtime$get(MemorySegment seg) {
        return (long)constants$204.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * time_t mtime;
     * }
     */
    public static void mtime$set(MemorySegment seg, long x) {
        constants$204.const$5.set(seg, x);
    }
    public static long mtime$get(MemorySegment seg, long index) {
        return (long)constants$204.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void mtime$set(MemorySegment seg, long index, long x) {
        constants$204.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle linklen$VH() {
        return constants$205.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t linklen;
     * }
     */
    public static long linklen$get(MemorySegment seg) {
        return (long)constants$205.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t linklen;
     * }
     */
    public static void linklen$set(MemorySegment seg, long x) {
        constants$205.const$0.set(seg, x);
    }
    public static long linklen$get(MemorySegment seg, long index) {
        return (long)constants$205.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void linklen$set(MemorySegment seg, long index, long x) {
        constants$205.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment ohdr$slice(MemorySegment seg) {
        return seg.asSlice(56, 24);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


