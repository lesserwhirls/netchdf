// Generated by jextract

package com.sunya.netchdf.hdf5Clib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct H5VL_wrap_class_t {
 *     void* (*get_object)(void*);
 *     herr_t (*get_wrap_ctx)(void*,void**);
 *     void* (*wrap_object)(void*,H5I_type_t,void*);
 *     void* (*unwrap_object)(void*);
 *     herr_t (*free_wrap_ctx)(void*);
 * };
 * }
 */
public class H5VL_wrap_class_t {

    public static MemoryLayout $LAYOUT() {
        return constants$258.const$0;
    }
    /**
     * {@snippet :
 * void* (*get_object)(void*);
     * }
     */
    public interface get_object {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(get_object fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$258.const$1, fi, constants$110.const$3, scope);
        }
        static get_object ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$188.const$1.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_object$VH() {
        return constants$258.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* (*get_object)(void*);
     * }
     */
    public static MemorySegment get_object$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$258.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* (*get_object)(void*);
     * }
     */
    public static void get_object$set(MemorySegment seg, MemorySegment x) {
        constants$258.const$2.set(seg, x);
    }
    public static MemorySegment get_object$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$258.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void get_object$set(MemorySegment seg, long index, MemorySegment x) {
        constants$258.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_object get_object(MemorySegment segment, Arena scope) {
        return get_object.ofAddress(get_object$get(segment), scope);
    }
    /**
     * {@snippet :
 * herr_t (*get_wrap_ctx)(void*,void**);
     * }
     */
    public interface get_wrap_ctx {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_wrap_ctx fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$258.const$3, fi, constants$13.const$4, scope);
        }
        static get_wrap_ctx ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$17.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_wrap_ctx$VH() {
        return constants$258.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * herr_t (*get_wrap_ctx)(void*,void**);
     * }
     */
    public static MemorySegment get_wrap_ctx$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$258.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * herr_t (*get_wrap_ctx)(void*,void**);
     * }
     */
    public static void get_wrap_ctx$set(MemorySegment seg, MemorySegment x) {
        constants$258.const$4.set(seg, x);
    }
    public static MemorySegment get_wrap_ctx$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$258.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void get_wrap_ctx$set(MemorySegment seg, long index, MemorySegment x) {
        constants$258.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_wrap_ctx get_wrap_ctx(MemorySegment segment, Arena scope) {
        return get_wrap_ctx.ofAddress(get_wrap_ctx$get(segment), scope);
    }
    /**
     * {@snippet :
 * void* (*wrap_object)(void*,H5I_type_t,void*);
     * }
     */
    public interface wrap_object {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(wrap_object fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$258.const$5, fi, constants$119.const$5, scope);
        }
        static wrap_object ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$259.const$0.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle wrap_object$VH() {
        return constants$259.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* (*wrap_object)(void*,H5I_type_t,void*);
     * }
     */
    public static MemorySegment wrap_object$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$259.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* (*wrap_object)(void*,H5I_type_t,void*);
     * }
     */
    public static void wrap_object$set(MemorySegment seg, MemorySegment x) {
        constants$259.const$1.set(seg, x);
    }
    public static MemorySegment wrap_object$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$259.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void wrap_object$set(MemorySegment seg, long index, MemorySegment x) {
        constants$259.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static wrap_object wrap_object(MemorySegment segment, Arena scope) {
        return wrap_object.ofAddress(wrap_object$get(segment), scope);
    }
    /**
     * {@snippet :
 * void* (*unwrap_object)(void*);
     * }
     */
    public interface unwrap_object {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(unwrap_object fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$259.const$2, fi, constants$110.const$3, scope);
        }
        static unwrap_object ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$188.const$1.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle unwrap_object$VH() {
        return constants$259.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* (*unwrap_object)(void*);
     * }
     */
    public static MemorySegment unwrap_object$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$259.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* (*unwrap_object)(void*);
     * }
     */
    public static void unwrap_object$set(MemorySegment seg, MemorySegment x) {
        constants$259.const$3.set(seg, x);
    }
    public static MemorySegment unwrap_object$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$259.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void unwrap_object$set(MemorySegment seg, long index, MemorySegment x) {
        constants$259.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static unwrap_object unwrap_object(MemorySegment segment, Arena scope) {
        return unwrap_object.ofAddress(unwrap_object$get(segment), scope);
    }
    /**
     * {@snippet :
 * herr_t (*free_wrap_ctx)(void*);
     * }
     */
    public interface free_wrap_ctx {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(free_wrap_ctx fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$259.const$4, fi, constants$15.const$4, scope);
        }
        static free_wrap_ctx ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$27.const$4.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle free_wrap_ctx$VH() {
        return constants$259.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * herr_t (*free_wrap_ctx)(void*);
     * }
     */
    public static MemorySegment free_wrap_ctx$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$259.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * herr_t (*free_wrap_ctx)(void*);
     * }
     */
    public static void free_wrap_ctx$set(MemorySegment seg, MemorySegment x) {
        constants$259.const$5.set(seg, x);
    }
    public static MemorySegment free_wrap_ctx$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$259.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void free_wrap_ctx$set(MemorySegment seg, long index, MemorySegment x) {
        constants$259.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static free_wrap_ctx free_wrap_ctx(MemorySegment segment, Arena scope) {
        return free_wrap_ctx.ofAddress(free_wrap_ctx$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


