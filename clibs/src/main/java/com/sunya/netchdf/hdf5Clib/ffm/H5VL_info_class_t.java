// Generated by jextract

package com.sunya.netchdf.hdf5Clib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct H5VL_info_class_t {
 *     size_t size;
 *     void* (*copy)(void*);
 *     herr_t (*cmp)(int*,void*,void*);
 *     herr_t (*free)(void*);
 *     herr_t (*to_str)(void*,char**);
 *     herr_t (*from_str)(char*,void**);
 * };
 * }
 */
public class H5VL_info_class_t {

    public static MemoryLayout $LAYOUT() {
        return constants$256.const$0;
    }
    public static VarHandle size$VH() {
        return constants$256.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t size;
     * }
     */
    public static long size$get(MemorySegment seg) {
        return (long)constants$256.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t size;
     * }
     */
    public static void size$set(MemorySegment seg, long x) {
        constants$256.const$1.set(seg, x);
    }
    public static long size$get(MemorySegment seg, long index) {
        return (long)constants$256.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void size$set(MemorySegment seg, long index, long x) {
        constants$256.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * void* (*copy)(void*);
     * }
     */
    public interface copy {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(copy fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$256.const$2, fi, constants$110.const$3, scope);
        }
        static copy ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$188.const$1.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle copy$VH() {
        return constants$256.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* (*copy)(void*);
     * }
     */
    public static MemorySegment copy$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$256.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* (*copy)(void*);
     * }
     */
    public static void copy$set(MemorySegment seg, MemorySegment x) {
        constants$256.const$3.set(seg, x);
    }
    public static MemorySegment copy$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$256.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void copy$set(MemorySegment seg, long index, MemorySegment x) {
        constants$256.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static copy copy(MemorySegment segment, Arena scope) {
        return copy.ofAddress(copy$get(segment), scope);
    }
    /**
     * {@snippet :
 * herr_t (*cmp)(int*,void*,void*);
     * }
     */
    public interface cmp {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(cmp fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$256.const$4, fi, constants$15.const$0, scope);
        }
        static cmp ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$89.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle cmp$VH() {
        return constants$256.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * herr_t (*cmp)(int*,void*,void*);
     * }
     */
    public static MemorySegment cmp$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$256.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * herr_t (*cmp)(int*,void*,void*);
     * }
     */
    public static void cmp$set(MemorySegment seg, MemorySegment x) {
        constants$256.const$5.set(seg, x);
    }
    public static MemorySegment cmp$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$256.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void cmp$set(MemorySegment seg, long index, MemorySegment x) {
        constants$256.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static cmp cmp(MemorySegment segment, Arena scope) {
        return cmp.ofAddress(cmp$get(segment), scope);
    }
    /**
     * {@snippet :
 * herr_t (*free)(void*);
     * }
     */
    public interface free {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(free fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$257.const$0, fi, constants$15.const$4, scope);
        }
        static free ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$27.const$4.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle free$VH() {
        return constants$257.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * herr_t (*free)(void*);
     * }
     */
    public static MemorySegment free$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$257.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * herr_t (*free)(void*);
     * }
     */
    public static void free$set(MemorySegment seg, MemorySegment x) {
        constants$257.const$1.set(seg, x);
    }
    public static MemorySegment free$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$257.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void free$set(MemorySegment seg, long index, MemorySegment x) {
        constants$257.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static free free(MemorySegment segment, Arena scope) {
        return free.ofAddress(free$get(segment), scope);
    }
    /**
     * {@snippet :
 * herr_t (*to_str)(void*,char**);
     * }
     */
    public interface to_str {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(to_str fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$257.const$2, fi, constants$13.const$4, scope);
        }
        static to_str ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$17.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle to_str$VH() {
        return constants$257.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * herr_t (*to_str)(void*,char**);
     * }
     */
    public static MemorySegment to_str$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$257.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * herr_t (*to_str)(void*,char**);
     * }
     */
    public static void to_str$set(MemorySegment seg, MemorySegment x) {
        constants$257.const$3.set(seg, x);
    }
    public static MemorySegment to_str$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$257.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void to_str$set(MemorySegment seg, long index, MemorySegment x) {
        constants$257.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static to_str to_str(MemorySegment segment, Arena scope) {
        return to_str.ofAddress(to_str$get(segment), scope);
    }
    /**
     * {@snippet :
 * herr_t (*from_str)(char*,void**);
     * }
     */
    public interface from_str {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(from_str fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$257.const$4, fi, constants$13.const$4, scope);
        }
        static from_str ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$17.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle from_str$VH() {
        return constants$257.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * herr_t (*from_str)(char*,void**);
     * }
     */
    public static MemorySegment from_str$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$257.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * herr_t (*from_str)(char*,void**);
     * }
     */
    public static void from_str$set(MemorySegment seg, MemorySegment x) {
        constants$257.const$5.set(seg, x);
    }
    public static MemorySegment from_str$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$257.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void from_str$set(MemorySegment seg, long index, MemorySegment x) {
        constants$257.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static from_str from_str(MemorySegment segment, Arena scope) {
        return from_str.ofAddress(from_str$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


