// Generated by jextract

package com.sunya.netchdf.hdf5Clib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * union H5VL_map_args_t {
 *     struct  create;
 *     struct  open;
 *     struct  get_val;
 *     struct  exists;
 *     struct  put;
 *     struct  get;
 *     struct  specific;
 * };
 * }
 */
public class H5VL_map_args_t {

    public static MemoryLayout $LAYOUT() {
        return constants$293.const$3;
    }
    /**
     * {@snippet :
     * struct {
     *     H5VL_loc_params_t loc_params;
     *     char* name;
     *     hid_t lcpl_id;
     *     hid_t key_type_id;
     *     hid_t val_type_id;
     *     hid_t mcpl_id;
     *     hid_t mapl_id;
     *     void* map;
     * };
     * }
     */
    public static final class create {

        // Suppresses default constructor, ensuring non-instantiability.
        private create() {}
        public static MemoryLayout $LAYOUT() {
            return constants$293.const$4;
        }
        public static MemorySegment loc_params$slice(MemorySegment seg) {
            return seg.asSlice(0, 40);
        }
        public static VarHandle name$VH() {
            return constants$293.const$5;
        }
        /**
         * Getter for field:
         * {@snippet :
         * char* name;
         * }
         */
        public static MemorySegment name$get(MemorySegment seg) {
            return (java.lang.foreign.MemorySegment)constants$293.const$5.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * char* name;
         * }
         */
        public static void name$set(MemorySegment seg, MemorySegment x) {
            constants$293.const$5.set(seg, x);
        }
        public static MemorySegment name$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemorySegment)constants$293.const$5.get(seg.asSlice(index*sizeof()));
        }
        public static void name$set(MemorySegment seg, long index, MemorySegment x) {
            constants$293.const$5.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle lcpl_id$VH() {
            return constants$294.const$0;
        }
        /**
         * Getter for field:
         * {@snippet :
         * hid_t lcpl_id;
         * }
         */
        public static long lcpl_id$get(MemorySegment seg) {
            return (long)constants$294.const$0.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * hid_t lcpl_id;
         * }
         */
        public static void lcpl_id$set(MemorySegment seg, long x) {
            constants$294.const$0.set(seg, x);
        }
        public static long lcpl_id$get(MemorySegment seg, long index) {
            return (long)constants$294.const$0.get(seg.asSlice(index*sizeof()));
        }
        public static void lcpl_id$set(MemorySegment seg, long index, long x) {
            constants$294.const$0.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle key_type_id$VH() {
            return constants$294.const$1;
        }
        /**
         * Getter for field:
         * {@snippet :
         * hid_t key_type_id;
         * }
         */
        public static long key_type_id$get(MemorySegment seg) {
            return (long)constants$294.const$1.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * hid_t key_type_id;
         * }
         */
        public static void key_type_id$set(MemorySegment seg, long x) {
            constants$294.const$1.set(seg, x);
        }
        public static long key_type_id$get(MemorySegment seg, long index) {
            return (long)constants$294.const$1.get(seg.asSlice(index*sizeof()));
        }
        public static void key_type_id$set(MemorySegment seg, long index, long x) {
            constants$294.const$1.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle val_type_id$VH() {
            return constants$294.const$2;
        }
        /**
         * Getter for field:
         * {@snippet :
         * hid_t val_type_id;
         * }
         */
        public static long val_type_id$get(MemorySegment seg) {
            return (long)constants$294.const$2.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * hid_t val_type_id;
         * }
         */
        public static void val_type_id$set(MemorySegment seg, long x) {
            constants$294.const$2.set(seg, x);
        }
        public static long val_type_id$get(MemorySegment seg, long index) {
            return (long)constants$294.const$2.get(seg.asSlice(index*sizeof()));
        }
        public static void val_type_id$set(MemorySegment seg, long index, long x) {
            constants$294.const$2.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle mcpl_id$VH() {
            return constants$294.const$3;
        }
        /**
         * Getter for field:
         * {@snippet :
         * hid_t mcpl_id;
         * }
         */
        public static long mcpl_id$get(MemorySegment seg) {
            return (long)constants$294.const$3.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * hid_t mcpl_id;
         * }
         */
        public static void mcpl_id$set(MemorySegment seg, long x) {
            constants$294.const$3.set(seg, x);
        }
        public static long mcpl_id$get(MemorySegment seg, long index) {
            return (long)constants$294.const$3.get(seg.asSlice(index*sizeof()));
        }
        public static void mcpl_id$set(MemorySegment seg, long index, long x) {
            constants$294.const$3.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle mapl_id$VH() {
            return constants$294.const$4;
        }
        /**
         * Getter for field:
         * {@snippet :
         * hid_t mapl_id;
         * }
         */
        public static long mapl_id$get(MemorySegment seg) {
            return (long)constants$294.const$4.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * hid_t mapl_id;
         * }
         */
        public static void mapl_id$set(MemorySegment seg, long x) {
            constants$294.const$4.set(seg, x);
        }
        public static long mapl_id$get(MemorySegment seg, long index) {
            return (long)constants$294.const$4.get(seg.asSlice(index*sizeof()));
        }
        public static void mapl_id$set(MemorySegment seg, long index, long x) {
            constants$294.const$4.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle map$VH() {
            return constants$294.const$5;
        }
        /**
         * Getter for field:
         * {@snippet :
         * void* map;
         * }
         */
        public static MemorySegment map$get(MemorySegment seg) {
            return (java.lang.foreign.MemorySegment)constants$294.const$5.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * void* map;
         * }
         */
        public static void map$set(MemorySegment seg, MemorySegment x) {
            constants$294.const$5.set(seg, x);
        }
        public static MemorySegment map$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemorySegment)constants$294.const$5.get(seg.asSlice(index*sizeof()));
        }
        public static void map$set(MemorySegment seg, long index, MemorySegment x) {
            constants$294.const$5.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment create$slice(MemorySegment seg) {
        return seg.asSlice(0, 96);
    }
    /**
     * {@snippet :
     * struct {
     *     H5VL_loc_params_t loc_params;
     *     char* name;
     *     hid_t mapl_id;
     *     void* map;
     * };
     * }
     */
    public static final class open {

        // Suppresses default constructor, ensuring non-instantiability.
        private open() {}
        public static MemoryLayout $LAYOUT() {
            return constants$295.const$0;
        }
        public static MemorySegment loc_params$slice(MemorySegment seg) {
            return seg.asSlice(0, 40);
        }
        public static VarHandle name$VH() {
            return constants$295.const$1;
        }
        /**
         * Getter for field:
         * {@snippet :
         * char* name;
         * }
         */
        public static MemorySegment name$get(MemorySegment seg) {
            return (java.lang.foreign.MemorySegment)constants$295.const$1.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * char* name;
         * }
         */
        public static void name$set(MemorySegment seg, MemorySegment x) {
            constants$295.const$1.set(seg, x);
        }
        public static MemorySegment name$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemorySegment)constants$295.const$1.get(seg.asSlice(index*sizeof()));
        }
        public static void name$set(MemorySegment seg, long index, MemorySegment x) {
            constants$295.const$1.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle mapl_id$VH() {
            return constants$295.const$2;
        }
        /**
         * Getter for field:
         * {@snippet :
         * hid_t mapl_id;
         * }
         */
        public static long mapl_id$get(MemorySegment seg) {
            return (long)constants$295.const$2.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * hid_t mapl_id;
         * }
         */
        public static void mapl_id$set(MemorySegment seg, long x) {
            constants$295.const$2.set(seg, x);
        }
        public static long mapl_id$get(MemorySegment seg, long index) {
            return (long)constants$295.const$2.get(seg.asSlice(index*sizeof()));
        }
        public static void mapl_id$set(MemorySegment seg, long index, long x) {
            constants$295.const$2.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle map$VH() {
            return constants$295.const$3;
        }
        /**
         * Getter for field:
         * {@snippet :
         * void* map;
         * }
         */
        public static MemorySegment map$get(MemorySegment seg) {
            return (java.lang.foreign.MemorySegment)constants$295.const$3.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * void* map;
         * }
         */
        public static void map$set(MemorySegment seg, MemorySegment x) {
            constants$295.const$3.set(seg, x);
        }
        public static MemorySegment map$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemorySegment)constants$295.const$3.get(seg.asSlice(index*sizeof()));
        }
        public static void map$set(MemorySegment seg, long index, MemorySegment x) {
            constants$295.const$3.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment open$slice(MemorySegment seg) {
        return seg.asSlice(0, 64);
    }
    /**
     * {@snippet :
     * struct {
     *     hid_t key_mem_type_id;
     *     void* key;
     *     hid_t value_mem_type_id;
     *     void* value;
     * };
     * }
     */
    public static final class get_val {

        // Suppresses default constructor, ensuring non-instantiability.
        private get_val() {}
        public static MemoryLayout $LAYOUT() {
            return constants$295.const$4;
        }
        public static VarHandle key_mem_type_id$VH() {
            return constants$295.const$5;
        }
        /**
         * Getter for field:
         * {@snippet :
         * hid_t key_mem_type_id;
         * }
         */
        public static long key_mem_type_id$get(MemorySegment seg) {
            return (long)constants$295.const$5.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * hid_t key_mem_type_id;
         * }
         */
        public static void key_mem_type_id$set(MemorySegment seg, long x) {
            constants$295.const$5.set(seg, x);
        }
        public static long key_mem_type_id$get(MemorySegment seg, long index) {
            return (long)constants$295.const$5.get(seg.asSlice(index*sizeof()));
        }
        public static void key_mem_type_id$set(MemorySegment seg, long index, long x) {
            constants$295.const$5.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle key$VH() {
            return constants$296.const$0;
        }
        /**
         * Getter for field:
         * {@snippet :
         * void* key;
         * }
         */
        public static MemorySegment key$get(MemorySegment seg) {
            return (java.lang.foreign.MemorySegment)constants$296.const$0.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * void* key;
         * }
         */
        public static void key$set(MemorySegment seg, MemorySegment x) {
            constants$296.const$0.set(seg, x);
        }
        public static MemorySegment key$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemorySegment)constants$296.const$0.get(seg.asSlice(index*sizeof()));
        }
        public static void key$set(MemorySegment seg, long index, MemorySegment x) {
            constants$296.const$0.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle value_mem_type_id$VH() {
            return constants$296.const$1;
        }
        /**
         * Getter for field:
         * {@snippet :
         * hid_t value_mem_type_id;
         * }
         */
        public static long value_mem_type_id$get(MemorySegment seg) {
            return (long)constants$296.const$1.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * hid_t value_mem_type_id;
         * }
         */
        public static void value_mem_type_id$set(MemorySegment seg, long x) {
            constants$296.const$1.set(seg, x);
        }
        public static long value_mem_type_id$get(MemorySegment seg, long index) {
            return (long)constants$296.const$1.get(seg.asSlice(index*sizeof()));
        }
        public static void value_mem_type_id$set(MemorySegment seg, long index, long x) {
            constants$296.const$1.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle value$VH() {
            return constants$296.const$2;
        }
        /**
         * Getter for field:
         * {@snippet :
         * void* value;
         * }
         */
        public static MemorySegment value$get(MemorySegment seg) {
            return (java.lang.foreign.MemorySegment)constants$296.const$2.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * void* value;
         * }
         */
        public static void value$set(MemorySegment seg, MemorySegment x) {
            constants$296.const$2.set(seg, x);
        }
        public static MemorySegment value$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemorySegment)constants$296.const$2.get(seg.asSlice(index*sizeof()));
        }
        public static void value$set(MemorySegment seg, long index, MemorySegment x) {
            constants$296.const$2.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment get_val$slice(MemorySegment seg) {
        return seg.asSlice(0, 32);
    }
    /**
     * {@snippet :
     * struct {
     *     hid_t key_mem_type_id;
     *     void* key;
     *     hbool_t exists;
     * };
     * }
     */
    public static final class exists {

        // Suppresses default constructor, ensuring non-instantiability.
        private exists() {}
        public static MemoryLayout $LAYOUT() {
            return constants$296.const$3;
        }
        public static VarHandle key_mem_type_id$VH() {
            return constants$296.const$4;
        }
        /**
         * Getter for field:
         * {@snippet :
         * hid_t key_mem_type_id;
         * }
         */
        public static long key_mem_type_id$get(MemorySegment seg) {
            return (long)constants$296.const$4.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * hid_t key_mem_type_id;
         * }
         */
        public static void key_mem_type_id$set(MemorySegment seg, long x) {
            constants$296.const$4.set(seg, x);
        }
        public static long key_mem_type_id$get(MemorySegment seg, long index) {
            return (long)constants$296.const$4.get(seg.asSlice(index*sizeof()));
        }
        public static void key_mem_type_id$set(MemorySegment seg, long index, long x) {
            constants$296.const$4.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle key$VH() {
            return constants$296.const$5;
        }
        /**
         * Getter for field:
         * {@snippet :
         * void* key;
         * }
         */
        public static MemorySegment key$get(MemorySegment seg) {
            return (java.lang.foreign.MemorySegment)constants$296.const$5.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * void* key;
         * }
         */
        public static void key$set(MemorySegment seg, MemorySegment x) {
            constants$296.const$5.set(seg, x);
        }
        public static MemorySegment key$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemorySegment)constants$296.const$5.get(seg.asSlice(index*sizeof()));
        }
        public static void key$set(MemorySegment seg, long index, MemorySegment x) {
            constants$296.const$5.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle exists$VH() {
            return constants$297.const$0;
        }
        /**
         * Getter for field:
         * {@snippet :
         * hbool_t exists;
         * }
         */
        public static boolean exists$get(MemorySegment seg) {
            return (boolean)constants$297.const$0.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * hbool_t exists;
         * }
         */
        public static void exists$set(MemorySegment seg, boolean x) {
            constants$297.const$0.set(seg, x);
        }
        public static boolean exists$get(MemorySegment seg, long index) {
            return (boolean)constants$297.const$0.get(seg.asSlice(index*sizeof()));
        }
        public static void exists$set(MemorySegment seg, long index, boolean x) {
            constants$297.const$0.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment exists$slice(MemorySegment seg) {
        return seg.asSlice(0, 24);
    }
    /**
     * {@snippet :
     * struct {
     *     hid_t key_mem_type_id;
     *     void* key;
     *     hid_t value_mem_type_id;
     *     void* value;
     * };
     * }
     */
    public static final class put {

        // Suppresses default constructor, ensuring non-instantiability.
        private put() {}
        public static MemoryLayout $LAYOUT() {
            return constants$295.const$4;
        }
        public static VarHandle key_mem_type_id$VH() {
            return constants$297.const$1;
        }
        /**
         * Getter for field:
         * {@snippet :
         * hid_t key_mem_type_id;
         * }
         */
        public static long key_mem_type_id$get(MemorySegment seg) {
            return (long)constants$297.const$1.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * hid_t key_mem_type_id;
         * }
         */
        public static void key_mem_type_id$set(MemorySegment seg, long x) {
            constants$297.const$1.set(seg, x);
        }
        public static long key_mem_type_id$get(MemorySegment seg, long index) {
            return (long)constants$297.const$1.get(seg.asSlice(index*sizeof()));
        }
        public static void key_mem_type_id$set(MemorySegment seg, long index, long x) {
            constants$297.const$1.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle key$VH() {
            return constants$297.const$2;
        }
        /**
         * Getter for field:
         * {@snippet :
         * void* key;
         * }
         */
        public static MemorySegment key$get(MemorySegment seg) {
            return (java.lang.foreign.MemorySegment)constants$297.const$2.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * void* key;
         * }
         */
        public static void key$set(MemorySegment seg, MemorySegment x) {
            constants$297.const$2.set(seg, x);
        }
        public static MemorySegment key$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemorySegment)constants$297.const$2.get(seg.asSlice(index*sizeof()));
        }
        public static void key$set(MemorySegment seg, long index, MemorySegment x) {
            constants$297.const$2.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle value_mem_type_id$VH() {
            return constants$297.const$3;
        }
        /**
         * Getter for field:
         * {@snippet :
         * hid_t value_mem_type_id;
         * }
         */
        public static long value_mem_type_id$get(MemorySegment seg) {
            return (long)constants$297.const$3.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * hid_t value_mem_type_id;
         * }
         */
        public static void value_mem_type_id$set(MemorySegment seg, long x) {
            constants$297.const$3.set(seg, x);
        }
        public static long value_mem_type_id$get(MemorySegment seg, long index) {
            return (long)constants$297.const$3.get(seg.asSlice(index*sizeof()));
        }
        public static void value_mem_type_id$set(MemorySegment seg, long index, long x) {
            constants$297.const$3.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle value$VH() {
            return constants$297.const$4;
        }
        /**
         * Getter for field:
         * {@snippet :
         * void* value;
         * }
         */
        public static MemorySegment value$get(MemorySegment seg) {
            return (java.lang.foreign.MemorySegment)constants$297.const$4.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * void* value;
         * }
         */
        public static void value$set(MemorySegment seg, MemorySegment x) {
            constants$297.const$4.set(seg, x);
        }
        public static MemorySegment value$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemorySegment)constants$297.const$4.get(seg.asSlice(index*sizeof()));
        }
        public static void value$set(MemorySegment seg, long index, MemorySegment x) {
            constants$297.const$4.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment put$slice(MemorySegment seg) {
        return seg.asSlice(0, 32);
    }
    /**
     * {@snippet :
     * struct {
     *     H5VL_map_get_t get_type;
     *     union  args;
     * };
     * }
     */
    public static final class get {

        // Suppresses default constructor, ensuring non-instantiability.
        private get() {}
        public static MemoryLayout $LAYOUT() {
            return constants$297.const$5;
        }
        public static VarHandle get_type$VH() {
            return constants$298.const$0;
        }
        /**
         * Getter for field:
         * {@snippet :
         * H5VL_map_get_t get_type;
         * }
         */
        public static int get_type$get(MemorySegment seg) {
            return (int)constants$298.const$0.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * H5VL_map_get_t get_type;
         * }
         */
        public static void get_type$set(MemorySegment seg, int x) {
            constants$298.const$0.set(seg, x);
        }
        public static int get_type$get(MemorySegment seg, long index) {
            return (int)constants$298.const$0.get(seg.asSlice(index*sizeof()));
        }
        public static void get_type$set(MemorySegment seg, long index, int x) {
            constants$298.const$0.set(seg.asSlice(index*sizeof()), x);
        }
        /**
         * {@snippet :
         * union {
         *     struct  get_mapl;
         *     struct  get_mcpl;
         *     struct  get_key_type;
         *     struct  get_val_type;
         *     struct  get_count;
         * };
         * }
         */
        public static final class args {

            // Suppresses default constructor, ensuring non-instantiability.
            private args() {}
            public static MemoryLayout $LAYOUT() {
                return constants$298.const$1;
            }
            /**
             * {@snippet :
             * struct {
             *     hid_t mapl_id;
             * };
             * }
             */
            public static final class get_mapl {

                // Suppresses default constructor, ensuring non-instantiability.
                private get_mapl() {}
                public static MemoryLayout $LAYOUT() {
                    return constants$298.const$2;
                }
                public static VarHandle mapl_id$VH() {
                    return constants$298.const$3;
                }
                /**
                 * Getter for field:
                 * {@snippet :
                 * hid_t mapl_id;
                 * }
                 */
                public static long mapl_id$get(MemorySegment seg) {
                    return (long)constants$298.const$3.get(seg);
                }
                /**
                 * Setter for field:
                 * {@snippet :
                 * hid_t mapl_id;
                 * }
                 */
                public static void mapl_id$set(MemorySegment seg, long x) {
                    constants$298.const$3.set(seg, x);
                }
                public static long mapl_id$get(MemorySegment seg, long index) {
                    return (long)constants$298.const$3.get(seg.asSlice(index*sizeof()));
                }
                public static void mapl_id$set(MemorySegment seg, long index, long x) {
                    constants$298.const$3.set(seg.asSlice(index*sizeof()), x);
                }
                public static long sizeof() { return $LAYOUT().byteSize(); }
                public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
                public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                    return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
                }
                public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
            }

            public static MemorySegment get_mapl$slice(MemorySegment seg) {
                return seg.asSlice(0, 8);
            }
            /**
             * {@snippet :
             * struct {
             *     hid_t mcpl_id;
             * };
             * }
             */
            public static final class get_mcpl {

                // Suppresses default constructor, ensuring non-instantiability.
                private get_mcpl() {}
                public static MemoryLayout $LAYOUT() {
                    return constants$298.const$4;
                }
                public static VarHandle mcpl_id$VH() {
                    return constants$298.const$5;
                }
                /**
                 * Getter for field:
                 * {@snippet :
                 * hid_t mcpl_id;
                 * }
                 */
                public static long mcpl_id$get(MemorySegment seg) {
                    return (long)constants$298.const$5.get(seg);
                }
                /**
                 * Setter for field:
                 * {@snippet :
                 * hid_t mcpl_id;
                 * }
                 */
                public static void mcpl_id$set(MemorySegment seg, long x) {
                    constants$298.const$5.set(seg, x);
                }
                public static long mcpl_id$get(MemorySegment seg, long index) {
                    return (long)constants$298.const$5.get(seg.asSlice(index*sizeof()));
                }
                public static void mcpl_id$set(MemorySegment seg, long index, long x) {
                    constants$298.const$5.set(seg.asSlice(index*sizeof()), x);
                }
                public static long sizeof() { return $LAYOUT().byteSize(); }
                public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
                public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                    return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
                }
                public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
            }

            public static MemorySegment get_mcpl$slice(MemorySegment seg) {
                return seg.asSlice(0, 8);
            }
            /**
             * {@snippet :
             * struct {
             *     hid_t type_id;
             * };
             * }
             */
            public static final class get_key_type {

                // Suppresses default constructor, ensuring non-instantiability.
                private get_key_type() {}
                public static MemoryLayout $LAYOUT() {
                    return constants$222.const$1;
                }
                public static VarHandle type_id$VH() {
                    return constants$299.const$0;
                }
                /**
                 * Getter for field:
                 * {@snippet :
                 * hid_t type_id;
                 * }
                 */
                public static long type_id$get(MemorySegment seg) {
                    return (long)constants$299.const$0.get(seg);
                }
                /**
                 * Setter for field:
                 * {@snippet :
                 * hid_t type_id;
                 * }
                 */
                public static void type_id$set(MemorySegment seg, long x) {
                    constants$299.const$0.set(seg, x);
                }
                public static long type_id$get(MemorySegment seg, long index) {
                    return (long)constants$299.const$0.get(seg.asSlice(index*sizeof()));
                }
                public static void type_id$set(MemorySegment seg, long index, long x) {
                    constants$299.const$0.set(seg.asSlice(index*sizeof()), x);
                }
                public static long sizeof() { return $LAYOUT().byteSize(); }
                public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
                public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                    return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
                }
                public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
            }

            public static MemorySegment get_key_type$slice(MemorySegment seg) {
                return seg.asSlice(0, 8);
            }
            /**
             * {@snippet :
             * struct {
             *     hid_t type_id;
             * };
             * }
             */
            public static final class get_val_type {

                // Suppresses default constructor, ensuring non-instantiability.
                private get_val_type() {}
                public static MemoryLayout $LAYOUT() {
                    return constants$222.const$1;
                }
                public static VarHandle type_id$VH() {
                    return constants$299.const$1;
                }
                /**
                 * Getter for field:
                 * {@snippet :
                 * hid_t type_id;
                 * }
                 */
                public static long type_id$get(MemorySegment seg) {
                    return (long)constants$299.const$1.get(seg);
                }
                /**
                 * Setter for field:
                 * {@snippet :
                 * hid_t type_id;
                 * }
                 */
                public static void type_id$set(MemorySegment seg, long x) {
                    constants$299.const$1.set(seg, x);
                }
                public static long type_id$get(MemorySegment seg, long index) {
                    return (long)constants$299.const$1.get(seg.asSlice(index*sizeof()));
                }
                public static void type_id$set(MemorySegment seg, long index, long x) {
                    constants$299.const$1.set(seg.asSlice(index*sizeof()), x);
                }
                public static long sizeof() { return $LAYOUT().byteSize(); }
                public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
                public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                    return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
                }
                public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
            }

            public static MemorySegment get_val_type$slice(MemorySegment seg) {
                return seg.asSlice(0, 8);
            }
            /**
             * {@snippet :
             * struct {
             *     hsize_t count;
             * };
             * }
             */
            public static final class get_count {

                // Suppresses default constructor, ensuring non-instantiability.
                private get_count() {}
                public static MemoryLayout $LAYOUT() {
                    return constants$299.const$2;
                }
                public static VarHandle count$VH() {
                    return constants$299.const$3;
                }
                /**
                 * Getter for field:
                 * {@snippet :
                 * hsize_t count;
                 * }
                 */
                public static long count$get(MemorySegment seg) {
                    return (long)constants$299.const$3.get(seg);
                }
                /**
                 * Setter for field:
                 * {@snippet :
                 * hsize_t count;
                 * }
                 */
                public static void count$set(MemorySegment seg, long x) {
                    constants$299.const$3.set(seg, x);
                }
                public static long count$get(MemorySegment seg, long index) {
                    return (long)constants$299.const$3.get(seg.asSlice(index*sizeof()));
                }
                public static void count$set(MemorySegment seg, long index, long x) {
                    constants$299.const$3.set(seg.asSlice(index*sizeof()), x);
                }
                public static long sizeof() { return $LAYOUT().byteSize(); }
                public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
                public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                    return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
                }
                public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
            }

            public static MemorySegment get_count$slice(MemorySegment seg) {
                return seg.asSlice(0, 8);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
        }

        public static MemorySegment args$slice(MemorySegment seg) {
            return seg.asSlice(8, 8);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment get$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    /**
     * {@snippet :
     * struct {
     *     H5VL_map_specific_t specific_type;
     *     union  args;
     * };
     * }
     */
    public static final class specific {

        // Suppresses default constructor, ensuring non-instantiability.
        private specific() {}
        public static MemoryLayout $LAYOUT() {
            return constants$299.const$4;
        }
        public static VarHandle specific_type$VH() {
            return constants$299.const$5;
        }
        /**
         * Getter for field:
         * {@snippet :
         * H5VL_map_specific_t specific_type;
         * }
         */
        public static int specific_type$get(MemorySegment seg) {
            return (int)constants$299.const$5.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * H5VL_map_specific_t specific_type;
         * }
         */
        public static void specific_type$set(MemorySegment seg, int x) {
            constants$299.const$5.set(seg, x);
        }
        public static int specific_type$get(MemorySegment seg, long index) {
            return (int)constants$299.const$5.get(seg.asSlice(index*sizeof()));
        }
        public static void specific_type$set(MemorySegment seg, long index, int x) {
            constants$299.const$5.set(seg.asSlice(index*sizeof()), x);
        }
        /**
         * {@snippet :
         * union {
         *     struct  iterate;
         *     struct  del;
         * };
         * }
         */
        public static final class args {

            // Suppresses default constructor, ensuring non-instantiability.
            private args() {}
            public static MemoryLayout $LAYOUT() {
                return constants$300.const$0;
            }
            /**
             * {@snippet :
             * struct {
             *     H5VL_loc_params_t loc_params;
             *     hsize_t idx;
             *     hid_t key_mem_type_id;
             *     H5M_iterate_t op;
             *     void* op_data;
             * };
             * }
             */
            public static final class iterate {

                // Suppresses default constructor, ensuring non-instantiability.
                private iterate() {}
                public static MemoryLayout $LAYOUT() {
                    return constants$300.const$1;
                }
                public static MemorySegment loc_params$slice(MemorySegment seg) {
                    return seg.asSlice(0, 40);
                }
                public static VarHandle idx$VH() {
                    return constants$300.const$2;
                }
                /**
                 * Getter for field:
                 * {@snippet :
                 * hsize_t idx;
                 * }
                 */
                public static long idx$get(MemorySegment seg) {
                    return (long)constants$300.const$2.get(seg);
                }
                /**
                 * Setter for field:
                 * {@snippet :
                 * hsize_t idx;
                 * }
                 */
                public static void idx$set(MemorySegment seg, long x) {
                    constants$300.const$2.set(seg, x);
                }
                public static long idx$get(MemorySegment seg, long index) {
                    return (long)constants$300.const$2.get(seg.asSlice(index*sizeof()));
                }
                public static void idx$set(MemorySegment seg, long index, long x) {
                    constants$300.const$2.set(seg.asSlice(index*sizeof()), x);
                }
                public static VarHandle key_mem_type_id$VH() {
                    return constants$300.const$3;
                }
                /**
                 * Getter for field:
                 * {@snippet :
                 * hid_t key_mem_type_id;
                 * }
                 */
                public static long key_mem_type_id$get(MemorySegment seg) {
                    return (long)constants$300.const$3.get(seg);
                }
                /**
                 * Setter for field:
                 * {@snippet :
                 * hid_t key_mem_type_id;
                 * }
                 */
                public static void key_mem_type_id$set(MemorySegment seg, long x) {
                    constants$300.const$3.set(seg, x);
                }
                public static long key_mem_type_id$get(MemorySegment seg, long index) {
                    return (long)constants$300.const$3.get(seg.asSlice(index*sizeof()));
                }
                public static void key_mem_type_id$set(MemorySegment seg, long index, long x) {
                    constants$300.const$3.set(seg.asSlice(index*sizeof()), x);
                }
                public static VarHandle op$VH() {
                    return constants$300.const$4;
                }
                /**
                 * Getter for field:
                 * {@snippet :
                 * H5M_iterate_t op;
                 * }
                 */
                public static MemorySegment op$get(MemorySegment seg) {
                    return (java.lang.foreign.MemorySegment)constants$300.const$4.get(seg);
                }
                /**
                 * Setter for field:
                 * {@snippet :
                 * H5M_iterate_t op;
                 * }
                 */
                public static void op$set(MemorySegment seg, MemorySegment x) {
                    constants$300.const$4.set(seg, x);
                }
                public static MemorySegment op$get(MemorySegment seg, long index) {
                    return (java.lang.foreign.MemorySegment)constants$300.const$4.get(seg.asSlice(index*sizeof()));
                }
                public static void op$set(MemorySegment seg, long index, MemorySegment x) {
                    constants$300.const$4.set(seg.asSlice(index*sizeof()), x);
                }
                public static H5M_iterate_t op(MemorySegment segment, Arena scope) {
                    return H5M_iterate_t.ofAddress(op$get(segment), scope);
                }
                public static VarHandle op_data$VH() {
                    return constants$300.const$5;
                }
                /**
                 * Getter for field:
                 * {@snippet :
                 * void* op_data;
                 * }
                 */
                public static MemorySegment op_data$get(MemorySegment seg) {
                    return (java.lang.foreign.MemorySegment)constants$300.const$5.get(seg);
                }
                /**
                 * Setter for field:
                 * {@snippet :
                 * void* op_data;
                 * }
                 */
                public static void op_data$set(MemorySegment seg, MemorySegment x) {
                    constants$300.const$5.set(seg, x);
                }
                public static MemorySegment op_data$get(MemorySegment seg, long index) {
                    return (java.lang.foreign.MemorySegment)constants$300.const$5.get(seg.asSlice(index*sizeof()));
                }
                public static void op_data$set(MemorySegment seg, long index, MemorySegment x) {
                    constants$300.const$5.set(seg.asSlice(index*sizeof()), x);
                }
                public static long sizeof() { return $LAYOUT().byteSize(); }
                public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
                public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                    return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
                }
                public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
            }

            public static MemorySegment iterate$slice(MemorySegment seg) {
                return seg.asSlice(0, 72);
            }
            /**
             * {@snippet :
             * struct {
             *     H5VL_loc_params_t loc_params;
             *     hid_t key_mem_type_id;
             *     void* key;
             * };
             * }
             */
            public static final class del {

                // Suppresses default constructor, ensuring non-instantiability.
                private del() {}
                public static MemoryLayout $LAYOUT() {
                    return constants$301.const$0;
                }
                public static MemorySegment loc_params$slice(MemorySegment seg) {
                    return seg.asSlice(0, 40);
                }
                public static VarHandle key_mem_type_id$VH() {
                    return constants$301.const$1;
                }
                /**
                 * Getter for field:
                 * {@snippet :
                 * hid_t key_mem_type_id;
                 * }
                 */
                public static long key_mem_type_id$get(MemorySegment seg) {
                    return (long)constants$301.const$1.get(seg);
                }
                /**
                 * Setter for field:
                 * {@snippet :
                 * hid_t key_mem_type_id;
                 * }
                 */
                public static void key_mem_type_id$set(MemorySegment seg, long x) {
                    constants$301.const$1.set(seg, x);
                }
                public static long key_mem_type_id$get(MemorySegment seg, long index) {
                    return (long)constants$301.const$1.get(seg.asSlice(index*sizeof()));
                }
                public static void key_mem_type_id$set(MemorySegment seg, long index, long x) {
                    constants$301.const$1.set(seg.asSlice(index*sizeof()), x);
                }
                public static VarHandle key$VH() {
                    return constants$301.const$2;
                }
                /**
                 * Getter for field:
                 * {@snippet :
                 * void* key;
                 * }
                 */
                public static MemorySegment key$get(MemorySegment seg) {
                    return (java.lang.foreign.MemorySegment)constants$301.const$2.get(seg);
                }
                /**
                 * Setter for field:
                 * {@snippet :
                 * void* key;
                 * }
                 */
                public static void key$set(MemorySegment seg, MemorySegment x) {
                    constants$301.const$2.set(seg, x);
                }
                public static MemorySegment key$get(MemorySegment seg, long index) {
                    return (java.lang.foreign.MemorySegment)constants$301.const$2.get(seg.asSlice(index*sizeof()));
                }
                public static void key$set(MemorySegment seg, long index, MemorySegment x) {
                    constants$301.const$2.set(seg.asSlice(index*sizeof()), x);
                }
                public static long sizeof() { return $LAYOUT().byteSize(); }
                public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
                public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                    return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
                }
                public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
            }

            public static MemorySegment del$slice(MemorySegment seg) {
                return seg.asSlice(0, 56);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
        }

        public static MemorySegment args$slice(MemorySegment seg) {
            return seg.asSlice(8, 72);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment specific$slice(MemorySegment seg) {
        return seg.asSlice(0, 80);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


