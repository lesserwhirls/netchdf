// Generated by jextract

package com.sunya.netchdf.hdf5Clib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct H5VL_native_dataset_get_chunk_info_by_coord_t {
 *     const hsize_t* offset;
 *     unsigned int* filter_mask;
 *     haddr_t* addr;
 *     hsize_t* size;
 * };
 * }
 */
public class H5VL_native_dataset_get_chunk_info_by_coord_t {

    public static MemoryLayout $LAYOUT() {
        return constants$420.const$3;
    }
    public static VarHandle offset$VH() {
        return constants$420.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const hsize_t* offset;
     * }
     */
    public static MemorySegment offset$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$420.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const hsize_t* offset;
     * }
     */
    public static void offset$set(MemorySegment seg, MemorySegment x) {
        constants$420.const$4.set(seg, x);
    }
    public static MemorySegment offset$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$420.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void offset$set(MemorySegment seg, long index, MemorySegment x) {
        constants$420.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle filter_mask$VH() {
        return constants$420.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int* filter_mask;
     * }
     */
    public static MemorySegment filter_mask$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$420.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int* filter_mask;
     * }
     */
    public static void filter_mask$set(MemorySegment seg, MemorySegment x) {
        constants$420.const$5.set(seg, x);
    }
    public static MemorySegment filter_mask$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$420.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void filter_mask$set(MemorySegment seg, long index, MemorySegment x) {
        constants$420.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle addr$VH() {
        return constants$421.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * haddr_t* addr;
     * }
     */
    public static MemorySegment addr$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$421.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * haddr_t* addr;
     * }
     */
    public static void addr$set(MemorySegment seg, MemorySegment x) {
        constants$421.const$0.set(seg, x);
    }
    public static MemorySegment addr$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$421.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void addr$set(MemorySegment seg, long index, MemorySegment x) {
        constants$421.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle size$VH() {
        return constants$421.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * hsize_t* size;
     * }
     */
    public static MemorySegment size$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$421.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * hsize_t* size;
     * }
     */
    public static void size$set(MemorySegment seg, MemorySegment x) {
        constants$421.const$1.set(seg, x);
    }
    public static MemorySegment size$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$421.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void size$set(MemorySegment seg, long index, MemorySegment x) {
        constants$421.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


