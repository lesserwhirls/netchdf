// Generated by jextract

package com.sunya.netchdf.hdf5Clib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct H5O_info2_t {
 *     unsigned long fileno;
 *     H5O_token_t token;
 *     H5O_type_t type;
 *     unsigned int rc;
 *     time_t atime;
 *     time_t mtime;
 *     time_t ctime;
 *     time_t btime;
 *     hsize_t num_attrs;
 * };
 * }
 */
public class H5O_info2_t {

    public static MemoryLayout $LAYOUT() {
        return constants$25.const$1;
    }
    public static VarHandle fileno$VH() {
        return constants$25.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long fileno;
     * }
     */
    public static long fileno$get(MemorySegment seg) {
        return (long)constants$25.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long fileno;
     * }
     */
    public static void fileno$set(MemorySegment seg, long x) {
        constants$25.const$2.set(seg, x);
    }
    public static long fileno$get(MemorySegment seg, long index) {
        return (long)constants$25.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void fileno$set(MemorySegment seg, long index, long x) {
        constants$25.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment token$slice(MemorySegment seg) {
        return seg.asSlice(8, 16);
    }
    public static VarHandle type$VH() {
        return constants$25.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * H5O_type_t type;
     * }
     */
    public static int type$get(MemorySegment seg) {
        return (int)constants$25.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * H5O_type_t type;
     * }
     */
    public static void type$set(MemorySegment seg, int x) {
        constants$25.const$3.set(seg, x);
    }
    public static int type$get(MemorySegment seg, long index) {
        return (int)constants$25.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, int x) {
        constants$25.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle rc$VH() {
        return constants$25.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int rc;
     * }
     */
    public static int rc$get(MemorySegment seg) {
        return (int)constants$25.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int rc;
     * }
     */
    public static void rc$set(MemorySegment seg, int x) {
        constants$25.const$4.set(seg, x);
    }
    public static int rc$get(MemorySegment seg, long index) {
        return (int)constants$25.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void rc$set(MemorySegment seg, long index, int x) {
        constants$25.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle atime$VH() {
        return constants$25.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * time_t atime;
     * }
     */
    public static long atime$get(MemorySegment seg) {
        return (long)constants$25.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * time_t atime;
     * }
     */
    public static void atime$set(MemorySegment seg, long x) {
        constants$25.const$5.set(seg, x);
    }
    public static long atime$get(MemorySegment seg, long index) {
        return (long)constants$25.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void atime$set(MemorySegment seg, long index, long x) {
        constants$25.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle mtime$VH() {
        return constants$26.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * time_t mtime;
     * }
     */
    public static long mtime$get(MemorySegment seg) {
        return (long)constants$26.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * time_t mtime;
     * }
     */
    public static void mtime$set(MemorySegment seg, long x) {
        constants$26.const$0.set(seg, x);
    }
    public static long mtime$get(MemorySegment seg, long index) {
        return (long)constants$26.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void mtime$set(MemorySegment seg, long index, long x) {
        constants$26.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ctime$VH() {
        return constants$26.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * time_t ctime;
     * }
     */
    public static long ctime$get(MemorySegment seg) {
        return (long)constants$26.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * time_t ctime;
     * }
     */
    public static void ctime$set(MemorySegment seg, long x) {
        constants$26.const$1.set(seg, x);
    }
    public static long ctime$get(MemorySegment seg, long index) {
        return (long)constants$26.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ctime$set(MemorySegment seg, long index, long x) {
        constants$26.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle btime$VH() {
        return constants$26.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * time_t btime;
     * }
     */
    public static long btime$get(MemorySegment seg) {
        return (long)constants$26.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * time_t btime;
     * }
     */
    public static void btime$set(MemorySegment seg, long x) {
        constants$26.const$2.set(seg, x);
    }
    public static long btime$get(MemorySegment seg, long index) {
        return (long)constants$26.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void btime$set(MemorySegment seg, long index, long x) {
        constants$26.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle num_attrs$VH() {
        return constants$26.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * hsize_t num_attrs;
     * }
     */
    public static long num_attrs$get(MemorySegment seg) {
        return (long)constants$26.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * hsize_t num_attrs;
     * }
     */
    public static void num_attrs$set(MemorySegment seg, long x) {
        constants$26.const$3.set(seg, x);
    }
    public static long num_attrs$get(MemorySegment seg, long index) {
        return (long)constants$26.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void num_attrs$set(MemorySegment seg, long index, long x) {
        constants$26.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


