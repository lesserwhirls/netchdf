// Generated by jextract

package com.sunya.netchdf.hdf5Clib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct {
 *     H5L_type_t type;
 *     hbool_t corder_valid;
 *     int64_t corder;
 *     H5T_cset_t cset;
 *     union  u;
 * };
 * }
 */
public class H5L_info2_t {

    public static MemoryLayout $LAYOUT() {
        return constants$190.const$1;
    }
    public static VarHandle type$VH() {
        return constants$190.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * H5L_type_t type;
     * }
     */
    public static int type$get(MemorySegment seg) {
        return (int)constants$190.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * H5L_type_t type;
     * }
     */
    public static void type$set(MemorySegment seg, int x) {
        constants$190.const$2.set(seg, x);
    }
    public static int type$get(MemorySegment seg, long index) {
        return (int)constants$190.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, int x) {
        constants$190.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle corder_valid$VH() {
        return constants$190.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * hbool_t corder_valid;
     * }
     */
    public static boolean corder_valid$get(MemorySegment seg) {
        return (boolean)constants$190.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * hbool_t corder_valid;
     * }
     */
    public static void corder_valid$set(MemorySegment seg, boolean x) {
        constants$190.const$3.set(seg, x);
    }
    public static boolean corder_valid$get(MemorySegment seg, long index) {
        return (boolean)constants$190.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void corder_valid$set(MemorySegment seg, long index, boolean x) {
        constants$190.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle corder$VH() {
        return constants$190.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t corder;
     * }
     */
    public static long corder$get(MemorySegment seg) {
        return (long)constants$190.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t corder;
     * }
     */
    public static void corder$set(MemorySegment seg, long x) {
        constants$190.const$4.set(seg, x);
    }
    public static long corder$get(MemorySegment seg, long index) {
        return (long)constants$190.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void corder$set(MemorySegment seg, long index, long x) {
        constants$190.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cset$VH() {
        return constants$190.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * H5T_cset_t cset;
     * }
     */
    public static int cset$get(MemorySegment seg) {
        return (int)constants$190.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * H5T_cset_t cset;
     * }
     */
    public static void cset$set(MemorySegment seg, int x) {
        constants$190.const$5.set(seg, x);
    }
    public static int cset$get(MemorySegment seg, long index) {
        return (int)constants$190.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void cset$set(MemorySegment seg, long index, int x) {
        constants$190.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * union {
     *     H5O_token_t token;
     *     size_t val_size;
     * };
     * }
     */
    public static final class u {

        // Suppresses default constructor, ensuring non-instantiability.
        private u() {}
        public static MemoryLayout $LAYOUT() {
            return constants$191.const$0;
        }
        public static MemorySegment token$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static VarHandle val_size$VH() {
            return constants$191.const$1;
        }
        /**
         * Getter for field:
         * {@snippet :
         * size_t val_size;
         * }
         */
        public static long val_size$get(MemorySegment seg) {
            return (long)constants$191.const$1.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * size_t val_size;
         * }
         */
        public static void val_size$set(MemorySegment seg, long x) {
            constants$191.const$1.set(seg, x);
        }
        public static long val_size$get(MemorySegment seg, long index) {
            return (long)constants$191.const$1.get(seg.asSlice(index*sizeof()));
        }
        public static void val_size$set(MemorySegment seg, long index, long x) {
            constants$191.const$1.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment u$slice(MemorySegment seg) {
        return seg.asSlice(24, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


