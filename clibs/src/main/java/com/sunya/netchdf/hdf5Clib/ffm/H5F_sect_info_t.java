// Generated by jextract

package com.sunya.netchdf.hdf5Clib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct H5F_sect_info_t {
 *     haddr_t addr;
 *     hsize_t size;
 * };
 * }
 */
public class H5F_sect_info_t {

    public static MemoryLayout $LAYOUT() {
        return constants$174.const$0;
    }
    public static VarHandle addr$VH() {
        return constants$174.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * haddr_t addr;
     * }
     */
    public static long addr$get(MemorySegment seg) {
        return (long)constants$174.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * haddr_t addr;
     * }
     */
    public static void addr$set(MemorySegment seg, long x) {
        constants$174.const$1.set(seg, x);
    }
    public static long addr$get(MemorySegment seg, long index) {
        return (long)constants$174.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void addr$set(MemorySegment seg, long index, long x) {
        constants$174.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle size$VH() {
        return constants$174.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * hsize_t size;
     * }
     */
    public static long size$get(MemorySegment seg) {
        return (long)constants$174.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * hsize_t size;
     * }
     */
    public static void size$set(MemorySegment seg, long x) {
        constants$174.const$2.set(seg, x);
    }
    public static long size$get(MemorySegment seg, long index) {
        return (long)constants$174.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void size$set(MemorySegment seg, long index, long x) {
        constants$174.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


