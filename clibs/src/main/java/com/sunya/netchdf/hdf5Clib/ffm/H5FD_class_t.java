// Generated by jextract

package com.sunya.netchdf.hdf5Clib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct H5FD_class_t {
 *     unsigned int version;
 *     H5FD_class_value_t value;
 *     char* name;
 *     haddr_t maxaddr;
 *     H5F_close_degree_t fc_degree;
 *     herr_t (*terminate)();
 *     hsize_t (*sb_size)(H5FD_t*);
 *     herr_t (*sb_encode)(H5FD_t*,char*,unsigned char*);
 *     herr_t (*sb_decode)(H5FD_t*,char*,unsigned char*);
 *     size_t fapl_size;
 *     void* (*fapl_get)(H5FD_t*);
 *     void* (*fapl_copy)(void*);
 *     herr_t (*fapl_free)(void*);
 *     size_t dxpl_size;
 *     void* (*dxpl_copy)(void*);
 *     herr_t (*dxpl_free)(void*);
 *     H5FD_t* (*open)(char*,unsigned int,hid_t,haddr_t);
 *     herr_t (*close)(H5FD_t*);
 *     int (*cmp)(const H5FD_t*,const H5FD_t*);
 *     herr_t (*query)(const H5FD_t*,unsigned long*);
 *     herr_t (*get_type_map)(const H5FD_t*,H5FD_mem_t*);
 *     haddr_t (*alloc)(H5FD_t*,H5FD_mem_t,hid_t,hsize_t);
 *     herr_t (*free)(H5FD_t*,H5FD_mem_t,hid_t,haddr_t,hsize_t);
 *     haddr_t (*get_eoa)(const H5FD_t*,H5FD_mem_t);
 *     herr_t (*set_eoa)(H5FD_t*,H5FD_mem_t,haddr_t);
 *     haddr_t (*get_eof)(const H5FD_t*,H5FD_mem_t);
 *     herr_t (*get_handle)(H5FD_t*,hid_t,void**);
 *     herr_t (*read)(H5FD_t*,H5FD_mem_t,hid_t,haddr_t,size_t,void*);
 *     herr_t (*write)(H5FD_t*,H5FD_mem_t,hid_t,haddr_t,size_t,void*);
 *     herr_t (*read_vector)(H5FD_t*,hid_t,uint32_t,H5FD_mem_t*,haddr_t*,size_t*,void**);
 *     herr_t (*write_vector)(H5FD_t*,hid_t,uint32_t,H5FD_mem_t*,haddr_t*,size_t*,void**);
 *     herr_t (*read_selection)(H5FD_t*,H5FD_mem_t,hid_t,size_t,hid_t*,hid_t*,haddr_t*,size_t*,void**);
 *     herr_t (*write_selection)(H5FD_t*,H5FD_mem_t,hid_t,size_t,hid_t*,hid_t*,haddr_t*,size_t*,void**);
 *     herr_t (*flush)(H5FD_t*,hid_t,hbool_t);
 *     herr_t (*truncate)(H5FD_t*,hid_t,hbool_t);
 *     herr_t (*lock)(H5FD_t*,hbool_t);
 *     herr_t (*unlock)(H5FD_t*);
 *     herr_t (*del)(char*,hid_t);
 *     herr_t (*ctl)(H5FD_t*,uint64_t,uint64_t,void*,void**);
 *     H5FD_mem_t fl_map[7];
 * };
 * }
 */
public class H5FD_class_t {

    public static MemoryLayout $LAYOUT() {
        return constants$361.const$2;
    }
    public static VarHandle version$VH() {
        return constants$361.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int version;
     * }
     */
    public static int version$get(MemorySegment seg) {
        return (int)constants$361.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int version;
     * }
     */
    public static void version$set(MemorySegment seg, int x) {
        constants$361.const$3.set(seg, x);
    }
    public static int version$get(MemorySegment seg, long index) {
        return (int)constants$361.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void version$set(MemorySegment seg, long index, int x) {
        constants$361.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle value$VH() {
        return constants$361.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * H5FD_class_value_t value;
     * }
     */
    public static int value$get(MemorySegment seg) {
        return (int)constants$361.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * H5FD_class_value_t value;
     * }
     */
    public static void value$set(MemorySegment seg, int x) {
        constants$361.const$4.set(seg, x);
    }
    public static int value$get(MemorySegment seg, long index) {
        return (int)constants$361.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void value$set(MemorySegment seg, long index, int x) {
        constants$361.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle name$VH() {
        return constants$361.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* name;
     * }
     */
    public static MemorySegment name$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$361.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* name;
     * }
     */
    public static void name$set(MemorySegment seg, MemorySegment x) {
        constants$361.const$5.set(seg, x);
    }
    public static MemorySegment name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$361.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void name$set(MemorySegment seg, long index, MemorySegment x) {
        constants$361.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maxaddr$VH() {
        return constants$362.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * haddr_t maxaddr;
     * }
     */
    public static long maxaddr$get(MemorySegment seg) {
        return (long)constants$362.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * haddr_t maxaddr;
     * }
     */
    public static void maxaddr$set(MemorySegment seg, long x) {
        constants$362.const$0.set(seg, x);
    }
    public static long maxaddr$get(MemorySegment seg, long index) {
        return (long)constants$362.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void maxaddr$set(MemorySegment seg, long index, long x) {
        constants$362.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle fc_degree$VH() {
        return constants$362.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * H5F_close_degree_t fc_degree;
     * }
     */
    public static int fc_degree$get(MemorySegment seg) {
        return (int)constants$362.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * H5F_close_degree_t fc_degree;
     * }
     */
    public static void fc_degree$set(MemorySegment seg, int x) {
        constants$362.const$1.set(seg, x);
    }
    public static int fc_degree$get(MemorySegment seg, long index) {
        return (int)constants$362.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void fc_degree$set(MemorySegment seg, long index, int x) {
        constants$362.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * herr_t (*terminate)();
     * }
     */
    public interface terminate {

        int apply();
        static MemorySegment allocate(terminate fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$362.const$2, fi, constants$13.const$2, scope);
        }
        static terminate ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    return (int)constants$290.const$0.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle terminate$VH() {
        return constants$362.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * herr_t (*terminate)();
     * }
     */
    public static MemorySegment terminate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$362.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * herr_t (*terminate)();
     * }
     */
    public static void terminate$set(MemorySegment seg, MemorySegment x) {
        constants$362.const$3.set(seg, x);
    }
    public static MemorySegment terminate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$362.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void terminate$set(MemorySegment seg, long index, MemorySegment x) {
        constants$362.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static terminate terminate(MemorySegment segment, Arena scope) {
        return terminate.ofAddress(terminate$get(segment), scope);
    }
    /**
     * {@snippet :
 * hsize_t (*sb_size)(H5FD_t*);
     * }
     */
    public interface sb_size {

        long apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(sb_size fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$362.const$4, fi, constants$61.const$0, scope);
        }
        static sb_size ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (long)constants$362.const$5.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle sb_size$VH() {
        return constants$363.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * hsize_t (*sb_size)(H5FD_t*);
     * }
     */
    public static MemorySegment sb_size$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$363.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * hsize_t (*sb_size)(H5FD_t*);
     * }
     */
    public static void sb_size$set(MemorySegment seg, MemorySegment x) {
        constants$363.const$0.set(seg, x);
    }
    public static MemorySegment sb_size$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$363.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void sb_size$set(MemorySegment seg, long index, MemorySegment x) {
        constants$363.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static sb_size sb_size(MemorySegment segment, Arena scope) {
        return sb_size.ofAddress(sb_size$get(segment), scope);
    }
    /**
     * {@snippet :
 * herr_t (*sb_encode)(H5FD_t*,char*,unsigned char*);
     * }
     */
    public interface sb_encode {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(sb_encode fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$363.const$1, fi, constants$15.const$0, scope);
        }
        static sb_encode ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$89.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle sb_encode$VH() {
        return constants$363.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * herr_t (*sb_encode)(H5FD_t*,char*,unsigned char*);
     * }
     */
    public static MemorySegment sb_encode$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$363.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * herr_t (*sb_encode)(H5FD_t*,char*,unsigned char*);
     * }
     */
    public static void sb_encode$set(MemorySegment seg, MemorySegment x) {
        constants$363.const$2.set(seg, x);
    }
    public static MemorySegment sb_encode$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$363.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void sb_encode$set(MemorySegment seg, long index, MemorySegment x) {
        constants$363.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static sb_encode sb_encode(MemorySegment segment, Arena scope) {
        return sb_encode.ofAddress(sb_encode$get(segment), scope);
    }
    /**
     * {@snippet :
 * herr_t (*sb_decode)(H5FD_t*,char*,unsigned char*);
     * }
     */
    public interface sb_decode {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(sb_decode fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$363.const$3, fi, constants$15.const$0, scope);
        }
        static sb_decode ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$89.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle sb_decode$VH() {
        return constants$363.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * herr_t (*sb_decode)(H5FD_t*,char*,unsigned char*);
     * }
     */
    public static MemorySegment sb_decode$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$363.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * herr_t (*sb_decode)(H5FD_t*,char*,unsigned char*);
     * }
     */
    public static void sb_decode$set(MemorySegment seg, MemorySegment x) {
        constants$363.const$4.set(seg, x);
    }
    public static MemorySegment sb_decode$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$363.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void sb_decode$set(MemorySegment seg, long index, MemorySegment x) {
        constants$363.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static sb_decode sb_decode(MemorySegment segment, Arena scope) {
        return sb_decode.ofAddress(sb_decode$get(segment), scope);
    }
    public static VarHandle fapl_size$VH() {
        return constants$363.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t fapl_size;
     * }
     */
    public static long fapl_size$get(MemorySegment seg) {
        return (long)constants$363.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t fapl_size;
     * }
     */
    public static void fapl_size$set(MemorySegment seg, long x) {
        constants$363.const$5.set(seg, x);
    }
    public static long fapl_size$get(MemorySegment seg, long index) {
        return (long)constants$363.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void fapl_size$set(MemorySegment seg, long index, long x) {
        constants$363.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * void* (*fapl_get)(H5FD_t*);
     * }
     */
    public interface fapl_get {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(fapl_get fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$364.const$0, fi, constants$110.const$3, scope);
        }
        static fapl_get ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$188.const$1.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle fapl_get$VH() {
        return constants$364.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* (*fapl_get)(H5FD_t*);
     * }
     */
    public static MemorySegment fapl_get$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$364.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* (*fapl_get)(H5FD_t*);
     * }
     */
    public static void fapl_get$set(MemorySegment seg, MemorySegment x) {
        constants$364.const$1.set(seg, x);
    }
    public static MemorySegment fapl_get$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$364.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void fapl_get$set(MemorySegment seg, long index, MemorySegment x) {
        constants$364.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static fapl_get fapl_get(MemorySegment segment, Arena scope) {
        return fapl_get.ofAddress(fapl_get$get(segment), scope);
    }
    /**
     * {@snippet :
 * void* (*fapl_copy)(void*);
     * }
     */
    public interface fapl_copy {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(fapl_copy fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$364.const$2, fi, constants$110.const$3, scope);
        }
        static fapl_copy ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$188.const$1.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle fapl_copy$VH() {
        return constants$364.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* (*fapl_copy)(void*);
     * }
     */
    public static MemorySegment fapl_copy$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$364.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* (*fapl_copy)(void*);
     * }
     */
    public static void fapl_copy$set(MemorySegment seg, MemorySegment x) {
        constants$364.const$3.set(seg, x);
    }
    public static MemorySegment fapl_copy$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$364.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void fapl_copy$set(MemorySegment seg, long index, MemorySegment x) {
        constants$364.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static fapl_copy fapl_copy(MemorySegment segment, Arena scope) {
        return fapl_copy.ofAddress(fapl_copy$get(segment), scope);
    }
    /**
     * {@snippet :
 * herr_t (*fapl_free)(void*);
     * }
     */
    public interface fapl_free {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(fapl_free fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$364.const$4, fi, constants$15.const$4, scope);
        }
        static fapl_free ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$27.const$4.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle fapl_free$VH() {
        return constants$364.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * herr_t (*fapl_free)(void*);
     * }
     */
    public static MemorySegment fapl_free$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$364.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * herr_t (*fapl_free)(void*);
     * }
     */
    public static void fapl_free$set(MemorySegment seg, MemorySegment x) {
        constants$364.const$5.set(seg, x);
    }
    public static MemorySegment fapl_free$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$364.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void fapl_free$set(MemorySegment seg, long index, MemorySegment x) {
        constants$364.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static fapl_free fapl_free(MemorySegment segment, Arena scope) {
        return fapl_free.ofAddress(fapl_free$get(segment), scope);
    }
    public static VarHandle dxpl_size$VH() {
        return constants$365.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t dxpl_size;
     * }
     */
    public static long dxpl_size$get(MemorySegment seg) {
        return (long)constants$365.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t dxpl_size;
     * }
     */
    public static void dxpl_size$set(MemorySegment seg, long x) {
        constants$365.const$0.set(seg, x);
    }
    public static long dxpl_size$get(MemorySegment seg, long index) {
        return (long)constants$365.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void dxpl_size$set(MemorySegment seg, long index, long x) {
        constants$365.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * void* (*dxpl_copy)(void*);
     * }
     */
    public interface dxpl_copy {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(dxpl_copy fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$365.const$1, fi, constants$110.const$3, scope);
        }
        static dxpl_copy ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$188.const$1.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle dxpl_copy$VH() {
        return constants$365.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* (*dxpl_copy)(void*);
     * }
     */
    public static MemorySegment dxpl_copy$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$365.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* (*dxpl_copy)(void*);
     * }
     */
    public static void dxpl_copy$set(MemorySegment seg, MemorySegment x) {
        constants$365.const$2.set(seg, x);
    }
    public static MemorySegment dxpl_copy$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$365.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void dxpl_copy$set(MemorySegment seg, long index, MemorySegment x) {
        constants$365.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static dxpl_copy dxpl_copy(MemorySegment segment, Arena scope) {
        return dxpl_copy.ofAddress(dxpl_copy$get(segment), scope);
    }
    /**
     * {@snippet :
 * herr_t (*dxpl_free)(void*);
     * }
     */
    public interface dxpl_free {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(dxpl_free fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$365.const$3, fi, constants$15.const$4, scope);
        }
        static dxpl_free ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$27.const$4.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle dxpl_free$VH() {
        return constants$365.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * herr_t (*dxpl_free)(void*);
     * }
     */
    public static MemorySegment dxpl_free$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$365.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * herr_t (*dxpl_free)(void*);
     * }
     */
    public static void dxpl_free$set(MemorySegment seg, MemorySegment x) {
        constants$365.const$4.set(seg, x);
    }
    public static MemorySegment dxpl_free$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$365.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void dxpl_free$set(MemorySegment seg, long index, MemorySegment x) {
        constants$365.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static dxpl_free dxpl_free(MemorySegment segment, Arena scope) {
        return dxpl_free.ofAddress(dxpl_free$get(segment), scope);
    }
    /**
     * {@snippet :
 * H5FD_t* (*open)(char*,unsigned int,hid_t,haddr_t);
     * }
     */
    public interface open {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, int _x1, long _x2, long _x3);
        static MemorySegment allocate(open fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$366.const$0, fi, constants$365.const$5, scope);
        }
        static open ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, long __x2, long __x3) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$366.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle open$VH() {
        return constants$366.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * H5FD_t* (*open)(char*,unsigned int,hid_t,haddr_t);
     * }
     */
    public static MemorySegment open$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$366.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * H5FD_t* (*open)(char*,unsigned int,hid_t,haddr_t);
     * }
     */
    public static void open$set(MemorySegment seg, MemorySegment x) {
        constants$366.const$2.set(seg, x);
    }
    public static MemorySegment open$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$366.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void open$set(MemorySegment seg, long index, MemorySegment x) {
        constants$366.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static open open(MemorySegment segment, Arena scope) {
        return open.ofAddress(open$get(segment), scope);
    }
    /**
     * {@snippet :
 * herr_t (*close)(H5FD_t*);
     * }
     */
    public interface close {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(close fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$366.const$3, fi, constants$15.const$4, scope);
        }
        static close ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$27.const$4.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle close$VH() {
        return constants$366.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * herr_t (*close)(H5FD_t*);
     * }
     */
    public static MemorySegment close$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$366.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * herr_t (*close)(H5FD_t*);
     * }
     */
    public static void close$set(MemorySegment seg, MemorySegment x) {
        constants$366.const$4.set(seg, x);
    }
    public static MemorySegment close$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$366.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void close$set(MemorySegment seg, long index, MemorySegment x) {
        constants$366.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static close close(MemorySegment segment, Arena scope) {
        return close.ofAddress(close$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*cmp)(const H5FD_t*,const H5FD_t*);
     * }
     */
    public interface cmp {

        int apply(java.lang.foreign.MemorySegment future_object, java.lang.foreign.MemorySegment actual_object_id);
        static MemorySegment allocate(cmp fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$366.const$5, fi, constants$13.const$4, scope);
        }
        static cmp ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _future_object, java.lang.foreign.MemorySegment _actual_object_id) -> {
                try {
                    return (int)constants$17.const$1.invokeExact(symbol, _future_object, _actual_object_id);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle cmp$VH() {
        return constants$367.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*cmp)(const H5FD_t*,const H5FD_t*);
     * }
     */
    public static MemorySegment cmp$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$367.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*cmp)(const H5FD_t*,const H5FD_t*);
     * }
     */
    public static void cmp$set(MemorySegment seg, MemorySegment x) {
        constants$367.const$0.set(seg, x);
    }
    public static MemorySegment cmp$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$367.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void cmp$set(MemorySegment seg, long index, MemorySegment x) {
        constants$367.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static cmp cmp(MemorySegment segment, Arena scope) {
        return cmp.ofAddress(cmp$get(segment), scope);
    }
    /**
     * {@snippet :
 * herr_t (*query)(const H5FD_t*,unsigned long*);
     * }
     */
    public interface query {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(query fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$367.const$1, fi, constants$13.const$4, scope);
        }
        static query ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$17.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle query$VH() {
        return constants$367.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * herr_t (*query)(const H5FD_t*,unsigned long*);
     * }
     */
    public static MemorySegment query$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$367.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * herr_t (*query)(const H5FD_t*,unsigned long*);
     * }
     */
    public static void query$set(MemorySegment seg, MemorySegment x) {
        constants$367.const$2.set(seg, x);
    }
    public static MemorySegment query$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$367.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void query$set(MemorySegment seg, long index, MemorySegment x) {
        constants$367.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static query query(MemorySegment segment, Arena scope) {
        return query.ofAddress(query$get(segment), scope);
    }
    /**
     * {@snippet :
 * herr_t (*get_type_map)(const H5FD_t*,H5FD_mem_t*);
     * }
     */
    public interface get_type_map {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_type_map fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$367.const$3, fi, constants$13.const$4, scope);
        }
        static get_type_map ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$17.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_type_map$VH() {
        return constants$367.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * herr_t (*get_type_map)(const H5FD_t*,H5FD_mem_t*);
     * }
     */
    public static MemorySegment get_type_map$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$367.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * herr_t (*get_type_map)(const H5FD_t*,H5FD_mem_t*);
     * }
     */
    public static void get_type_map$set(MemorySegment seg, MemorySegment x) {
        constants$367.const$4.set(seg, x);
    }
    public static MemorySegment get_type_map$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$367.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void get_type_map$set(MemorySegment seg, long index, MemorySegment x) {
        constants$367.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_type_map get_type_map(MemorySegment segment, Arena scope) {
        return get_type_map.ofAddress(get_type_map$get(segment), scope);
    }
    /**
     * {@snippet :
 * haddr_t (*alloc)(H5FD_t*,H5FD_mem_t,hid_t,hsize_t);
     * }
     */
    public interface alloc {

        long apply(java.lang.foreign.MemorySegment _x0, int _x1, long _x2, long _x3);
        static MemorySegment allocate(alloc fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$367.const$5, fi, constants$175.const$2, scope);
        }
        static alloc ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, long __x2, long __x3) -> {
                try {
                    return (long)constants$368.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle alloc$VH() {
        return constants$368.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * haddr_t (*alloc)(H5FD_t*,H5FD_mem_t,hid_t,hsize_t);
     * }
     */
    public static MemorySegment alloc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$368.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * haddr_t (*alloc)(H5FD_t*,H5FD_mem_t,hid_t,hsize_t);
     * }
     */
    public static void alloc$set(MemorySegment seg, MemorySegment x) {
        constants$368.const$1.set(seg, x);
    }
    public static MemorySegment alloc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$368.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void alloc$set(MemorySegment seg, long index, MemorySegment x) {
        constants$368.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static alloc alloc(MemorySegment segment, Arena scope) {
        return alloc.ofAddress(alloc$get(segment), scope);
    }
    /**
     * {@snippet :
 * herr_t (*free)(H5FD_t*,H5FD_mem_t,hid_t,haddr_t,hsize_t);
     * }
     */
    public interface free {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, long _x2, long _x3, long _x4);
        static MemorySegment allocate(free fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$368.const$3, fi, constants$368.const$2, scope);
        }
        static free ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, long __x2, long __x3, long __x4) -> {
                try {
                    return (int)constants$368.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle free$VH() {
        return constants$368.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * herr_t (*free)(H5FD_t*,H5FD_mem_t,hid_t,haddr_t,hsize_t);
     * }
     */
    public static MemorySegment free$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$368.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * herr_t (*free)(H5FD_t*,H5FD_mem_t,hid_t,haddr_t,hsize_t);
     * }
     */
    public static void free$set(MemorySegment seg, MemorySegment x) {
        constants$368.const$5.set(seg, x);
    }
    public static MemorySegment free$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$368.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void free$set(MemorySegment seg, long index, MemorySegment x) {
        constants$368.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static free free(MemorySegment segment, Arena scope) {
        return free.ofAddress(free$get(segment), scope);
    }
    /**
     * {@snippet :
 * haddr_t (*get_eoa)(const H5FD_t*,H5FD_mem_t);
     * }
     */
    public interface get_eoa {

        long apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(get_eoa fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$369.const$1, fi, constants$369.const$0, scope);
        }
        static get_eoa ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (long)constants$369.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_eoa$VH() {
        return constants$369.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * haddr_t (*get_eoa)(const H5FD_t*,H5FD_mem_t);
     * }
     */
    public static MemorySegment get_eoa$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$369.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * haddr_t (*get_eoa)(const H5FD_t*,H5FD_mem_t);
     * }
     */
    public static void get_eoa$set(MemorySegment seg, MemorySegment x) {
        constants$369.const$3.set(seg, x);
    }
    public static MemorySegment get_eoa$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$369.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_eoa$set(MemorySegment seg, long index, MemorySegment x) {
        constants$369.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_eoa get_eoa(MemorySegment segment, Arena scope) {
        return get_eoa.ofAddress(get_eoa$get(segment), scope);
    }
    /**
     * {@snippet :
 * herr_t (*set_eoa)(H5FD_t*,H5FD_mem_t,haddr_t);
     * }
     */
    public interface set_eoa {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, long _x2);
        static MemorySegment allocate(set_eoa fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$369.const$5, fi, constants$369.const$4, scope);
        }
        static set_eoa ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, long __x2) -> {
                try {
                    return (int)constants$370.const$0.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle set_eoa$VH() {
        return constants$370.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * herr_t (*set_eoa)(H5FD_t*,H5FD_mem_t,haddr_t);
     * }
     */
    public static MemorySegment set_eoa$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$370.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * herr_t (*set_eoa)(H5FD_t*,H5FD_mem_t,haddr_t);
     * }
     */
    public static void set_eoa$set(MemorySegment seg, MemorySegment x) {
        constants$370.const$1.set(seg, x);
    }
    public static MemorySegment set_eoa$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$370.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void set_eoa$set(MemorySegment seg, long index, MemorySegment x) {
        constants$370.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_eoa set_eoa(MemorySegment segment, Arena scope) {
        return set_eoa.ofAddress(set_eoa$get(segment), scope);
    }
    /**
     * {@snippet :
 * haddr_t (*get_eof)(const H5FD_t*,H5FD_mem_t);
     * }
     */
    public interface get_eof {

        long apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(get_eof fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$370.const$2, fi, constants$369.const$0, scope);
        }
        static get_eof ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (long)constants$369.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_eof$VH() {
        return constants$370.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * haddr_t (*get_eof)(const H5FD_t*,H5FD_mem_t);
     * }
     */
    public static MemorySegment get_eof$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$370.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * haddr_t (*get_eof)(const H5FD_t*,H5FD_mem_t);
     * }
     */
    public static void get_eof$set(MemorySegment seg, MemorySegment x) {
        constants$370.const$3.set(seg, x);
    }
    public static MemorySegment get_eof$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$370.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_eof$set(MemorySegment seg, long index, MemorySegment x) {
        constants$370.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_eof get_eof(MemorySegment segment, Arena scope) {
        return get_eof.ofAddress(get_eof$get(segment), scope);
    }
    /**
     * {@snippet :
 * herr_t (*get_handle)(H5FD_t*,hid_t,void**);
     * }
     */
    public interface get_handle {

        int apply(java.lang.foreign.MemorySegment _x0, long _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(get_handle fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$370.const$4, fi, constants$17.const$2, scope);
        }
        static get_handle ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, long __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$17.const$4.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_handle$VH() {
        return constants$370.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * herr_t (*get_handle)(H5FD_t*,hid_t,void**);
     * }
     */
    public static MemorySegment get_handle$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$370.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * herr_t (*get_handle)(H5FD_t*,hid_t,void**);
     * }
     */
    public static void get_handle$set(MemorySegment seg, MemorySegment x) {
        constants$370.const$5.set(seg, x);
    }
    public static MemorySegment get_handle$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$370.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_handle$set(MemorySegment seg, long index, MemorySegment x) {
        constants$370.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_handle get_handle(MemorySegment segment, Arena scope) {
        return get_handle.ofAddress(get_handle$get(segment), scope);
    }
    /**
     * {@snippet :
 * herr_t (*read)(H5FD_t*,H5FD_mem_t,hid_t,haddr_t,size_t,void*);
     * }
     */
    public interface read {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, long _x2, long _x3, long _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(read fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$371.const$1, fi, constants$371.const$0, scope);
        }
        static read ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, long __x2, long __x3, long __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (int)constants$371.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle read$VH() {
        return constants$371.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * herr_t (*read)(H5FD_t*,H5FD_mem_t,hid_t,haddr_t,size_t,void*);
     * }
     */
    public static MemorySegment read$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$371.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * herr_t (*read)(H5FD_t*,H5FD_mem_t,hid_t,haddr_t,size_t,void*);
     * }
     */
    public static void read$set(MemorySegment seg, MemorySegment x) {
        constants$371.const$3.set(seg, x);
    }
    public static MemorySegment read$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$371.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void read$set(MemorySegment seg, long index, MemorySegment x) {
        constants$371.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static read read(MemorySegment segment, Arena scope) {
        return read.ofAddress(read$get(segment), scope);
    }
    /**
     * {@snippet :
 * herr_t (*write)(H5FD_t*,H5FD_mem_t,hid_t,haddr_t,size_t,void*);
     * }
     */
    public interface write {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, long _x2, long _x3, long _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(write fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$371.const$4, fi, constants$371.const$0, scope);
        }
        static write ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, long __x2, long __x3, long __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (int)constants$371.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle write$VH() {
        return constants$371.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * herr_t (*write)(H5FD_t*,H5FD_mem_t,hid_t,haddr_t,size_t,void*);
     * }
     */
    public static MemorySegment write$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$371.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * herr_t (*write)(H5FD_t*,H5FD_mem_t,hid_t,haddr_t,size_t,void*);
     * }
     */
    public static void write$set(MemorySegment seg, MemorySegment x) {
        constants$371.const$5.set(seg, x);
    }
    public static MemorySegment write$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$371.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void write$set(MemorySegment seg, long index, MemorySegment x) {
        constants$371.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static write write(MemorySegment segment, Arena scope) {
        return write.ofAddress(write$get(segment), scope);
    }
    /**
     * {@snippet :
 * herr_t (*read_vector)(H5FD_t*,hid_t,uint32_t,H5FD_mem_t*,haddr_t*,size_t*,void**);
     * }
     */
    public interface read_vector {

        int apply(java.lang.foreign.MemorySegment _x0, long _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6);
        static MemorySegment allocate(read_vector fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$372.const$1, fi, constants$372.const$0, scope);
        }
        static read_vector ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, long __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6) -> {
                try {
                    return (int)constants$372.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle read_vector$VH() {
        return constants$372.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * herr_t (*read_vector)(H5FD_t*,hid_t,uint32_t,H5FD_mem_t*,haddr_t*,size_t*,void**);
     * }
     */
    public static MemorySegment read_vector$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$372.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * herr_t (*read_vector)(H5FD_t*,hid_t,uint32_t,H5FD_mem_t*,haddr_t*,size_t*,void**);
     * }
     */
    public static void read_vector$set(MemorySegment seg, MemorySegment x) {
        constants$372.const$3.set(seg, x);
    }
    public static MemorySegment read_vector$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$372.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void read_vector$set(MemorySegment seg, long index, MemorySegment x) {
        constants$372.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static read_vector read_vector(MemorySegment segment, Arena scope) {
        return read_vector.ofAddress(read_vector$get(segment), scope);
    }
    /**
     * {@snippet :
 * herr_t (*write_vector)(H5FD_t*,hid_t,uint32_t,H5FD_mem_t*,haddr_t*,size_t*,void**);
     * }
     */
    public interface write_vector {

        int apply(java.lang.foreign.MemorySegment _x0, long _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6);
        static MemorySegment allocate(write_vector fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$372.const$4, fi, constants$372.const$0, scope);
        }
        static write_vector ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, long __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6) -> {
                try {
                    return (int)constants$372.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle write_vector$VH() {
        return constants$372.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * herr_t (*write_vector)(H5FD_t*,hid_t,uint32_t,H5FD_mem_t*,haddr_t*,size_t*,void**);
     * }
     */
    public static MemorySegment write_vector$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$372.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * herr_t (*write_vector)(H5FD_t*,hid_t,uint32_t,H5FD_mem_t*,haddr_t*,size_t*,void**);
     * }
     */
    public static void write_vector$set(MemorySegment seg, MemorySegment x) {
        constants$372.const$5.set(seg, x);
    }
    public static MemorySegment write_vector$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$372.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void write_vector$set(MemorySegment seg, long index, MemorySegment x) {
        constants$372.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static write_vector write_vector(MemorySegment segment, Arena scope) {
        return write_vector.ofAddress(write_vector$get(segment), scope);
    }
    /**
     * {@snippet :
 * herr_t (*read_selection)(H5FD_t*,H5FD_mem_t,hid_t,size_t,hid_t*,hid_t*,haddr_t*,size_t*,void**);
     * }
     */
    public interface read_selection {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, long _x2, long _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6, java.lang.foreign.MemorySegment _x7, java.lang.foreign.MemorySegment _x8);
        static MemorySegment allocate(read_selection fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$373.const$1, fi, constants$373.const$0, scope);
        }
        static read_selection ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, long __x2, long __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6, java.lang.foreign.MemorySegment __x7, java.lang.foreign.MemorySegment __x8) -> {
                try {
                    return (int)constants$373.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7, __x8);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle read_selection$VH() {
        return constants$373.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * herr_t (*read_selection)(H5FD_t*,H5FD_mem_t,hid_t,size_t,hid_t*,hid_t*,haddr_t*,size_t*,void**);
     * }
     */
    public static MemorySegment read_selection$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$373.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * herr_t (*read_selection)(H5FD_t*,H5FD_mem_t,hid_t,size_t,hid_t*,hid_t*,haddr_t*,size_t*,void**);
     * }
     */
    public static void read_selection$set(MemorySegment seg, MemorySegment x) {
        constants$373.const$3.set(seg, x);
    }
    public static MemorySegment read_selection$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$373.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void read_selection$set(MemorySegment seg, long index, MemorySegment x) {
        constants$373.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static read_selection read_selection(MemorySegment segment, Arena scope) {
        return read_selection.ofAddress(read_selection$get(segment), scope);
    }
    /**
     * {@snippet :
 * herr_t (*write_selection)(H5FD_t*,H5FD_mem_t,hid_t,size_t,hid_t*,hid_t*,haddr_t*,size_t*,void**);
     * }
     */
    public interface write_selection {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, long _x2, long _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6, java.lang.foreign.MemorySegment _x7, java.lang.foreign.MemorySegment _x8);
        static MemorySegment allocate(write_selection fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$373.const$4, fi, constants$373.const$0, scope);
        }
        static write_selection ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, long __x2, long __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6, java.lang.foreign.MemorySegment __x7, java.lang.foreign.MemorySegment __x8) -> {
                try {
                    return (int)constants$373.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7, __x8);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle write_selection$VH() {
        return constants$373.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * herr_t (*write_selection)(H5FD_t*,H5FD_mem_t,hid_t,size_t,hid_t*,hid_t*,haddr_t*,size_t*,void**);
     * }
     */
    public static MemorySegment write_selection$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$373.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * herr_t (*write_selection)(H5FD_t*,H5FD_mem_t,hid_t,size_t,hid_t*,hid_t*,haddr_t*,size_t*,void**);
     * }
     */
    public static void write_selection$set(MemorySegment seg, MemorySegment x) {
        constants$373.const$5.set(seg, x);
    }
    public static MemorySegment write_selection$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$373.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void write_selection$set(MemorySegment seg, long index, MemorySegment x) {
        constants$373.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static write_selection write_selection(MemorySegment segment, Arena scope) {
        return write_selection.ofAddress(write_selection$get(segment), scope);
    }
    /**
     * {@snippet :
 * herr_t (*flush)(H5FD_t*,hid_t,hbool_t);
     * }
     */
    public interface flush {

        int apply(java.lang.foreign.MemorySegment _x0, long _x1, boolean _x2);
        static MemorySegment allocate(flush fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$374.const$1, fi, constants$374.const$0, scope);
        }
        static flush ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, long __x1, boolean __x2) -> {
                try {
                    return (int)constants$374.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle flush$VH() {
        return constants$374.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * herr_t (*flush)(H5FD_t*,hid_t,hbool_t);
     * }
     */
    public static MemorySegment flush$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$374.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * herr_t (*flush)(H5FD_t*,hid_t,hbool_t);
     * }
     */
    public static void flush$set(MemorySegment seg, MemorySegment x) {
        constants$374.const$3.set(seg, x);
    }
    public static MemorySegment flush$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$374.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void flush$set(MemorySegment seg, long index, MemorySegment x) {
        constants$374.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static flush flush(MemorySegment segment, Arena scope) {
        return flush.ofAddress(flush$get(segment), scope);
    }
    /**
     * {@snippet :
 * herr_t (*truncate)(H5FD_t*,hid_t,hbool_t);
     * }
     */
    public interface truncate {

        int apply(java.lang.foreign.MemorySegment _x0, long _x1, boolean _x2);
        static MemorySegment allocate(truncate fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$374.const$4, fi, constants$374.const$0, scope);
        }
        static truncate ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, long __x1, boolean __x2) -> {
                try {
                    return (int)constants$374.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle truncate$VH() {
        return constants$374.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * herr_t (*truncate)(H5FD_t*,hid_t,hbool_t);
     * }
     */
    public static MemorySegment truncate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$374.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * herr_t (*truncate)(H5FD_t*,hid_t,hbool_t);
     * }
     */
    public static void truncate$set(MemorySegment seg, MemorySegment x) {
        constants$374.const$5.set(seg, x);
    }
    public static MemorySegment truncate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$374.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void truncate$set(MemorySegment seg, long index, MemorySegment x) {
        constants$374.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static truncate truncate(MemorySegment segment, Arena scope) {
        return truncate.ofAddress(truncate$get(segment), scope);
    }
    /**
     * {@snippet :
 * herr_t (*lock)(H5FD_t*,hbool_t);
     * }
     */
    public interface lock {

        int apply(java.lang.foreign.MemorySegment _x0, boolean _x1);
        static MemorySegment allocate(lock fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$375.const$1, fi, constants$375.const$0, scope);
        }
        static lock ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, boolean __x1) -> {
                try {
                    return (int)constants$375.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle lock$VH() {
        return constants$375.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * herr_t (*lock)(H5FD_t*,hbool_t);
     * }
     */
    public static MemorySegment lock$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$375.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * herr_t (*lock)(H5FD_t*,hbool_t);
     * }
     */
    public static void lock$set(MemorySegment seg, MemorySegment x) {
        constants$375.const$3.set(seg, x);
    }
    public static MemorySegment lock$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$375.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void lock$set(MemorySegment seg, long index, MemorySegment x) {
        constants$375.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static lock lock(MemorySegment segment, Arena scope) {
        return lock.ofAddress(lock$get(segment), scope);
    }
    /**
     * {@snippet :
 * herr_t (*unlock)(H5FD_t*);
     * }
     */
    public interface unlock {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(unlock fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$375.const$4, fi, constants$15.const$4, scope);
        }
        static unlock ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$27.const$4.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle unlock$VH() {
        return constants$375.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * herr_t (*unlock)(H5FD_t*);
     * }
     */
    public static MemorySegment unlock$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$375.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * herr_t (*unlock)(H5FD_t*);
     * }
     */
    public static void unlock$set(MemorySegment seg, MemorySegment x) {
        constants$375.const$5.set(seg, x);
    }
    public static MemorySegment unlock$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$375.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void unlock$set(MemorySegment seg, long index, MemorySegment x) {
        constants$375.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static unlock unlock(MemorySegment segment, Arena scope) {
        return unlock.ofAddress(unlock$get(segment), scope);
    }
    /**
     * {@snippet :
 * herr_t (*del)(char*,hid_t);
     * }
     */
    public interface del {

        int apply(java.lang.foreign.MemorySegment _x0, long _x1);
        static MemorySegment allocate(del fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$376.const$0, fi, constants$175.const$0, scope);
        }
        static del ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, long __x1) -> {
                try {
                    return (int)constants$376.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle del$VH() {
        return constants$376.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * herr_t (*del)(char*,hid_t);
     * }
     */
    public static MemorySegment del$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$376.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * herr_t (*del)(char*,hid_t);
     * }
     */
    public static void del$set(MemorySegment seg, MemorySegment x) {
        constants$376.const$2.set(seg, x);
    }
    public static MemorySegment del$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$376.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void del$set(MemorySegment seg, long index, MemorySegment x) {
        constants$376.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static del del(MemorySegment segment, Arena scope) {
        return del.ofAddress(del$get(segment), scope);
    }
    /**
     * {@snippet :
 * herr_t (*ctl)(H5FD_t*,uint64_t,uint64_t,void*,void**);
     * }
     */
    public interface ctl {

        int apply(java.lang.foreign.MemorySegment _x0, long _x1, long _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(ctl fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$376.const$3, fi, constants$96.const$4, scope);
        }
        static ctl ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, long __x1, long __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)constants$376.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ctl$VH() {
        return constants$376.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * herr_t (*ctl)(H5FD_t*,uint64_t,uint64_t,void*,void**);
     * }
     */
    public static MemorySegment ctl$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$376.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * herr_t (*ctl)(H5FD_t*,uint64_t,uint64_t,void*,void**);
     * }
     */
    public static void ctl$set(MemorySegment seg, MemorySegment x) {
        constants$376.const$5.set(seg, x);
    }
    public static MemorySegment ctl$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$376.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ctl$set(MemorySegment seg, long index, MemorySegment x) {
        constants$376.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static ctl ctl(MemorySegment segment, Arena scope) {
        return ctl.ofAddress(ctl$get(segment), scope);
    }
    public static MemorySegment fl_map$slice(MemorySegment seg) {
        return seg.asSlice(304, 28);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


