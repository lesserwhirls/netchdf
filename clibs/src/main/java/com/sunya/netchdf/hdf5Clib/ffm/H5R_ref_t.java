// Generated by jextract

package com.sunya.netchdf.hdf5Clib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct {
 *     union  u;
 * };
 * }
 */
public class H5R_ref_t {

    public static MemoryLayout $LAYOUT() {
        return constants$210.const$5;
    }
    /**
     * {@snippet :
     * union {
     *     uint8_t __data[64];
     *     int64_t align;
     * };
     * }
     */
    public static final class u {

        // Suppresses default constructor, ensuring non-instantiability.
        private u() {}
        public static MemoryLayout $LAYOUT() {
            return constants$211.const$0;
        }
        public static MemorySegment __data$slice(MemorySegment seg) {
            return seg.asSlice(0, 64);
        }
        public static VarHandle align$VH() {
            return constants$211.const$1;
        }
        /**
         * Getter for field:
         * {@snippet :
         * int64_t align;
         * }
         */
        public static long align$get(MemorySegment seg) {
            return (long)constants$211.const$1.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * int64_t align;
         * }
         */
        public static void align$set(MemorySegment seg, long x) {
            constants$211.const$1.set(seg, x);
        }
        public static long align$get(MemorySegment seg, long index) {
            return (long)constants$211.const$1.get(seg.asSlice(index*sizeof()));
        }
        public static void align$set(MemorySegment seg, long index, long x) {
            constants$211.const$1.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment u$slice(MemorySegment seg) {
        return seg.asSlice(0, 64);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


