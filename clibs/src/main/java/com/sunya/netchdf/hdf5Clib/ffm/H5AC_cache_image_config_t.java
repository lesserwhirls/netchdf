// Generated by jextract

package com.sunya.netchdf.hdf5Clib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct H5AC_cache_image_config_t {
 *     int version;
 *     hbool_t generate_image;
 *     hbool_t save_resize_status;
 *     int entry_ageout;
 * };
 * }
 */
public class H5AC_cache_image_config_t {

    public static MemoryLayout $LAYOUT() {
        return constants$87.const$4;
    }
    public static VarHandle version$VH() {
        return constants$87.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int version;
     * }
     */
    public static int version$get(MemorySegment seg) {
        return (int)constants$87.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int version;
     * }
     */
    public static void version$set(MemorySegment seg, int x) {
        constants$87.const$5.set(seg, x);
    }
    public static int version$get(MemorySegment seg, long index) {
        return (int)constants$87.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void version$set(MemorySegment seg, long index, int x) {
        constants$87.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle generate_image$VH() {
        return constants$88.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * hbool_t generate_image;
     * }
     */
    public static boolean generate_image$get(MemorySegment seg) {
        return (boolean)constants$88.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * hbool_t generate_image;
     * }
     */
    public static void generate_image$set(MemorySegment seg, boolean x) {
        constants$88.const$0.set(seg, x);
    }
    public static boolean generate_image$get(MemorySegment seg, long index) {
        return (boolean)constants$88.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void generate_image$set(MemorySegment seg, long index, boolean x) {
        constants$88.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle save_resize_status$VH() {
        return constants$88.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * hbool_t save_resize_status;
     * }
     */
    public static boolean save_resize_status$get(MemorySegment seg) {
        return (boolean)constants$88.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * hbool_t save_resize_status;
     * }
     */
    public static void save_resize_status$set(MemorySegment seg, boolean x) {
        constants$88.const$1.set(seg, x);
    }
    public static boolean save_resize_status$get(MemorySegment seg, long index) {
        return (boolean)constants$88.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void save_resize_status$set(MemorySegment seg, long index, boolean x) {
        constants$88.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle entry_ageout$VH() {
        return constants$88.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int entry_ageout;
     * }
     */
    public static int entry_ageout$get(MemorySegment seg) {
        return (int)constants$88.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int entry_ageout;
     * }
     */
    public static void entry_ageout$set(MemorySegment seg, int x) {
        constants$88.const$2.set(seg, x);
    }
    public static int entry_ageout$get(MemorySegment seg, long index) {
        return (int)constants$88.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void entry_ageout$set(MemorySegment seg, long index, int x) {
        constants$88.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


