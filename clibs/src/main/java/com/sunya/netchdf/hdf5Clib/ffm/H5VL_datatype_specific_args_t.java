// Generated by jextract

package com.sunya.netchdf.hdf5Clib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct H5VL_datatype_specific_args_t {
 *     H5VL_datatype_specific_t op_type;
 *     union  args;
 * };
 * }
 */
public class H5VL_datatype_specific_args_t {

    public static MemoryLayout $LAYOUT() {
        return constants$231.const$0;
    }
    public static VarHandle op_type$VH() {
        return constants$231.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * H5VL_datatype_specific_t op_type;
     * }
     */
    public static int op_type$get(MemorySegment seg) {
        return (int)constants$231.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * H5VL_datatype_specific_t op_type;
     * }
     */
    public static void op_type$set(MemorySegment seg, int x) {
        constants$231.const$1.set(seg, x);
    }
    public static int op_type$get(MemorySegment seg, long index) {
        return (int)constants$231.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void op_type$set(MemorySegment seg, long index, int x) {
        constants$231.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * union {
     *     struct  flush;
     *     struct  refresh;
     * };
     * }
     */
    public static final class args {

        // Suppresses default constructor, ensuring non-instantiability.
        private args() {}
        public static MemoryLayout $LAYOUT() {
            return constants$231.const$2;
        }
        /**
         * {@snippet :
         * struct {
         *     hid_t type_id;
         * };
         * }
         */
        public static final class flush {

            // Suppresses default constructor, ensuring non-instantiability.
            private flush() {}
            public static MemoryLayout $LAYOUT() {
                return constants$222.const$1;
            }
            public static VarHandle type_id$VH() {
                return constants$231.const$3;
            }
            /**
             * Getter for field:
             * {@snippet :
             * hid_t type_id;
             * }
             */
            public static long type_id$get(MemorySegment seg) {
                return (long)constants$231.const$3.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * hid_t type_id;
             * }
             */
            public static void type_id$set(MemorySegment seg, long x) {
                constants$231.const$3.set(seg, x);
            }
            public static long type_id$get(MemorySegment seg, long index) {
                return (long)constants$231.const$3.get(seg.asSlice(index*sizeof()));
            }
            public static void type_id$set(MemorySegment seg, long index, long x) {
                constants$231.const$3.set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
        }

        public static MemorySegment flush$slice(MemorySegment seg) {
            return seg.asSlice(0, 8);
        }
        /**
         * {@snippet :
         * struct {
         *     hid_t type_id;
         * };
         * }
         */
        public static final class refresh {

            // Suppresses default constructor, ensuring non-instantiability.
            private refresh() {}
            public static MemoryLayout $LAYOUT() {
                return constants$222.const$1;
            }
            public static VarHandle type_id$VH() {
                return constants$231.const$4;
            }
            /**
             * Getter for field:
             * {@snippet :
             * hid_t type_id;
             * }
             */
            public static long type_id$get(MemorySegment seg) {
                return (long)constants$231.const$4.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * hid_t type_id;
             * }
             */
            public static void type_id$set(MemorySegment seg, long x) {
                constants$231.const$4.set(seg, x);
            }
            public static long type_id$get(MemorySegment seg, long index) {
                return (long)constants$231.const$4.get(seg.asSlice(index*sizeof()));
            }
            public static void type_id$set(MemorySegment seg, long index, long x) {
                constants$231.const$4.set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
        }

        public static MemorySegment refresh$slice(MemorySegment seg) {
            return seg.asSlice(0, 8);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment args$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


