// Generated by jextract

package com.sunya.netchdf.hdf5Clib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * union H5VL_native_dataset_optional_args_t {
 *     struct  get_chunk_idx_type;
 *     H5VL_native_dataset_get_chunk_storage_size_t get_chunk_storage_size;
 *     H5VL_native_dataset_get_num_chunks_t get_num_chunks;
 *     H5VL_native_dataset_get_chunk_info_by_idx_t get_chunk_info_by_idx;
 *     H5VL_native_dataset_get_chunk_info_by_coord_t get_chunk_info_by_coord;
 *     H5VL_native_dataset_chunk_read_t chunk_read;
 *     H5VL_native_dataset_chunk_write_t chunk_write;
 *     H5VL_native_dataset_get_vlen_buf_size_t get_vlen_buf_size;
 *     struct  get_offset;
 *     struct  chunk_iter;
 * };
 * }
 */
public class H5VL_native_dataset_optional_args_t {

    public static MemoryLayout $LAYOUT() {
        return constants$421.const$2;
    }
    /**
     * {@snippet :
     * struct {
     *     H5D_chunk_index_t* idx_type;
     * };
     * }
     */
    public static final class get_chunk_idx_type {

        // Suppresses default constructor, ensuring non-instantiability.
        private get_chunk_idx_type() {}
        public static MemoryLayout $LAYOUT() {
            return constants$421.const$3;
        }
        public static VarHandle idx_type$VH() {
            return constants$421.const$4;
        }
        /**
         * Getter for field:
         * {@snippet :
         * H5D_chunk_index_t* idx_type;
         * }
         */
        public static MemorySegment idx_type$get(MemorySegment seg) {
            return (java.lang.foreign.MemorySegment)constants$421.const$4.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * H5D_chunk_index_t* idx_type;
         * }
         */
        public static void idx_type$set(MemorySegment seg, MemorySegment x) {
            constants$421.const$4.set(seg, x);
        }
        public static MemorySegment idx_type$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemorySegment)constants$421.const$4.get(seg.asSlice(index*sizeof()));
        }
        public static void idx_type$set(MemorySegment seg, long index, MemorySegment x) {
            constants$421.const$4.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment get_chunk_idx_type$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    public static MemorySegment get_chunk_storage_size$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static MemorySegment get_num_chunks$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static MemorySegment get_chunk_info_by_idx$slice(MemorySegment seg) {
        return seg.asSlice(0, 48);
    }
    public static MemorySegment get_chunk_info_by_coord$slice(MemorySegment seg) {
        return seg.asSlice(0, 32);
    }
    public static MemorySegment chunk_read$slice(MemorySegment seg) {
        return seg.asSlice(0, 24);
    }
    public static MemorySegment chunk_write$slice(MemorySegment seg) {
        return seg.asSlice(0, 24);
    }
    public static MemorySegment get_vlen_buf_size$slice(MemorySegment seg) {
        return seg.asSlice(0, 24);
    }
    /**
     * {@snippet :
     * struct {
     *     haddr_t* offset;
     * };
     * }
     */
    public static final class get_offset {

        // Suppresses default constructor, ensuring non-instantiability.
        private get_offset() {}
        public static MemoryLayout $LAYOUT() {
            return constants$421.const$5;
        }
        public static VarHandle offset$VH() {
            return constants$422.const$0;
        }
        /**
         * Getter for field:
         * {@snippet :
         * haddr_t* offset;
         * }
         */
        public static MemorySegment offset$get(MemorySegment seg) {
            return (java.lang.foreign.MemorySegment)constants$422.const$0.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * haddr_t* offset;
         * }
         */
        public static void offset$set(MemorySegment seg, MemorySegment x) {
            constants$422.const$0.set(seg, x);
        }
        public static MemorySegment offset$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemorySegment)constants$422.const$0.get(seg.asSlice(index*sizeof()));
        }
        public static void offset$set(MemorySegment seg, long index, MemorySegment x) {
            constants$422.const$0.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment get_offset$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    /**
     * {@snippet :
     * struct {
     *     H5D_chunk_iter_op_t op;
     *     void* op_data;
     * };
     * }
     */
    public static final class chunk_iter {

        // Suppresses default constructor, ensuring non-instantiability.
        private chunk_iter() {}
        public static MemoryLayout $LAYOUT() {
            return constants$422.const$1;
        }
        public static VarHandle op$VH() {
            return constants$422.const$2;
        }
        /**
         * Getter for field:
         * {@snippet :
         * H5D_chunk_iter_op_t op;
         * }
         */
        public static MemorySegment op$get(MemorySegment seg) {
            return (java.lang.foreign.MemorySegment)constants$422.const$2.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * H5D_chunk_iter_op_t op;
         * }
         */
        public static void op$set(MemorySegment seg, MemorySegment x) {
            constants$422.const$2.set(seg, x);
        }
        public static MemorySegment op$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemorySegment)constants$422.const$2.get(seg.asSlice(index*sizeof()));
        }
        public static void op$set(MemorySegment seg, long index, MemorySegment x) {
            constants$422.const$2.set(seg.asSlice(index*sizeof()), x);
        }
        public static H5D_chunk_iter_op_t op(MemorySegment segment, Arena scope) {
            return H5D_chunk_iter_op_t.ofAddress(op$get(segment), scope);
        }
        public static VarHandle op_data$VH() {
            return constants$422.const$3;
        }
        /**
         * Getter for field:
         * {@snippet :
         * void* op_data;
         * }
         */
        public static MemorySegment op_data$get(MemorySegment seg) {
            return (java.lang.foreign.MemorySegment)constants$422.const$3.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * void* op_data;
         * }
         */
        public static void op_data$set(MemorySegment seg, MemorySegment x) {
            constants$422.const$3.set(seg, x);
        }
        public static MemorySegment op_data$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemorySegment)constants$422.const$3.get(seg.asSlice(index*sizeof()));
        }
        public static void op_data$set(MemorySegment seg, long index, MemorySegment x) {
            constants$422.const$3.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment chunk_iter$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


