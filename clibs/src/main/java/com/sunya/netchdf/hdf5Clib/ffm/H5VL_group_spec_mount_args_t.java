// Generated by jextract

package com.sunya.netchdf.hdf5Clib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct H5VL_group_spec_mount_args_t {
 *     char* name;
 *     void* child_file;
 *     hid_t fmpl_id;
 * };
 * }
 */
public class H5VL_group_spec_mount_args_t {

    public static MemoryLayout $LAYOUT() {
        return constants$241.const$1;
    }
    public static VarHandle name$VH() {
        return constants$241.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* name;
     * }
     */
    public static MemorySegment name$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$241.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* name;
     * }
     */
    public static void name$set(MemorySegment seg, MemorySegment x) {
        constants$241.const$2.set(seg, x);
    }
    public static MemorySegment name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$241.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void name$set(MemorySegment seg, long index, MemorySegment x) {
        constants$241.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle child_file$VH() {
        return constants$241.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* child_file;
     * }
     */
    public static MemorySegment child_file$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$241.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* child_file;
     * }
     */
    public static void child_file$set(MemorySegment seg, MemorySegment x) {
        constants$241.const$3.set(seg, x);
    }
    public static MemorySegment child_file$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$241.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void child_file$set(MemorySegment seg, long index, MemorySegment x) {
        constants$241.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle fmpl_id$VH() {
        return constants$241.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * hid_t fmpl_id;
     * }
     */
    public static long fmpl_id$get(MemorySegment seg) {
        return (long)constants$241.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * hid_t fmpl_id;
     * }
     */
    public static void fmpl_id$set(MemorySegment seg, long x) {
        constants$241.const$4.set(seg, x);
    }
    public static long fmpl_id$get(MemorySegment seg, long index) {
        return (long)constants$241.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void fmpl_id$set(MemorySegment seg, long index, long x) {
        constants$241.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


