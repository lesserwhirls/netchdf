// Generated by jextract

package com.sunya.netchdf.hdf5Clib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct H5VL_introspect_class_t {
 *     herr_t (*get_conn_cls)(void*,H5VL_get_conn_lvl_t,struct H5VL_class_t**);
 *     herr_t (*get_cap_flags)(void*,uint64_t*);
 *     herr_t (*opt_query)(void*,H5VL_subclass_t,int,uint64_t*);
 * };
 * }
 */
public class H5VL_introspect_class_t {

    public static MemoryLayout $LAYOUT() {
        return constants$281.const$1;
    }
    /**
     * {@snippet :
 * herr_t (*get_conn_cls)(void*,H5VL_get_conn_lvl_t,struct H5VL_class_t**);
     * }
     */
    public interface get_conn_cls {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(get_conn_cls fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$281.const$2, fi, constants$187.const$2, scope);
        }
        static get_conn_cls ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$187.const$4.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_conn_cls$VH() {
        return constants$281.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * herr_t (*get_conn_cls)(void*,H5VL_get_conn_lvl_t,struct H5VL_class_t**);
     * }
     */
    public static MemorySegment get_conn_cls$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$281.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * herr_t (*get_conn_cls)(void*,H5VL_get_conn_lvl_t,struct H5VL_class_t**);
     * }
     */
    public static void get_conn_cls$set(MemorySegment seg, MemorySegment x) {
        constants$281.const$3.set(seg, x);
    }
    public static MemorySegment get_conn_cls$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$281.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_conn_cls$set(MemorySegment seg, long index, MemorySegment x) {
        constants$281.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_conn_cls get_conn_cls(MemorySegment segment, Arena scope) {
        return get_conn_cls.ofAddress(get_conn_cls$get(segment), scope);
    }
    /**
     * {@snippet :
 * herr_t (*get_cap_flags)(void*,uint64_t*);
     * }
     */
    public interface get_cap_flags {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_cap_flags fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$281.const$4, fi, constants$13.const$4, scope);
        }
        static get_cap_flags ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$17.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_cap_flags$VH() {
        return constants$281.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * herr_t (*get_cap_flags)(void*,uint64_t*);
     * }
     */
    public static MemorySegment get_cap_flags$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$281.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * herr_t (*get_cap_flags)(void*,uint64_t*);
     * }
     */
    public static void get_cap_flags$set(MemorySegment seg, MemorySegment x) {
        constants$281.const$5.set(seg, x);
    }
    public static MemorySegment get_cap_flags$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$281.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_cap_flags$set(MemorySegment seg, long index, MemorySegment x) {
        constants$281.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_cap_flags get_cap_flags(MemorySegment segment, Arena scope) {
        return get_cap_flags.ofAddress(get_cap_flags$get(segment), scope);
    }
    /**
     * {@snippet :
 * herr_t (*opt_query)(void*,H5VL_subclass_t,int,uint64_t*);
     * }
     */
    public interface opt_query {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(opt_query fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$282.const$1, fi, constants$282.const$0, scope);
        }
        static opt_query ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$282.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle opt_query$VH() {
        return constants$282.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * herr_t (*opt_query)(void*,H5VL_subclass_t,int,uint64_t*);
     * }
     */
    public static MemorySegment opt_query$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$282.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * herr_t (*opt_query)(void*,H5VL_subclass_t,int,uint64_t*);
     * }
     */
    public static void opt_query$set(MemorySegment seg, MemorySegment x) {
        constants$282.const$3.set(seg, x);
    }
    public static MemorySegment opt_query$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$282.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void opt_query$set(MemorySegment seg, long index, MemorySegment x) {
        constants$282.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static opt_query opt_query(MemorySegment segment, Arena scope) {
        return opt_query.ofAddress(opt_query$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


