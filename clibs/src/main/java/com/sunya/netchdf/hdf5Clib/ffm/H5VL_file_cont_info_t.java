// Generated by jextract

package com.sunya.netchdf.hdf5Clib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct H5VL_file_cont_info_t {
 *     unsigned int version;
 *     uint64_t feature_flags;
 *     size_t token_size;
 *     size_t blob_id_size;
 * };
 * }
 */
public class H5VL_file_cont_info_t {

    public static MemoryLayout $LAYOUT() {
        return constants$231.const$5;
    }
    public static VarHandle version$VH() {
        return constants$232.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int version;
     * }
     */
    public static int version$get(MemorySegment seg) {
        return (int)constants$232.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int version;
     * }
     */
    public static void version$set(MemorySegment seg, int x) {
        constants$232.const$0.set(seg, x);
    }
    public static int version$get(MemorySegment seg, long index) {
        return (int)constants$232.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void version$set(MemorySegment seg, long index, int x) {
        constants$232.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle feature_flags$VH() {
        return constants$232.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint64_t feature_flags;
     * }
     */
    public static long feature_flags$get(MemorySegment seg) {
        return (long)constants$232.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint64_t feature_flags;
     * }
     */
    public static void feature_flags$set(MemorySegment seg, long x) {
        constants$232.const$1.set(seg, x);
    }
    public static long feature_flags$get(MemorySegment seg, long index) {
        return (long)constants$232.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void feature_flags$set(MemorySegment seg, long index, long x) {
        constants$232.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle token_size$VH() {
        return constants$232.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t token_size;
     * }
     */
    public static long token_size$get(MemorySegment seg) {
        return (long)constants$232.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t token_size;
     * }
     */
    public static void token_size$set(MemorySegment seg, long x) {
        constants$232.const$2.set(seg, x);
    }
    public static long token_size$get(MemorySegment seg, long index) {
        return (long)constants$232.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void token_size$set(MemorySegment seg, long index, long x) {
        constants$232.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle blob_id_size$VH() {
        return constants$232.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t blob_id_size;
     * }
     */
    public static long blob_id_size$get(MemorySegment seg) {
        return (long)constants$232.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t blob_id_size;
     * }
     */
    public static void blob_id_size$set(MemorySegment seg, long x) {
        constants$232.const$3.set(seg, x);
    }
    public static long blob_id_size$get(MemorySegment seg, long index) {
        return (long)constants$232.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void blob_id_size$set(MemorySegment seg, long index, long x) {
        constants$232.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


