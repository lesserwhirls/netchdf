// Generated by jextract

package com.sunya.netchdf.hdf5Clib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct H5VL_link_iterate_args_t {
 *     hbool_t recursive;
 *     H5_index_t idx_type;
 *     H5_iter_order_t order;
 *     hsize_t* idx_p;
 *     H5L_iterate2_t op;
 *     void* op_data;
 * };
 * }
 */
public class H5VL_link_iterate_args_t {

    public static MemoryLayout $LAYOUT() {
        return constants$246.const$5;
    }
    public static VarHandle recursive$VH() {
        return constants$247.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * hbool_t recursive;
     * }
     */
    public static boolean recursive$get(MemorySegment seg) {
        return (boolean)constants$247.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * hbool_t recursive;
     * }
     */
    public static void recursive$set(MemorySegment seg, boolean x) {
        constants$247.const$0.set(seg, x);
    }
    public static boolean recursive$get(MemorySegment seg, long index) {
        return (boolean)constants$247.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void recursive$set(MemorySegment seg, long index, boolean x) {
        constants$247.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle idx_type$VH() {
        return constants$247.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * H5_index_t idx_type;
     * }
     */
    public static int idx_type$get(MemorySegment seg) {
        return (int)constants$247.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * H5_index_t idx_type;
     * }
     */
    public static void idx_type$set(MemorySegment seg, int x) {
        constants$247.const$1.set(seg, x);
    }
    public static int idx_type$get(MemorySegment seg, long index) {
        return (int)constants$247.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void idx_type$set(MemorySegment seg, long index, int x) {
        constants$247.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle order$VH() {
        return constants$247.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * H5_iter_order_t order;
     * }
     */
    public static int order$get(MemorySegment seg) {
        return (int)constants$247.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * H5_iter_order_t order;
     * }
     */
    public static void order$set(MemorySegment seg, int x) {
        constants$247.const$2.set(seg, x);
    }
    public static int order$get(MemorySegment seg, long index) {
        return (int)constants$247.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void order$set(MemorySegment seg, long index, int x) {
        constants$247.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle idx_p$VH() {
        return constants$247.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * hsize_t* idx_p;
     * }
     */
    public static MemorySegment idx_p$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$247.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * hsize_t* idx_p;
     * }
     */
    public static void idx_p$set(MemorySegment seg, MemorySegment x) {
        constants$247.const$3.set(seg, x);
    }
    public static MemorySegment idx_p$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$247.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void idx_p$set(MemorySegment seg, long index, MemorySegment x) {
        constants$247.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle op$VH() {
        return constants$247.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * H5L_iterate2_t op;
     * }
     */
    public static MemorySegment op$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$247.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * H5L_iterate2_t op;
     * }
     */
    public static void op$set(MemorySegment seg, MemorySegment x) {
        constants$247.const$4.set(seg, x);
    }
    public static MemorySegment op$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$247.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void op$set(MemorySegment seg, long index, MemorySegment x) {
        constants$247.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static H5L_iterate2_t op(MemorySegment segment, Arena scope) {
        return H5L_iterate2_t.ofAddress(op$get(segment), scope);
    }
    public static VarHandle op_data$VH() {
        return constants$247.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* op_data;
     * }
     */
    public static MemorySegment op_data$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$247.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* op_data;
     * }
     */
    public static void op_data$set(MemorySegment seg, MemorySegment x) {
        constants$247.const$5.set(seg, x);
    }
    public static MemorySegment op_data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$247.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void op_data$set(MemorySegment seg, long index, MemorySegment x) {
        constants$247.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


