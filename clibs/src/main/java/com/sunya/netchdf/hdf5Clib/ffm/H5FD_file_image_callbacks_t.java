// Generated by jextract

package com.sunya.netchdf.hdf5Clib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct {
 *     void* (*image_malloc)(size_t,H5FD_file_image_op_t,void*);
 *     void* (*image_memcpy)(void*,void*,size_t,H5FD_file_image_op_t,void*);
 *     void* (*image_realloc)(void*,size_t,H5FD_file_image_op_t,void*);
 *     herr_t (*image_free)(void*,H5FD_file_image_op_t,void*);
 *     void* (*udata_copy)(void*);
 *     herr_t (*udata_free)(void*);
 *     void* udata;
 * };
 * }
 */
public class H5FD_file_image_callbacks_t {

    public static MemoryLayout $LAYOUT() {
        return constants$185.const$1;
    }
    /**
     * {@snippet :
 * void* (*image_malloc)(size_t,H5FD_file_image_op_t,void*);
     * }
     */
    public interface image_malloc {

        java.lang.foreign.MemorySegment apply(long _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(image_malloc fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$185.const$3, fi, constants$185.const$2, scope);
        }
        static image_malloc ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (long __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$185.const$4.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle image_malloc$VH() {
        return constants$185.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* (*image_malloc)(size_t,H5FD_file_image_op_t,void*);
     * }
     */
    public static MemorySegment image_malloc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$185.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* (*image_malloc)(size_t,H5FD_file_image_op_t,void*);
     * }
     */
    public static void image_malloc$set(MemorySegment seg, MemorySegment x) {
        constants$185.const$5.set(seg, x);
    }
    public static MemorySegment image_malloc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$185.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void image_malloc$set(MemorySegment seg, long index, MemorySegment x) {
        constants$185.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static image_malloc image_malloc(MemorySegment segment, Arena scope) {
        return image_malloc.ofAddress(image_malloc$get(segment), scope);
    }
    /**
     * {@snippet :
 * void* (*image_memcpy)(void*,void*,size_t,H5FD_file_image_op_t,void*);
     * }
     */
    public interface image_memcpy {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, long _x2, int _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(image_memcpy fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$186.const$1, fi, constants$186.const$0, scope);
        }
        static image_memcpy ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, long __x2, int __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$186.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle image_memcpy$VH() {
        return constants$186.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* (*image_memcpy)(void*,void*,size_t,H5FD_file_image_op_t,void*);
     * }
     */
    public static MemorySegment image_memcpy$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$186.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* (*image_memcpy)(void*,void*,size_t,H5FD_file_image_op_t,void*);
     * }
     */
    public static void image_memcpy$set(MemorySegment seg, MemorySegment x) {
        constants$186.const$3.set(seg, x);
    }
    public static MemorySegment image_memcpy$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$186.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void image_memcpy$set(MemorySegment seg, long index, MemorySegment x) {
        constants$186.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static image_memcpy image_memcpy(MemorySegment segment, Arena scope) {
        return image_memcpy.ofAddress(image_memcpy$get(segment), scope);
    }
    /**
     * {@snippet :
 * void* (*image_realloc)(void*,size_t,H5FD_file_image_op_t,void*);
     * }
     */
    public interface image_realloc {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, long _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(image_realloc fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$186.const$5, fi, constants$186.const$4, scope);
        }
        static image_realloc ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, long __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$187.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle image_realloc$VH() {
        return constants$187.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* (*image_realloc)(void*,size_t,H5FD_file_image_op_t,void*);
     * }
     */
    public static MemorySegment image_realloc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$187.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* (*image_realloc)(void*,size_t,H5FD_file_image_op_t,void*);
     * }
     */
    public static void image_realloc$set(MemorySegment seg, MemorySegment x) {
        constants$187.const$1.set(seg, x);
    }
    public static MemorySegment image_realloc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$187.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void image_realloc$set(MemorySegment seg, long index, MemorySegment x) {
        constants$187.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static image_realloc image_realloc(MemorySegment segment, Arena scope) {
        return image_realloc.ofAddress(image_realloc$get(segment), scope);
    }
    /**
     * {@snippet :
 * herr_t (*image_free)(void*,H5FD_file_image_op_t,void*);
     * }
     */
    public interface image_free {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(image_free fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$187.const$3, fi, constants$187.const$2, scope);
        }
        static image_free ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$187.const$4.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle image_free$VH() {
        return constants$187.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * herr_t (*image_free)(void*,H5FD_file_image_op_t,void*);
     * }
     */
    public static MemorySegment image_free$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$187.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * herr_t (*image_free)(void*,H5FD_file_image_op_t,void*);
     * }
     */
    public static void image_free$set(MemorySegment seg, MemorySegment x) {
        constants$187.const$5.set(seg, x);
    }
    public static MemorySegment image_free$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$187.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void image_free$set(MemorySegment seg, long index, MemorySegment x) {
        constants$187.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static image_free image_free(MemorySegment segment, Arena scope) {
        return image_free.ofAddress(image_free$get(segment), scope);
    }
    /**
     * {@snippet :
 * void* (*udata_copy)(void*);
     * }
     */
    public interface udata_copy {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(udata_copy fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$188.const$0, fi, constants$110.const$3, scope);
        }
        static udata_copy ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$188.const$1.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle udata_copy$VH() {
        return constants$188.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* (*udata_copy)(void*);
     * }
     */
    public static MemorySegment udata_copy$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$188.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* (*udata_copy)(void*);
     * }
     */
    public static void udata_copy$set(MemorySegment seg, MemorySegment x) {
        constants$188.const$2.set(seg, x);
    }
    public static MemorySegment udata_copy$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$188.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void udata_copy$set(MemorySegment seg, long index, MemorySegment x) {
        constants$188.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static udata_copy udata_copy(MemorySegment segment, Arena scope) {
        return udata_copy.ofAddress(udata_copy$get(segment), scope);
    }
    /**
     * {@snippet :
 * herr_t (*udata_free)(void*);
     * }
     */
    public interface udata_free {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(udata_free fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$188.const$3, fi, constants$15.const$4, scope);
        }
        static udata_free ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$27.const$4.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle udata_free$VH() {
        return constants$188.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * herr_t (*udata_free)(void*);
     * }
     */
    public static MemorySegment udata_free$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$188.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * herr_t (*udata_free)(void*);
     * }
     */
    public static void udata_free$set(MemorySegment seg, MemorySegment x) {
        constants$188.const$4.set(seg, x);
    }
    public static MemorySegment udata_free$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$188.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void udata_free$set(MemorySegment seg, long index, MemorySegment x) {
        constants$188.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static udata_free udata_free(MemorySegment segment, Arena scope) {
        return udata_free.ofAddress(udata_free$get(segment), scope);
    }
    public static VarHandle udata$VH() {
        return constants$188.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* udata;
     * }
     */
    public static MemorySegment udata$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$188.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* udata;
     * }
     */
    public static void udata$set(MemorySegment seg, MemorySegment x) {
        constants$188.const$5.set(seg, x);
    }
    public static MemorySegment udata$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$188.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void udata$set(MemorySegment seg, long index, MemorySegment x) {
        constants$188.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


