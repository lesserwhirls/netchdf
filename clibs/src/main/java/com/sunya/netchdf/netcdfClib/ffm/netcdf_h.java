// Generated by jextract

package com.sunya.netchdf.netcdfClib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class netcdf_h  {

    public static final OfByte C_CHAR = JAVA_BYTE;
    public static final OfShort C_SHORT = JAVA_SHORT;
    public static final OfInt C_INT = JAVA_INT;
    public static final OfLong C_LONG = JAVA_LONG;
    public static final OfLong C_LONG_LONG = JAVA_LONG;
    public static final OfFloat C_FLOAT = JAVA_FLOAT;
    public static final OfDouble C_DOUBLE = JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * #define _ERRNO_H 1
     * }
     */
    public static int _ERRNO_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _FEATURES_H 1
     * }
     */
    public static int _FEATURES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _DEFAULT_SOURCE 1
     * }
     */
    public static int _DEFAULT_SOURCE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_ISOC2X 0
     * }
     */
    public static int __GLIBC_USE_ISOC2X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __USE_ISOC11 1
     * }
     */
    public static int __USE_ISOC11() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_ISOC99 1
     * }
     */
    public static int __USE_ISOC99() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_ISOC95 1
     * }
     */
    public static int __USE_ISOC95() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX_IMPLICITLY 1
     * }
     */
    public static int __USE_POSIX_IMPLICITLY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_SOURCE 1
     * }
     */
    public static int _POSIX_SOURCE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX 1
     * }
     */
    public static int __USE_POSIX() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX2 1
     * }
     */
    public static int __USE_POSIX2() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX199309 1
     * }
     */
    public static int __USE_POSIX199309() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX199506 1
     * }
     */
    public static int __USE_POSIX199506() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_XOPEN2K 1
     * }
     */
    public static int __USE_XOPEN2K() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_XOPEN2K8 1
     * }
     */
    public static int __USE_XOPEN2K8() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _ATFILE_SOURCE 1
     * }
     */
    public static int _ATFILE_SOURCE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __WORDSIZE 64
     * }
     */
    public static int __WORDSIZE() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define __WORDSIZE_TIME64_COMPAT32 1
     * }
     */
    public static int __WORDSIZE_TIME64_COMPAT32() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __SYSCALL_WORDSIZE 64
     * }
     */
    public static int __SYSCALL_WORDSIZE() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define __USE_MISC 1
     * }
     */
    public static int __USE_MISC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_ATFILE 1
     * }
     */
    public static int __USE_ATFILE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_FORTIFY_LEVEL 0
     * }
     */
    public static int __USE_FORTIFY_LEVEL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_DEPRECATED_GETS 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_GETS() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_DEPRECATED_SCANF 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_SCANF() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_C2X_STRTOL 0
     * }
     */
    public static int __GLIBC_USE_C2X_STRTOL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _STDC_PREDEF_H 1
     * }
     */
    public static int _STDC_PREDEF_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __STDC_IEC_559__ 1
     * }
     */
    public static int __STDC_IEC_559__() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __STDC_IEC_559_COMPLEX__ 1
     * }
     */
    public static int __STDC_IEC_559_COMPLEX__() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __GNU_LIBRARY__ 6
     * }
     */
    public static int __GNU_LIBRARY__() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define __GLIBC__ 2
     * }
     */
    public static int __GLIBC__() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_MINOR__ 39
     * }
     */
    public static int __GLIBC_MINOR__() {
        return (int)39L;
    }
    /**
     * {@snippet :
     * #define _SYS_CDEFS_H 1
     * }
     */
    public static int _SYS_CDEFS_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __glibc_c99_flexarr_available 1
     * }
     */
    public static int __glibc_c99_flexarr_available() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI 0
     * }
     */
    public static int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_GENERIC_SELECTION 1
     * }
     */
    public static int __HAVE_GENERIC_SELECTION() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_ERRNO_H 1
     * }
     */
    public static int _BITS_ERRNO_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define EPERM 1
     * }
     */
    public static int EPERM() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define ENOENT 2
     * }
     */
    public static int ENOENT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define ESRCH 3
     * }
     */
    public static int ESRCH() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define EINTR 4
     * }
     */
    public static int EINTR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define EIO 5
     * }
     */
    public static int EIO() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define ENXIO 6
     * }
     */
    public static int ENXIO() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define E2BIG 7
     * }
     */
    public static int E2BIG() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define ENOEXEC 8
     * }
     */
    public static int ENOEXEC() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define EBADF 9
     * }
     */
    public static int EBADF() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define ECHILD 10
     * }
     */
    public static int ECHILD() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * #define EAGAIN 11
     * }
     */
    public static int EAGAIN() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * #define ENOMEM 12
     * }
     */
    public static int ENOMEM() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * #define EACCES 13
     * }
     */
    public static int EACCES() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * #define EFAULT 14
     * }
     */
    public static int EFAULT() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * #define ENOTBLK 15
     * }
     */
    public static int ENOTBLK() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * #define EBUSY 16
     * }
     */
    public static int EBUSY() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define EEXIST 17
     * }
     */
    public static int EEXIST() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * #define EXDEV 18
     * }
     */
    public static int EXDEV() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * #define ENODEV 19
     * }
     */
    public static int ENODEV() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * #define ENOTDIR 20
     * }
     */
    public static int ENOTDIR() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * #define EISDIR 21
     * }
     */
    public static int EISDIR() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * #define EINVAL 22
     * }
     */
    public static int EINVAL() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * #define ENFILE 23
     * }
     */
    public static int ENFILE() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * #define EMFILE 24
     * }
     */
    public static int EMFILE() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * #define ENOTTY 25
     * }
     */
    public static int ENOTTY() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * #define ETXTBSY 26
     * }
     */
    public static int ETXTBSY() {
        return (int)26L;
    }
    /**
     * {@snippet :
     * #define EFBIG 27
     * }
     */
    public static int EFBIG() {
        return (int)27L;
    }
    /**
     * {@snippet :
     * #define ENOSPC 28
     * }
     */
    public static int ENOSPC() {
        return (int)28L;
    }
    /**
     * {@snippet :
     * #define ESPIPE 29
     * }
     */
    public static int ESPIPE() {
        return (int)29L;
    }
    /**
     * {@snippet :
     * #define EROFS 30
     * }
     */
    public static int EROFS() {
        return (int)30L;
    }
    /**
     * {@snippet :
     * #define EMLINK 31
     * }
     */
    public static int EMLINK() {
        return (int)31L;
    }
    /**
     * {@snippet :
     * #define EPIPE 32
     * }
     */
    public static int EPIPE() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define EDOM 33
     * }
     */
    public static int EDOM() {
        return (int)33L;
    }
    /**
     * {@snippet :
     * #define ERANGE 34
     * }
     */
    public static int ERANGE() {
        return (int)34L;
    }
    /**
     * {@snippet :
     * #define EDEADLK 35
     * }
     */
    public static int EDEADLK() {
        return (int)35L;
    }
    /**
     * {@snippet :
     * #define ENAMETOOLONG 36
     * }
     */
    public static int ENAMETOOLONG() {
        return (int)36L;
    }
    /**
     * {@snippet :
     * #define ENOLCK 37
     * }
     */
    public static int ENOLCK() {
        return (int)37L;
    }
    /**
     * {@snippet :
     * #define ENOSYS 38
     * }
     */
    public static int ENOSYS() {
        return (int)38L;
    }
    /**
     * {@snippet :
     * #define ENOTEMPTY 39
     * }
     */
    public static int ENOTEMPTY() {
        return (int)39L;
    }
    /**
     * {@snippet :
     * #define ELOOP 40
     * }
     */
    public static int ELOOP() {
        return (int)40L;
    }
    /**
     * {@snippet :
     * #define ENOMSG 42
     * }
     */
    public static int ENOMSG() {
        return (int)42L;
    }
    /**
     * {@snippet :
     * #define EIDRM 43
     * }
     */
    public static int EIDRM() {
        return (int)43L;
    }
    /**
     * {@snippet :
     * #define ECHRNG 44
     * }
     */
    public static int ECHRNG() {
        return (int)44L;
    }
    /**
     * {@snippet :
     * #define EL2NSYNC 45
     * }
     */
    public static int EL2NSYNC() {
        return (int)45L;
    }
    /**
     * {@snippet :
     * #define EL3HLT 46
     * }
     */
    public static int EL3HLT() {
        return (int)46L;
    }
    /**
     * {@snippet :
     * #define EL3RST 47
     * }
     */
    public static int EL3RST() {
        return (int)47L;
    }
    /**
     * {@snippet :
     * #define ELNRNG 48
     * }
     */
    public static int ELNRNG() {
        return (int)48L;
    }
    /**
     * {@snippet :
     * #define EUNATCH 49
     * }
     */
    public static int EUNATCH() {
        return (int)49L;
    }
    /**
     * {@snippet :
     * #define ENOCSI 50
     * }
     */
    public static int ENOCSI() {
        return (int)50L;
    }
    /**
     * {@snippet :
     * #define EL2HLT 51
     * }
     */
    public static int EL2HLT() {
        return (int)51L;
    }
    /**
     * {@snippet :
     * #define EBADE 52
     * }
     */
    public static int EBADE() {
        return (int)52L;
    }
    /**
     * {@snippet :
     * #define EBADR 53
     * }
     */
    public static int EBADR() {
        return (int)53L;
    }
    /**
     * {@snippet :
     * #define EXFULL 54
     * }
     */
    public static int EXFULL() {
        return (int)54L;
    }
    /**
     * {@snippet :
     * #define ENOANO 55
     * }
     */
    public static int ENOANO() {
        return (int)55L;
    }
    /**
     * {@snippet :
     * #define EBADRQC 56
     * }
     */
    public static int EBADRQC() {
        return (int)56L;
    }
    /**
     * {@snippet :
     * #define EBADSLT 57
     * }
     */
    public static int EBADSLT() {
        return (int)57L;
    }
    /**
     * {@snippet :
     * #define EBFONT 59
     * }
     */
    public static int EBFONT() {
        return (int)59L;
    }
    /**
     * {@snippet :
     * #define ENOSTR 60
     * }
     */
    public static int ENOSTR() {
        return (int)60L;
    }
    /**
     * {@snippet :
     * #define ENODATA 61
     * }
     */
    public static int ENODATA() {
        return (int)61L;
    }
    /**
     * {@snippet :
     * #define ETIME 62
     * }
     */
    public static int ETIME() {
        return (int)62L;
    }
    /**
     * {@snippet :
     * #define ENOSR 63
     * }
     */
    public static int ENOSR() {
        return (int)63L;
    }
    /**
     * {@snippet :
     * #define ENONET 64
     * }
     */
    public static int ENONET() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define ENOPKG 65
     * }
     */
    public static int ENOPKG() {
        return (int)65L;
    }
    /**
     * {@snippet :
     * #define EREMOTE 66
     * }
     */
    public static int EREMOTE() {
        return (int)66L;
    }
    /**
     * {@snippet :
     * #define ENOLINK 67
     * }
     */
    public static int ENOLINK() {
        return (int)67L;
    }
    /**
     * {@snippet :
     * #define EADV 68
     * }
     */
    public static int EADV() {
        return (int)68L;
    }
    /**
     * {@snippet :
     * #define ESRMNT 69
     * }
     */
    public static int ESRMNT() {
        return (int)69L;
    }
    /**
     * {@snippet :
     * #define ECOMM 70
     * }
     */
    public static int ECOMM() {
        return (int)70L;
    }
    /**
     * {@snippet :
     * #define EPROTO 71
     * }
     */
    public static int EPROTO() {
        return (int)71L;
    }
    /**
     * {@snippet :
     * #define EMULTIHOP 72
     * }
     */
    public static int EMULTIHOP() {
        return (int)72L;
    }
    /**
     * {@snippet :
     * #define EDOTDOT 73
     * }
     */
    public static int EDOTDOT() {
        return (int)73L;
    }
    /**
     * {@snippet :
     * #define EBADMSG 74
     * }
     */
    public static int EBADMSG() {
        return (int)74L;
    }
    /**
     * {@snippet :
     * #define EOVERFLOW 75
     * }
     */
    public static int EOVERFLOW() {
        return (int)75L;
    }
    /**
     * {@snippet :
     * #define ENOTUNIQ 76
     * }
     */
    public static int ENOTUNIQ() {
        return (int)76L;
    }
    /**
     * {@snippet :
     * #define EBADFD 77
     * }
     */
    public static int EBADFD() {
        return (int)77L;
    }
    /**
     * {@snippet :
     * #define EREMCHG 78
     * }
     */
    public static int EREMCHG() {
        return (int)78L;
    }
    /**
     * {@snippet :
     * #define ELIBACC 79
     * }
     */
    public static int ELIBACC() {
        return (int)79L;
    }
    /**
     * {@snippet :
     * #define ELIBBAD 80
     * }
     */
    public static int ELIBBAD() {
        return (int)80L;
    }
    /**
     * {@snippet :
     * #define ELIBSCN 81
     * }
     */
    public static int ELIBSCN() {
        return (int)81L;
    }
    /**
     * {@snippet :
     * #define ELIBMAX 82
     * }
     */
    public static int ELIBMAX() {
        return (int)82L;
    }
    /**
     * {@snippet :
     * #define ELIBEXEC 83
     * }
     */
    public static int ELIBEXEC() {
        return (int)83L;
    }
    /**
     * {@snippet :
     * #define EILSEQ 84
     * }
     */
    public static int EILSEQ() {
        return (int)84L;
    }
    /**
     * {@snippet :
     * #define ERESTART 85
     * }
     */
    public static int ERESTART() {
        return (int)85L;
    }
    /**
     * {@snippet :
     * #define ESTRPIPE 86
     * }
     */
    public static int ESTRPIPE() {
        return (int)86L;
    }
    /**
     * {@snippet :
     * #define EUSERS 87
     * }
     */
    public static int EUSERS() {
        return (int)87L;
    }
    /**
     * {@snippet :
     * #define ENOTSOCK 88
     * }
     */
    public static int ENOTSOCK() {
        return (int)88L;
    }
    /**
     * {@snippet :
     * #define EDESTADDRREQ 89
     * }
     */
    public static int EDESTADDRREQ() {
        return (int)89L;
    }
    /**
     * {@snippet :
     * #define EMSGSIZE 90
     * }
     */
    public static int EMSGSIZE() {
        return (int)90L;
    }
    /**
     * {@snippet :
     * #define EPROTOTYPE 91
     * }
     */
    public static int EPROTOTYPE() {
        return (int)91L;
    }
    /**
     * {@snippet :
     * #define ENOPROTOOPT 92
     * }
     */
    public static int ENOPROTOOPT() {
        return (int)92L;
    }
    /**
     * {@snippet :
     * #define EPROTONOSUPPORT 93
     * }
     */
    public static int EPROTONOSUPPORT() {
        return (int)93L;
    }
    /**
     * {@snippet :
     * #define ESOCKTNOSUPPORT 94
     * }
     */
    public static int ESOCKTNOSUPPORT() {
        return (int)94L;
    }
    /**
     * {@snippet :
     * #define EOPNOTSUPP 95
     * }
     */
    public static int EOPNOTSUPP() {
        return (int)95L;
    }
    /**
     * {@snippet :
     * #define EPFNOSUPPORT 96
     * }
     */
    public static int EPFNOSUPPORT() {
        return (int)96L;
    }
    /**
     * {@snippet :
     * #define EAFNOSUPPORT 97
     * }
     */
    public static int EAFNOSUPPORT() {
        return (int)97L;
    }
    /**
     * {@snippet :
     * #define EADDRINUSE 98
     * }
     */
    public static int EADDRINUSE() {
        return (int)98L;
    }
    /**
     * {@snippet :
     * #define EADDRNOTAVAIL 99
     * }
     */
    public static int EADDRNOTAVAIL() {
        return (int)99L;
    }
    /**
     * {@snippet :
     * #define ENETDOWN 100
     * }
     */
    public static int ENETDOWN() {
        return (int)100L;
    }
    /**
     * {@snippet :
     * #define ENETUNREACH 101
     * }
     */
    public static int ENETUNREACH() {
        return (int)101L;
    }
    /**
     * {@snippet :
     * #define ENETRESET 102
     * }
     */
    public static int ENETRESET() {
        return (int)102L;
    }
    /**
     * {@snippet :
     * #define ECONNABORTED 103
     * }
     */
    public static int ECONNABORTED() {
        return (int)103L;
    }
    /**
     * {@snippet :
     * #define ECONNRESET 104
     * }
     */
    public static int ECONNRESET() {
        return (int)104L;
    }
    /**
     * {@snippet :
     * #define ENOBUFS 105
     * }
     */
    public static int ENOBUFS() {
        return (int)105L;
    }
    /**
     * {@snippet :
     * #define EISCONN 106
     * }
     */
    public static int EISCONN() {
        return (int)106L;
    }
    /**
     * {@snippet :
     * #define ENOTCONN 107
     * }
     */
    public static int ENOTCONN() {
        return (int)107L;
    }
    /**
     * {@snippet :
     * #define ESHUTDOWN 108
     * }
     */
    public static int ESHUTDOWN() {
        return (int)108L;
    }
    /**
     * {@snippet :
     * #define ETOOMANYREFS 109
     * }
     */
    public static int ETOOMANYREFS() {
        return (int)109L;
    }
    /**
     * {@snippet :
     * #define ETIMEDOUT 110
     * }
     */
    public static int ETIMEDOUT() {
        return (int)110L;
    }
    /**
     * {@snippet :
     * #define ECONNREFUSED 111
     * }
     */
    public static int ECONNREFUSED() {
        return (int)111L;
    }
    /**
     * {@snippet :
     * #define EHOSTDOWN 112
     * }
     */
    public static int EHOSTDOWN() {
        return (int)112L;
    }
    /**
     * {@snippet :
     * #define EHOSTUNREACH 113
     * }
     */
    public static int EHOSTUNREACH() {
        return (int)113L;
    }
    /**
     * {@snippet :
     * #define EALREADY 114
     * }
     */
    public static int EALREADY() {
        return (int)114L;
    }
    /**
     * {@snippet :
     * #define EINPROGRESS 115
     * }
     */
    public static int EINPROGRESS() {
        return (int)115L;
    }
    /**
     * {@snippet :
     * #define ESTALE 116
     * }
     */
    public static int ESTALE() {
        return (int)116L;
    }
    /**
     * {@snippet :
     * #define EUCLEAN 117
     * }
     */
    public static int EUCLEAN() {
        return (int)117L;
    }
    /**
     * {@snippet :
     * #define ENOTNAM 118
     * }
     */
    public static int ENOTNAM() {
        return (int)118L;
    }
    /**
     * {@snippet :
     * #define ENAVAIL 119
     * }
     */
    public static int ENAVAIL() {
        return (int)119L;
    }
    /**
     * {@snippet :
     * #define EISNAM 120
     * }
     */
    public static int EISNAM() {
        return (int)120L;
    }
    /**
     * {@snippet :
     * #define EREMOTEIO 121
     * }
     */
    public static int EREMOTEIO() {
        return (int)121L;
    }
    /**
     * {@snippet :
     * #define EDQUOT 122
     * }
     */
    public static int EDQUOT() {
        return (int)122L;
    }
    /**
     * {@snippet :
     * #define ENOMEDIUM 123
     * }
     */
    public static int ENOMEDIUM() {
        return (int)123L;
    }
    /**
     * {@snippet :
     * #define EMEDIUMTYPE 124
     * }
     */
    public static int EMEDIUMTYPE() {
        return (int)124L;
    }
    /**
     * {@snippet :
     * #define ECANCELED 125
     * }
     */
    public static int ECANCELED() {
        return (int)125L;
    }
    /**
     * {@snippet :
     * #define ENOKEY 126
     * }
     */
    public static int ENOKEY() {
        return (int)126L;
    }
    /**
     * {@snippet :
     * #define EKEYEXPIRED 127
     * }
     */
    public static int EKEYEXPIRED() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define EKEYREVOKED 128
     * }
     */
    public static int EKEYREVOKED() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define EKEYREJECTED 129
     * }
     */
    public static int EKEYREJECTED() {
        return (int)129L;
    }
    /**
     * {@snippet :
     * #define EOWNERDEAD 130
     * }
     */
    public static int EOWNERDEAD() {
        return (int)130L;
    }
    /**
     * {@snippet :
     * #define ENOTRECOVERABLE 131
     * }
     */
    public static int ENOTRECOVERABLE() {
        return (int)131L;
    }
    /**
     * {@snippet :
     * #define ERFKILL 132
     * }
     */
    public static int ERFKILL() {
        return (int)132L;
    }
    /**
     * {@snippet :
     * #define EHWPOISON 133
     * }
     */
    public static int EHWPOISON() {
        return (int)133L;
    }
    /**
     * {@snippet :
     * #define NC_NAT 0
     * }
     */
    public static int NC_NAT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define NC_BYTE 1
     * }
     */
    public static int NC_BYTE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define NC_CHAR 2
     * }
     */
    public static int NC_CHAR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define NC_SHORT 3
     * }
     */
    public static int NC_SHORT() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define NC_INT 4
     * }
     */
    public static int NC_INT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define NC_FLOAT 5
     * }
     */
    public static int NC_FLOAT() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define NC_DOUBLE 6
     * }
     */
    public static int NC_DOUBLE() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define NC_UBYTE 7
     * }
     */
    public static int NC_UBYTE() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define NC_USHORT 8
     * }
     */
    public static int NC_USHORT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define NC_UINT 9
     * }
     */
    public static int NC_UINT() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define NC_INT64 10
     * }
     */
    public static int NC_INT64() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * #define NC_UINT64 11
     * }
     */
    public static int NC_UINT64() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * #define NC_STRING 12
     * }
     */
    public static int NC_STRING() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * #define NC_VLEN 13
     * }
     */
    public static int NC_VLEN() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * #define NC_OPAQUE 14
     * }
     */
    public static int NC_OPAQUE() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * #define NC_ENUM 15
     * }
     */
    public static int NC_ENUM() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * #define NC_COMPOUND 16
     * }
     */
    public static int NC_COMPOUND() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define NC_FIRSTUSERTYPEID 32
     * }
     */
    public static int NC_FIRSTUSERTYPEID() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define NC_MAX_BYTE 127
     * }
     */
    public static int NC_MAX_BYTE() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define NC_MAX_CHAR 255
     * }
     */
    public static int NC_MAX_CHAR() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define NC_MAX_SHORT 32767
     * }
     */
    public static int NC_MAX_SHORT() {
        return (int)32767L;
    }
    /**
     * {@snippet :
     * #define NC_MAX_INT 2147483647
     * }
     */
    public static int NC_MAX_INT() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define NC_FILL 0
     * }
     */
    public static int NC_FILL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define NC_NOFILL 256
     * }
     */
    public static int NC_NOFILL() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define NC_NOWRITE 0
     * }
     */
    public static int NC_NOWRITE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define NC_WRITE 1
     * }
     */
    public static int NC_WRITE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define NC_CLOBBER 0
     * }
     */
    public static int NC_CLOBBER() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define NC_NOCLOBBER 4
     * }
     */
    public static int NC_NOCLOBBER() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define NC_DISKLESS 8
     * }
     */
    public static int NC_DISKLESS() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define NC_MMAP 16
     * }
     */
    public static int NC_MMAP() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define NC_64BIT_DATA 32
     * }
     */
    public static int NC_64BIT_DATA() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define NC_UDF0 64
     * }
     */
    public static int NC_UDF0() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define NC_UDF1 128
     * }
     */
    public static int NC_UDF1() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define NC_CLASSIC_MODEL 256
     * }
     */
    public static int NC_CLASSIC_MODEL() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define NC_64BIT_OFFSET 512
     * }
     */
    public static int NC_64BIT_OFFSET() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * #define NC_LOCK 1024
     * }
     */
    public static int NC_LOCK() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define NC_SHARE 2048
     * }
     */
    public static int NC_SHARE() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define NC_NETCDF4 4096
     * }
     */
    public static int NC_NETCDF4() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * #define NC_MPIIO 8192
     * }
     */
    public static int NC_MPIIO() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * #define NC_PERSIST 16384
     * }
     */
    public static int NC_PERSIST() {
        return (int)16384L;
    }
    /**
     * {@snippet :
     * #define NC_INMEMORY 32768
     * }
     */
    public static int NC_INMEMORY() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * #define NC_NOATTCREORD 131072
     * }
     */
    public static int NC_NOATTCREORD() {
        return (int)131072L;
    }
    /**
     * {@snippet :
     * #define NC_NODIMSCALE_ATTACH 262144
     * }
     */
    public static int NC_NODIMSCALE_ATTACH() {
        return (int)262144L;
    }
    /**
     * {@snippet :
     * #define NC_MAX_MAGIC_NUMBER_LEN 8
     * }
     */
    public static int NC_MAX_MAGIC_NUMBER_LEN() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define NC_SIZEHINT_DEFAULT 0
     * }
     */
    public static int NC_SIZEHINT_DEFAULT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define NC_MAX_DIMS 1024
     * }
     */
    public static int NC_MAX_DIMS() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define NC_MAX_ATTRS 8192
     * }
     */
    public static int NC_MAX_ATTRS() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * #define NC_MAX_VARS 8192
     * }
     */
    public static int NC_MAX_VARS() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * #define NC_MAX_NAME 256
     * }
     */
    public static int NC_MAX_NAME() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define NC_MAX_VAR_DIMS 1024
     * }
     */
    public static int NC_MAX_VAR_DIMS() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define NC_ENDIAN_NATIVE 0
     * }
     */
    public static int NC_ENDIAN_NATIVE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define NC_ENDIAN_LITTLE 1
     * }
     */
    public static int NC_ENDIAN_LITTLE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define NC_ENDIAN_BIG 2
     * }
     */
    public static int NC_ENDIAN_BIG() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define NC_CHUNKED 0
     * }
     */
    public static int NC_CHUNKED() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define NC_CONTIGUOUS 1
     * }
     */
    public static int NC_CONTIGUOUS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define NC_COMPACT 2
     * }
     */
    public static int NC_COMPACT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define NC_UNKNOWN_STORAGE 3
     * }
     */
    public static int NC_UNKNOWN_STORAGE() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define NC_VIRTUAL 4
     * }
     */
    public static int NC_VIRTUAL() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define NC_NOCHECKSUM 0
     * }
     */
    public static int NC_NOCHECKSUM() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define NC_FLETCHER32 1
     * }
     */
    public static int NC_FLETCHER32() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define NC_NOSHUFFLE 0
     * }
     */
    public static int NC_NOSHUFFLE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define NC_SHUFFLE 1
     * }
     */
    public static int NC_SHUFFLE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define NC_MIN_DEFLATE_LEVEL 0
     * }
     */
    public static int NC_MIN_DEFLATE_LEVEL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define NC_MAX_DEFLATE_LEVEL 9
     * }
     */
    public static int NC_MAX_DEFLATE_LEVEL() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define NC_SZIP_NN 32
     * }
     */
    public static int NC_SZIP_NN() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define NC_SZIP_EC 4
     * }
     */
    public static int NC_SZIP_EC() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define NC_NOQUANTIZE 0
     * }
     */
    public static int NC_NOQUANTIZE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define NC_QUANTIZE_BITGROOM 1
     * }
     */
    public static int NC_QUANTIZE_BITGROOM() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define NC_QUANTIZE_GRANULARBR 2
     * }
     */
    public static int NC_QUANTIZE_GRANULARBR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define NC_QUANTIZE_BITROUND 3
     * }
     */
    public static int NC_QUANTIZE_BITROUND() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define NC_NOERR 0
     * }
     */
    public static int NC_NOERR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define NC_HAVE_NEW_CHUNKING_API 1
     * }
     */
    public static int NC_HAVE_NEW_CHUNKING_API() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define NC_FATAL 1
     * }
     */
    public static int NC_FATAL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define NC_VERBOSE 2
     * }
     */
    public static int NC_VERBOSE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * typedef long ptrdiff_t;
     * }
     */
    public static final OfLong ptrdiff_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long size_t;
     * }
     */
    public static final OfLong size_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int wchar_t;
     * }
     */
    public static final OfInt wchar_t = JAVA_INT;
    public static MethodHandle __errno_location$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$3,"__errno_location");
    }
    /**
     * {@snippet :
     * int* __errno_location();
     * }
     */
    public static MemorySegment __errno_location() {
        var mh$ = __errno_location$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef int nc_type;
     * }
     */
    public static final OfInt nc_type = JAVA_INT;
    public static MethodHandle nc_inq_libvers$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$4,"nc_inq_libvers");
    }
    /**
     * {@snippet :
     * char* nc_inq_libvers();
     * }
     */
    public static MemorySegment nc_inq_libvers() {
        var mh$ = nc_inq_libvers$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_strerror$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$6,"nc_strerror");
    }
    /**
     * {@snippet :
     * char* nc_strerror(int ncerr);
     * }
     */
    public static MemorySegment nc_strerror(int ncerr) {
        var mh$ = nc_strerror$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ncerr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_def_user_format$MH() {
        return RuntimeHelper.requireNonNull(constants$1.const$1,"nc_def_user_format");
    }
    /**
     * {@snippet :
     * int nc_def_user_format(int mode_flag, NC_Dispatch* dispatch_table, char* magic_number);
     * }
     */
    public static int nc_def_user_format(int mode_flag, MemorySegment dispatch_table, MemorySegment magic_number) {
        var mh$ = nc_def_user_format$MH();
        try {
            return (int)mh$.invokeExact(mode_flag, dispatch_table, magic_number);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_user_format$MH() {
        return RuntimeHelper.requireNonNull(constants$1.const$2,"nc_inq_user_format");
    }
    /**
     * {@snippet :
     * int nc_inq_user_format(int mode_flag, NC_Dispatch** dispatch_table, char* magic_number);
     * }
     */
    public static int nc_inq_user_format(int mode_flag, MemorySegment dispatch_table, MemorySegment magic_number) {
        var mh$ = nc_inq_user_format$MH();
        try {
            return (int)mh$.invokeExact(mode_flag, dispatch_table, magic_number);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_set_alignment$MH() {
        return RuntimeHelper.requireNonNull(constants$1.const$4,"nc_set_alignment");
    }
    /**
     * {@snippet :
     * int nc_set_alignment(int threshold, int alignment);
     * }
     */
    public static int nc_set_alignment(int threshold, int alignment) {
        var mh$ = nc_set_alignment$MH();
        try {
            return (int)mh$.invokeExact(threshold, alignment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_alignment$MH() {
        return RuntimeHelper.requireNonNull(constants$1.const$6,"nc_get_alignment");
    }
    /**
     * {@snippet :
     * int nc_get_alignment(int* thresholdp, int* alignmentp);
     * }
     */
    public static int nc_get_alignment(MemorySegment thresholdp, MemorySegment alignmentp) {
        var mh$ = nc_get_alignment$MH();
        try {
            return (int)mh$.invokeExact(thresholdp, alignmentp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc__create$MH() {
        return RuntimeHelper.requireNonNull(constants$2.const$1,"nc__create");
    }
    /**
     * {@snippet :
     * int nc__create(char* path, int cmode, size_t initialsz, size_t* chunksizehintp, int* ncidp);
     * }
     */
    public static int nc__create(MemorySegment path, int cmode, long initialsz, MemorySegment chunksizehintp, MemorySegment ncidp) {
        var mh$ = nc__create$MH();
        try {
            return (int)mh$.invokeExact(path, cmode, initialsz, chunksizehintp, ncidp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_create$MH() {
        return RuntimeHelper.requireNonNull(constants$2.const$3,"nc_create");
    }
    /**
     * {@snippet :
     * int nc_create(char* path, int cmode, int* ncidp);
     * }
     */
    public static int nc_create(MemorySegment path, int cmode, MemorySegment ncidp) {
        var mh$ = nc_create$MH();
        try {
            return (int)mh$.invokeExact(path, cmode, ncidp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc__open$MH() {
        return RuntimeHelper.requireNonNull(constants$2.const$5,"nc__open");
    }
    /**
     * {@snippet :
     * int nc__open(char* path, int mode, size_t* chunksizehintp, int* ncidp);
     * }
     */
    public static int nc__open(MemorySegment path, int mode, MemorySegment chunksizehintp, MemorySegment ncidp) {
        var mh$ = nc__open$MH();
        try {
            return (int)mh$.invokeExact(path, mode, chunksizehintp, ncidp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_open$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$0,"nc_open");
    }
    /**
     * {@snippet :
     * int nc_open(char* path, int mode, int* ncidp);
     * }
     */
    public static int nc_open(MemorySegment path, int mode, MemorySegment ncidp) {
        var mh$ = nc_open$MH();
        try {
            return (int)mh$.invokeExact(path, mode, ncidp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_path$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$1,"nc_inq_path");
    }
    /**
     * {@snippet :
     * int nc_inq_path(int ncid, size_t* pathlen, char* path);
     * }
     */
    public static int nc_inq_path(int ncid, MemorySegment pathlen, MemorySegment path) {
        var mh$ = nc_inq_path$MH();
        try {
            return (int)mh$.invokeExact(ncid, pathlen, path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_ncid$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$2,"nc_inq_ncid");
    }
    /**
     * {@snippet :
     * int nc_inq_ncid(int ncid, char* name, int* grp_ncid);
     * }
     */
    public static int nc_inq_ncid(int ncid, MemorySegment name, MemorySegment grp_ncid) {
        var mh$ = nc_inq_ncid$MH();
        try {
            return (int)mh$.invokeExact(ncid, name, grp_ncid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_grps$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$3,"nc_inq_grps");
    }
    /**
     * {@snippet :
     * int nc_inq_grps(int ncid, int* numgrps, int* ncids);
     * }
     */
    public static int nc_inq_grps(int ncid, MemorySegment numgrps, MemorySegment ncids) {
        var mh$ = nc_inq_grps$MH();
        try {
            return (int)mh$.invokeExact(ncid, numgrps, ncids);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_grpname$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$5,"nc_inq_grpname");
    }
    /**
     * {@snippet :
     * int nc_inq_grpname(int ncid, char* name);
     * }
     */
    public static int nc_inq_grpname(int ncid, MemorySegment name) {
        var mh$ = nc_inq_grpname$MH();
        try {
            return (int)mh$.invokeExact(ncid, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_grpname_full$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$0,"nc_inq_grpname_full");
    }
    /**
     * {@snippet :
     * int nc_inq_grpname_full(int ncid, size_t* lenp, char* full_name);
     * }
     */
    public static int nc_inq_grpname_full(int ncid, MemorySegment lenp, MemorySegment full_name) {
        var mh$ = nc_inq_grpname_full$MH();
        try {
            return (int)mh$.invokeExact(ncid, lenp, full_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_grpname_len$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$1,"nc_inq_grpname_len");
    }
    /**
     * {@snippet :
     * int nc_inq_grpname_len(int ncid, size_t* lenp);
     * }
     */
    public static int nc_inq_grpname_len(int ncid, MemorySegment lenp) {
        var mh$ = nc_inq_grpname_len$MH();
        try {
            return (int)mh$.invokeExact(ncid, lenp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_grp_parent$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$2,"nc_inq_grp_parent");
    }
    /**
     * {@snippet :
     * int nc_inq_grp_parent(int ncid, int* parent_ncid);
     * }
     */
    public static int nc_inq_grp_parent(int ncid, MemorySegment parent_ncid) {
        var mh$ = nc_inq_grp_parent$MH();
        try {
            return (int)mh$.invokeExact(ncid, parent_ncid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_grp_ncid$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$3,"nc_inq_grp_ncid");
    }
    /**
     * {@snippet :
     * int nc_inq_grp_ncid(int ncid, char* grp_name, int* grp_ncid);
     * }
     */
    public static int nc_inq_grp_ncid(int ncid, MemorySegment grp_name, MemorySegment grp_ncid) {
        var mh$ = nc_inq_grp_ncid$MH();
        try {
            return (int)mh$.invokeExact(ncid, grp_name, grp_ncid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_grp_full_ncid$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$4,"nc_inq_grp_full_ncid");
    }
    /**
     * {@snippet :
     * int nc_inq_grp_full_ncid(int ncid, char* full_name, int* grp_ncid);
     * }
     */
    public static int nc_inq_grp_full_ncid(int ncid, MemorySegment full_name, MemorySegment grp_ncid) {
        var mh$ = nc_inq_grp_full_ncid$MH();
        try {
            return (int)mh$.invokeExact(ncid, full_name, grp_ncid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_varids$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$5,"nc_inq_varids");
    }
    /**
     * {@snippet :
     * int nc_inq_varids(int ncid, int* nvars, int* varids);
     * }
     */
    public static int nc_inq_varids(int ncid, MemorySegment nvars, MemorySegment varids) {
        var mh$ = nc_inq_varids$MH();
        try {
            return (int)mh$.invokeExact(ncid, nvars, varids);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_dimids$MH() {
        return RuntimeHelper.requireNonNull(constants$5.const$1,"nc_inq_dimids");
    }
    /**
     * {@snippet :
     * int nc_inq_dimids(int ncid, int* ndims, int* dimids, int include_parents);
     * }
     */
    public static int nc_inq_dimids(int ncid, MemorySegment ndims, MemorySegment dimids, int include_parents) {
        var mh$ = nc_inq_dimids$MH();
        try {
            return (int)mh$.invokeExact(ncid, ndims, dimids, include_parents);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_typeids$MH() {
        return RuntimeHelper.requireNonNull(constants$5.const$2,"nc_inq_typeids");
    }
    /**
     * {@snippet :
     * int nc_inq_typeids(int ncid, int* ntypes, int* typeids);
     * }
     */
    public static int nc_inq_typeids(int ncid, MemorySegment ntypes, MemorySegment typeids) {
        var mh$ = nc_inq_typeids$MH();
        try {
            return (int)mh$.invokeExact(ncid, ntypes, typeids);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_type_equal$MH() {
        return RuntimeHelper.requireNonNull(constants$5.const$4,"nc_inq_type_equal");
    }
    /**
     * {@snippet :
     * int nc_inq_type_equal(int ncid1, nc_type typeid1, int ncid2, nc_type typeid2, int* equal);
     * }
     */
    public static int nc_inq_type_equal(int ncid1, int typeid1, int ncid2, int typeid2, MemorySegment equal) {
        var mh$ = nc_inq_type_equal$MH();
        try {
            return (int)mh$.invokeExact(ncid1, typeid1, ncid2, typeid2, equal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_def_grp$MH() {
        return RuntimeHelper.requireNonNull(constants$5.const$5,"nc_def_grp");
    }
    /**
     * {@snippet :
     * int nc_def_grp(int parent_ncid, char* name, int* new_ncid);
     * }
     */
    public static int nc_def_grp(int parent_ncid, MemorySegment name, MemorySegment new_ncid) {
        var mh$ = nc_def_grp$MH();
        try {
            return (int)mh$.invokeExact(parent_ncid, name, new_ncid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_rename_grp$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$0,"nc_rename_grp");
    }
    /**
     * {@snippet :
     * int nc_rename_grp(int grpid, char* name);
     * }
     */
    public static int nc_rename_grp(int grpid, MemorySegment name) {
        var mh$ = nc_rename_grp$MH();
        try {
            return (int)mh$.invokeExact(grpid, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_def_compound$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$2,"nc_def_compound");
    }
    /**
     * {@snippet :
     * int nc_def_compound(int ncid, size_t size, char* name, nc_type* typeidp);
     * }
     */
    public static int nc_def_compound(int ncid, long size, MemorySegment name, MemorySegment typeidp) {
        var mh$ = nc_def_compound$MH();
        try {
            return (int)mh$.invokeExact(ncid, size, name, typeidp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_insert_compound$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$4,"nc_insert_compound");
    }
    /**
     * {@snippet :
     * int nc_insert_compound(int ncid, nc_type xtype, char* name, size_t offset, nc_type field_typeid);
     * }
     */
    public static int nc_insert_compound(int ncid, int xtype, MemorySegment name, long offset, int field_typeid) {
        var mh$ = nc_insert_compound$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtype, name, offset, field_typeid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_insert_array_compound$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$6,"nc_insert_array_compound");
    }
    /**
     * {@snippet :
     * int nc_insert_array_compound(int ncid, nc_type xtype, char* name, size_t offset, nc_type field_typeid, int ndims, int* dim_sizes);
     * }
     */
    public static int nc_insert_array_compound(int ncid, int xtype, MemorySegment name, long offset, int field_typeid, int ndims, MemorySegment dim_sizes) {
        var mh$ = nc_insert_array_compound$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtype, name, offset, field_typeid, ndims, dim_sizes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_type$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$1,"nc_inq_type");
    }
    /**
     * {@snippet :
     * int nc_inq_type(int ncid, nc_type xtype, char* name, size_t* size);
     * }
     */
    public static int nc_inq_type(int ncid, int xtype, MemorySegment name, MemorySegment size) {
        var mh$ = nc_inq_type$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtype, name, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_typeid$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$2,"nc_inq_typeid");
    }
    /**
     * {@snippet :
     * int nc_inq_typeid(int ncid, char* name, nc_type* typeidp);
     * }
     */
    public static int nc_inq_typeid(int ncid, MemorySegment name, MemorySegment typeidp) {
        var mh$ = nc_inq_typeid$MH();
        try {
            return (int)mh$.invokeExact(ncid, name, typeidp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_compound$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$4,"nc_inq_compound");
    }
    /**
     * {@snippet :
     * int nc_inq_compound(int ncid, nc_type xtype, char* name, size_t* sizep, size_t* nfieldsp);
     * }
     */
    public static int nc_inq_compound(int ncid, int xtype, MemorySegment name, MemorySegment sizep, MemorySegment nfieldsp) {
        var mh$ = nc_inq_compound$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtype, name, sizep, nfieldsp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_compound_name$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$6,"nc_inq_compound_name");
    }
    /**
     * {@snippet :
     * int nc_inq_compound_name(int ncid, nc_type xtype, char* name);
     * }
     */
    public static int nc_inq_compound_name(int ncid, int xtype, MemorySegment name) {
        var mh$ = nc_inq_compound_name$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtype, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_compound_size$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$0,"nc_inq_compound_size");
    }
    /**
     * {@snippet :
     * int nc_inq_compound_size(int ncid, nc_type xtype, size_t* sizep);
     * }
     */
    public static int nc_inq_compound_size(int ncid, int xtype, MemorySegment sizep) {
        var mh$ = nc_inq_compound_size$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtype, sizep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_compound_nfields$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$1,"nc_inq_compound_nfields");
    }
    /**
     * {@snippet :
     * int nc_inq_compound_nfields(int ncid, nc_type xtype, size_t* nfieldsp);
     * }
     */
    public static int nc_inq_compound_nfields(int ncid, int xtype, MemorySegment nfieldsp) {
        var mh$ = nc_inq_compound_nfields$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtype, nfieldsp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_compound_field$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$3,"nc_inq_compound_field");
    }
    /**
     * {@snippet :
     * int nc_inq_compound_field(int ncid, nc_type xtype, int fieldid, char* name, size_t* offsetp, nc_type* field_typeidp, int* ndimsp, int* dim_sizesp);
     * }
     */
    public static int nc_inq_compound_field(int ncid, int xtype, int fieldid, MemorySegment name, MemorySegment offsetp, MemorySegment field_typeidp, MemorySegment ndimsp, MemorySegment dim_sizesp) {
        var mh$ = nc_inq_compound_field$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtype, fieldid, name, offsetp, field_typeidp, ndimsp, dim_sizesp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_compound_fieldname$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$5,"nc_inq_compound_fieldname");
    }
    /**
     * {@snippet :
     * int nc_inq_compound_fieldname(int ncid, nc_type xtype, int fieldid, char* name);
     * }
     */
    public static int nc_inq_compound_fieldname(int ncid, int xtype, int fieldid, MemorySegment name) {
        var mh$ = nc_inq_compound_fieldname$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtype, fieldid, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_compound_fieldindex$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$0,"nc_inq_compound_fieldindex");
    }
    /**
     * {@snippet :
     * int nc_inq_compound_fieldindex(int ncid, nc_type xtype, char* name, int* fieldidp);
     * }
     */
    public static int nc_inq_compound_fieldindex(int ncid, int xtype, MemorySegment name, MemorySegment fieldidp) {
        var mh$ = nc_inq_compound_fieldindex$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtype, name, fieldidp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_compound_fieldoffset$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$1,"nc_inq_compound_fieldoffset");
    }
    /**
     * {@snippet :
     * int nc_inq_compound_fieldoffset(int ncid, nc_type xtype, int fieldid, size_t* offsetp);
     * }
     */
    public static int nc_inq_compound_fieldoffset(int ncid, int xtype, int fieldid, MemorySegment offsetp) {
        var mh$ = nc_inq_compound_fieldoffset$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtype, fieldid, offsetp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_compound_fieldtype$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$2,"nc_inq_compound_fieldtype");
    }
    /**
     * {@snippet :
     * int nc_inq_compound_fieldtype(int ncid, nc_type xtype, int fieldid, nc_type* field_typeidp);
     * }
     */
    public static int nc_inq_compound_fieldtype(int ncid, int xtype, int fieldid, MemorySegment field_typeidp) {
        var mh$ = nc_inq_compound_fieldtype$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtype, fieldid, field_typeidp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_compound_fieldndims$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$3,"nc_inq_compound_fieldndims");
    }
    /**
     * {@snippet :
     * int nc_inq_compound_fieldndims(int ncid, nc_type xtype, int fieldid, int* ndimsp);
     * }
     */
    public static int nc_inq_compound_fieldndims(int ncid, int xtype, int fieldid, MemorySegment ndimsp) {
        var mh$ = nc_inq_compound_fieldndims$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtype, fieldid, ndimsp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_compound_fielddim_sizes$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$4,"nc_inq_compound_fielddim_sizes");
    }
    /**
     * {@snippet :
     * int nc_inq_compound_fielddim_sizes(int ncid, nc_type xtype, int fieldid, int* dim_sizes);
     * }
     */
    public static int nc_inq_compound_fielddim_sizes(int ncid, int xtype, int fieldid, MemorySegment dim_sizes) {
        var mh$ = nc_inq_compound_fielddim_sizes$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtype, fieldid, dim_sizes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_def_vlen$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$3,"nc_def_vlen");
    }
    /**
     * {@snippet :
     * int nc_def_vlen(int ncid, char* name, nc_type base_typeid, nc_type* xtypep);
     * }
     */
    public static int nc_def_vlen(int ncid, MemorySegment name, int base_typeid, MemorySegment xtypep) {
        var mh$ = nc_def_vlen$MH();
        try {
            return (int)mh$.invokeExact(ncid, name, base_typeid, xtypep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_vlen$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$4,"nc_inq_vlen");
    }
    /**
     * {@snippet :
     * int nc_inq_vlen(int ncid, nc_type xtype, char* name, size_t* datum_sizep, nc_type* base_nc_typep);
     * }
     */
    public static int nc_inq_vlen(int ncid, int xtype, MemorySegment name, MemorySegment datum_sizep, MemorySegment base_nc_typep) {
        var mh$ = nc_inq_vlen$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtype, name, datum_sizep, base_nc_typep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vlen_element$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$6,"nc_put_vlen_element");
    }
    /**
     * {@snippet :
     * int nc_put_vlen_element(int ncid, int typeid1, void* vlen_element, size_t len, void* data);
     * }
     */
    public static int nc_put_vlen_element(int ncid, int typeid1, MemorySegment vlen_element, long len, MemorySegment data) {
        var mh$ = nc_put_vlen_element$MH();
        try {
            return (int)mh$.invokeExact(ncid, typeid1, vlen_element, len, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vlen_element$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$0,"nc_get_vlen_element");
    }
    /**
     * {@snippet :
     * int nc_get_vlen_element(int ncid, int typeid1, void* vlen_element, size_t* len, void* data);
     * }
     */
    public static int nc_get_vlen_element(int ncid, int typeid1, MemorySegment vlen_element, MemorySegment len, MemorySegment data) {
        var mh$ = nc_get_vlen_element$MH();
        try {
            return (int)mh$.invokeExact(ncid, typeid1, vlen_element, len, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_user_type$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$2,"nc_inq_user_type");
    }
    /**
     * {@snippet :
     * int nc_inq_user_type(int ncid, nc_type xtype, char* name, size_t* size, nc_type* base_nc_typep, size_t* nfieldsp, int* classp);
     * }
     */
    public static int nc_inq_user_type(int ncid, int xtype, MemorySegment name, MemorySegment size, MemorySegment base_nc_typep, MemorySegment nfieldsp, MemorySegment classp) {
        var mh$ = nc_inq_user_type$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtype, name, size, base_nc_typep, nfieldsp, classp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_att$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$4,"nc_put_att");
    }
    /**
     * {@snippet :
     * int nc_put_att(int ncid, int varid, char* name, nc_type xtype, size_t len, void* op);
     * }
     */
    public static int nc_put_att(int ncid, int varid, MemorySegment name, int xtype, long len, MemorySegment op) {
        var mh$ = nc_put_att$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, xtype, len, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_att$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$5,"nc_get_att");
    }
    /**
     * {@snippet :
     * int nc_get_att(int ncid, int varid, char* name, void* ip);
     * }
     */
    public static int nc_get_att(int ncid, int varid, MemorySegment name, MemorySegment ip) {
        var mh$ = nc_get_att$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_def_enum$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$0,"nc_def_enum");
    }
    /**
     * {@snippet :
     * int nc_def_enum(int ncid, nc_type base_typeid, char* name, nc_type* typeidp);
     * }
     */
    public static int nc_def_enum(int ncid, int base_typeid, MemorySegment name, MemorySegment typeidp) {
        var mh$ = nc_def_enum$MH();
        try {
            return (int)mh$.invokeExact(ncid, base_typeid, name, typeidp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_insert_enum$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$1,"nc_insert_enum");
    }
    /**
     * {@snippet :
     * int nc_insert_enum(int ncid, nc_type xtype, char* name, void* value);
     * }
     */
    public static int nc_insert_enum(int ncid, int xtype, MemorySegment name, MemorySegment value) {
        var mh$ = nc_insert_enum$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtype, name, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_enum$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$3,"nc_inq_enum");
    }
    /**
     * {@snippet :
     * int nc_inq_enum(int ncid, nc_type xtype, char* name, nc_type* base_nc_typep, size_t* base_sizep, size_t* num_membersp);
     * }
     */
    public static int nc_inq_enum(int ncid, int xtype, MemorySegment name, MemorySegment base_nc_typep, MemorySegment base_sizep, MemorySegment num_membersp) {
        var mh$ = nc_inq_enum$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtype, name, base_nc_typep, base_sizep, num_membersp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_enum_member$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$5,"nc_inq_enum_member");
    }
    /**
     * {@snippet :
     * int nc_inq_enum_member(int ncid, nc_type xtype, int idx, char* name, void* value);
     * }
     */
    public static int nc_inq_enum_member(int ncid, int xtype, int idx, MemorySegment name, MemorySegment value) {
        var mh$ = nc_inq_enum_member$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtype, idx, name, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_enum_ident$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$1,"nc_inq_enum_ident");
    }
    /**
     * {@snippet :
     * int nc_inq_enum_ident(int ncid, nc_type xtype, long long value, char* identifier);
     * }
     */
    public static int nc_inq_enum_ident(int ncid, int xtype, long value, MemorySegment identifier) {
        var mh$ = nc_inq_enum_ident$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtype, value, identifier);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_def_opaque$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$2,"nc_def_opaque");
    }
    /**
     * {@snippet :
     * int nc_def_opaque(int ncid, size_t size, char* name, nc_type* xtypep);
     * }
     */
    public static int nc_def_opaque(int ncid, long size, MemorySegment name, MemorySegment xtypep) {
        var mh$ = nc_def_opaque$MH();
        try {
            return (int)mh$.invokeExact(ncid, size, name, xtypep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_opaque$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$3,"nc_inq_opaque");
    }
    /**
     * {@snippet :
     * int nc_inq_opaque(int ncid, nc_type xtype, char* name, size_t* sizep);
     * }
     */
    public static int nc_inq_opaque(int ncid, int xtype, MemorySegment name, MemorySegment sizep) {
        var mh$ = nc_inq_opaque$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtype, name, sizep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$4,"nc_put_var");
    }
    /**
     * {@snippet :
     * int nc_put_var(int ncid, int varid, void* op);
     * }
     */
    public static int nc_put_var(int ncid, int varid, MemorySegment op) {
        var mh$ = nc_put_var$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$5,"nc_get_var");
    }
    /**
     * {@snippet :
     * int nc_get_var(int ncid, int varid, void* ip);
     * }
     */
    public static int nc_get_var(int ncid, int varid, MemorySegment ip) {
        var mh$ = nc_get_var$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var1$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$0,"nc_put_var1");
    }
    /**
     * {@snippet :
     * int nc_put_var1(int ncid, int varid, const size_t* indexp, void* op);
     * }
     */
    public static int nc_put_var1(int ncid, int varid, MemorySegment indexp, MemorySegment op) {
        var mh$ = nc_put_var1$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var1$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$1,"nc_get_var1");
    }
    /**
     * {@snippet :
     * int nc_get_var1(int ncid, int varid, const size_t* indexp, void* ip);
     * }
     */
    public static int nc_get_var1(int ncid, int varid, MemorySegment indexp, MemorySegment ip) {
        var mh$ = nc_get_var1$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vara$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$2,"nc_put_vara");
    }
    /**
     * {@snippet :
     * int nc_put_vara(int ncid, int varid, const size_t* startp, const size_t* countp, void* op);
     * }
     */
    public static int nc_put_vara(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment op) {
        var mh$ = nc_put_vara$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vara$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$3,"nc_get_vara");
    }
    /**
     * {@snippet :
     * int nc_get_vara(int ncid, int varid, const size_t* startp, const size_t* countp, void* ip);
     * }
     */
    public static int nc_get_vara(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment ip) {
        var mh$ = nc_get_vara$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vars$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$4,"nc_put_vars");
    }
    /**
     * {@snippet :
     * int nc_put_vars(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, void* op);
     * }
     */
    public static int nc_put_vars(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment op) {
        var mh$ = nc_put_vars$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vars$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$5,"nc_get_vars");
    }
    /**
     * {@snippet :
     * int nc_get_vars(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, void* ip);
     * }
     */
    public static int nc_get_vars(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment ip) {
        var mh$ = nc_get_vars$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_varm$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$0,"nc_put_varm");
    }
    /**
     * {@snippet :
     * int nc_put_varm(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, const ptrdiff_t* imapp, void* op);
     * }
     */
    public static int nc_put_varm(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment imapp, MemorySegment op) {
        var mh$ = nc_put_varm$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_varm$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$1,"nc_get_varm");
    }
    /**
     * {@snippet :
     * int nc_get_varm(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, const ptrdiff_t* imapp, void* ip);
     * }
     */
    public static int nc_get_varm(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment imapp, MemorySegment ip) {
        var mh$ = nc_get_varm$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_def_var_quantize$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$3,"nc_def_var_quantize");
    }
    /**
     * {@snippet :
     * int nc_def_var_quantize(int ncid, int varid, int quantize_mode, int nsd);
     * }
     */
    public static int nc_def_var_quantize(int ncid, int varid, int quantize_mode, int nsd) {
        var mh$ = nc_def_var_quantize$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, quantize_mode, nsd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_var_quantize$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$4,"nc_inq_var_quantize");
    }
    /**
     * {@snippet :
     * int nc_inq_var_quantize(int ncid, int varid, int* quantize_modep, int* nsdp);
     * }
     */
    public static int nc_inq_var_quantize(int ncid, int varid, MemorySegment quantize_modep, MemorySegment nsdp) {
        var mh$ = nc_inq_var_quantize$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, quantize_modep, nsdp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_def_var_deflate$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$6,"nc_def_var_deflate");
    }
    /**
     * {@snippet :
     * int nc_def_var_deflate(int ncid, int varid, int shuffle, int deflate, int deflate_level);
     * }
     */
    public static int nc_def_var_deflate(int ncid, int varid, int shuffle, int deflate, int deflate_level) {
        var mh$ = nc_def_var_deflate$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, shuffle, deflate, deflate_level);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_var_deflate$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$0,"nc_inq_var_deflate");
    }
    /**
     * {@snippet :
     * int nc_inq_var_deflate(int ncid, int varid, int* shufflep, int* deflatep, int* deflate_levelp);
     * }
     */
    public static int nc_inq_var_deflate(int ncid, int varid, MemorySegment shufflep, MemorySegment deflatep, MemorySegment deflate_levelp) {
        var mh$ = nc_inq_var_deflate$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, shufflep, deflatep, deflate_levelp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_def_var_szip$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$1,"nc_def_var_szip");
    }
    /**
     * {@snippet :
     * int nc_def_var_szip(int ncid, int varid, int options_mask, int pixels_per_block);
     * }
     */
    public static int nc_def_var_szip(int ncid, int varid, int options_mask, int pixels_per_block) {
        var mh$ = nc_def_var_szip$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, options_mask, pixels_per_block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_var_szip$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$2,"nc_inq_var_szip");
    }
    /**
     * {@snippet :
     * int nc_inq_var_szip(int ncid, int varid, int* options_maskp, int* pixels_per_blockp);
     * }
     */
    public static int nc_inq_var_szip(int ncid, int varid, MemorySegment options_maskp, MemorySegment pixels_per_blockp) {
        var mh$ = nc_inq_var_szip$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, options_maskp, pixels_per_blockp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_def_var_fletcher32$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$4,"nc_def_var_fletcher32");
    }
    /**
     * {@snippet :
     * int nc_def_var_fletcher32(int ncid, int varid, int fletcher32);
     * }
     */
    public static int nc_def_var_fletcher32(int ncid, int varid, int fletcher32) {
        var mh$ = nc_def_var_fletcher32$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, fletcher32);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_var_fletcher32$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$5,"nc_inq_var_fletcher32");
    }
    /**
     * {@snippet :
     * int nc_inq_var_fletcher32(int ncid, int varid, int* fletcher32p);
     * }
     */
    public static int nc_inq_var_fletcher32(int ncid, int varid, MemorySegment fletcher32p) {
        var mh$ = nc_inq_var_fletcher32$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, fletcher32p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_def_var_chunking$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$0,"nc_def_var_chunking");
    }
    /**
     * {@snippet :
     * int nc_def_var_chunking(int ncid, int varid, int storage, const size_t* chunksizesp);
     * }
     */
    public static int nc_def_var_chunking(int ncid, int varid, int storage, MemorySegment chunksizesp) {
        var mh$ = nc_def_var_chunking$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, storage, chunksizesp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_var_chunking$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$1,"nc_inq_var_chunking");
    }
    /**
     * {@snippet :
     * int nc_inq_var_chunking(int ncid, int varid, int* storagep, size_t* chunksizesp);
     * }
     */
    public static int nc_inq_var_chunking(int ncid, int varid, MemorySegment storagep, MemorySegment chunksizesp) {
        var mh$ = nc_inq_var_chunking$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, storagep, chunksizesp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_def_var_fill$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$2,"nc_def_var_fill");
    }
    /**
     * {@snippet :
     * int nc_def_var_fill(int ncid, int varid, int no_fill, void* fill_value);
     * }
     */
    public static int nc_def_var_fill(int ncid, int varid, int no_fill, MemorySegment fill_value) {
        var mh$ = nc_def_var_fill$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, no_fill, fill_value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_var_fill$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$3,"nc_inq_var_fill");
    }
    /**
     * {@snippet :
     * int nc_inq_var_fill(int ncid, int varid, int* no_fill, void* fill_valuep);
     * }
     */
    public static int nc_inq_var_fill(int ncid, int varid, MemorySegment no_fill, MemorySegment fill_valuep) {
        var mh$ = nc_inq_var_fill$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, no_fill, fill_valuep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_def_var_endian$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$4,"nc_def_var_endian");
    }
    /**
     * {@snippet :
     * int nc_def_var_endian(int ncid, int varid, int endian);
     * }
     */
    public static int nc_def_var_endian(int ncid, int varid, int endian) {
        var mh$ = nc_def_var_endian$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, endian);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_var_endian$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$5,"nc_inq_var_endian");
    }
    /**
     * {@snippet :
     * int nc_inq_var_endian(int ncid, int varid, int* endianp);
     * }
     */
    public static int nc_inq_var_endian(int ncid, int varid, MemorySegment endianp) {
        var mh$ = nc_inq_var_endian$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, endianp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_def_var_filter$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$1,"nc_def_var_filter");
    }
    /**
     * {@snippet :
     * int nc_def_var_filter(int ncid, int varid, unsigned int id, size_t nparams, unsigned int* parms);
     * }
     */
    public static int nc_def_var_filter(int ncid, int varid, int id, long nparams, MemorySegment parms) {
        var mh$ = nc_def_var_filter$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, id, nparams, parms);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_var_filter$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$2,"nc_inq_var_filter");
    }
    /**
     * {@snippet :
     * int nc_inq_var_filter(int ncid, int varid, unsigned int* idp, size_t* nparams, unsigned int* params);
     * }
     */
    public static int nc_inq_var_filter(int ncid, int varid, MemorySegment idp, MemorySegment nparams, MemorySegment params) {
        var mh$ = nc_inq_var_filter$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, idp, nparams, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_set_fill$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$3,"nc_set_fill");
    }
    /**
     * {@snippet :
     * int nc_set_fill(int ncid, int fillmode, int* old_modep);
     * }
     */
    public static int nc_set_fill(int ncid, int fillmode, MemorySegment old_modep) {
        var mh$ = nc_set_fill$MH();
        try {
            return (int)mh$.invokeExact(ncid, fillmode, old_modep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_set_default_format$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$4,"nc_set_default_format");
    }
    /**
     * {@snippet :
     * int nc_set_default_format(int format, int* old_formatp);
     * }
     */
    public static int nc_set_default_format(int format, MemorySegment old_formatp) {
        var mh$ = nc_set_default_format$MH();
        try {
            return (int)mh$.invokeExact(format, old_formatp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_set_chunk_cache$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$6,"nc_set_chunk_cache");
    }
    /**
     * {@snippet :
     * int nc_set_chunk_cache(size_t size, size_t nelems, float preemption);
     * }
     */
    public static int nc_set_chunk_cache(long size, long nelems, float preemption) {
        var mh$ = nc_set_chunk_cache$MH();
        try {
            return (int)mh$.invokeExact(size, nelems, preemption);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_chunk_cache$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$1,"nc_get_chunk_cache");
    }
    /**
     * {@snippet :
     * int nc_get_chunk_cache(size_t* sizep, size_t* nelemsp, float* preemptionp);
     * }
     */
    public static int nc_get_chunk_cache(MemorySegment sizep, MemorySegment nelemsp, MemorySegment preemptionp) {
        var mh$ = nc_get_chunk_cache$MH();
        try {
            return (int)mh$.invokeExact(sizep, nelemsp, preemptionp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_set_var_chunk_cache$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$3,"nc_set_var_chunk_cache");
    }
    /**
     * {@snippet :
     * int nc_set_var_chunk_cache(int ncid, int varid, size_t size, size_t nelems, float preemption);
     * }
     */
    public static int nc_set_var_chunk_cache(int ncid, int varid, long size, long nelems, float preemption) {
        var mh$ = nc_set_var_chunk_cache$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, size, nelems, preemption);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var_chunk_cache$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$4,"nc_get_var_chunk_cache");
    }
    /**
     * {@snippet :
     * int nc_get_var_chunk_cache(int ncid, int varid, size_t* sizep, size_t* nelemsp, float* preemptionp);
     * }
     */
    public static int nc_get_var_chunk_cache(int ncid, int varid, MemorySegment sizep, MemorySegment nelemsp, MemorySegment preemptionp) {
        var mh$ = nc_get_var_chunk_cache$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, sizep, nelemsp, preemptionp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_redef$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$6,"nc_redef");
    }
    /**
     * {@snippet :
     * int nc_redef(int ncid);
     * }
     */
    public static int nc_redef(int ncid) {
        var mh$ = nc_redef$MH();
        try {
            return (int)mh$.invokeExact(ncid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc__enddef$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$1,"nc__enddef");
    }
    /**
     * {@snippet :
     * int nc__enddef(int ncid, size_t h_minfree, size_t v_align, size_t v_minfree, size_t r_align);
     * }
     */
    public static int nc__enddef(int ncid, long h_minfree, long v_align, long v_minfree, long r_align) {
        var mh$ = nc__enddef$MH();
        try {
            return (int)mh$.invokeExact(ncid, h_minfree, v_align, v_minfree, r_align);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_enddef$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$2,"nc_enddef");
    }
    /**
     * {@snippet :
     * int nc_enddef(int ncid);
     * }
     */
    public static int nc_enddef(int ncid) {
        var mh$ = nc_enddef$MH();
        try {
            return (int)mh$.invokeExact(ncid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_sync$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$3,"nc_sync");
    }
    /**
     * {@snippet :
     * int nc_sync(int ncid);
     * }
     */
    public static int nc_sync(int ncid) {
        var mh$ = nc_sync$MH();
        try {
            return (int)mh$.invokeExact(ncid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_abort$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$4,"nc_abort");
    }
    /**
     * {@snippet :
     * int nc_abort(int ncid);
     * }
     */
    public static int nc_abort(int ncid) {
        var mh$ = nc_abort$MH();
        try {
            return (int)mh$.invokeExact(ncid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_close$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$5,"nc_close");
    }
    /**
     * {@snippet :
     * int nc_close(int ncid);
     * }
     */
    public static int nc_close(int ncid) {
        var mh$ = nc_close$MH();
        try {
            return (int)mh$.invokeExact(ncid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$1,"nc_inq");
    }
    /**
     * {@snippet :
     * int nc_inq(int ncid, int* ndimsp, int* nvarsp, int* nattsp, int* unlimdimidp);
     * }
     */
    public static int nc_inq(int ncid, MemorySegment ndimsp, MemorySegment nvarsp, MemorySegment nattsp, MemorySegment unlimdimidp) {
        var mh$ = nc_inq$MH();
        try {
            return (int)mh$.invokeExact(ncid, ndimsp, nvarsp, nattsp, unlimdimidp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_ndims$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$2,"nc_inq_ndims");
    }
    /**
     * {@snippet :
     * int nc_inq_ndims(int ncid, int* ndimsp);
     * }
     */
    public static int nc_inq_ndims(int ncid, MemorySegment ndimsp) {
        var mh$ = nc_inq_ndims$MH();
        try {
            return (int)mh$.invokeExact(ncid, ndimsp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_nvars$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$3,"nc_inq_nvars");
    }
    /**
     * {@snippet :
     * int nc_inq_nvars(int ncid, int* nvarsp);
     * }
     */
    public static int nc_inq_nvars(int ncid, MemorySegment nvarsp) {
        var mh$ = nc_inq_nvars$MH();
        try {
            return (int)mh$.invokeExact(ncid, nvarsp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_natts$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$4,"nc_inq_natts");
    }
    /**
     * {@snippet :
     * int nc_inq_natts(int ncid, int* nattsp);
     * }
     */
    public static int nc_inq_natts(int ncid, MemorySegment nattsp) {
        var mh$ = nc_inq_natts$MH();
        try {
            return (int)mh$.invokeExact(ncid, nattsp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_unlimdim$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$5,"nc_inq_unlimdim");
    }
    /**
     * {@snippet :
     * int nc_inq_unlimdim(int ncid, int* unlimdimidp);
     * }
     */
    public static int nc_inq_unlimdim(int ncid, MemorySegment unlimdimidp) {
        var mh$ = nc_inq_unlimdim$MH();
        try {
            return (int)mh$.invokeExact(ncid, unlimdimidp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_unlimdims$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$0,"nc_inq_unlimdims");
    }
    /**
     * {@snippet :
     * int nc_inq_unlimdims(int ncid, int* nunlimdimsp, int* unlimdimidsp);
     * }
     */
    public static int nc_inq_unlimdims(int ncid, MemorySegment nunlimdimsp, MemorySegment unlimdimidsp) {
        var mh$ = nc_inq_unlimdims$MH();
        try {
            return (int)mh$.invokeExact(ncid, nunlimdimsp, unlimdimidsp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_format$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$1,"nc_inq_format");
    }
    /**
     * {@snippet :
     * int nc_inq_format(int ncid, int* formatp);
     * }
     */
    public static int nc_inq_format(int ncid, MemorySegment formatp) {
        var mh$ = nc_inq_format$MH();
        try {
            return (int)mh$.invokeExact(ncid, formatp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_format_extended$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$2,"nc_inq_format_extended");
    }
    /**
     * {@snippet :
     * int nc_inq_format_extended(int ncid, int* formatp, int* modep);
     * }
     */
    public static int nc_inq_format_extended(int ncid, MemorySegment formatp, MemorySegment modep) {
        var mh$ = nc_inq_format_extended$MH();
        try {
            return (int)mh$.invokeExact(ncid, formatp, modep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_def_dim$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$4,"nc_def_dim");
    }
    /**
     * {@snippet :
     * int nc_def_dim(int ncid, char* name, size_t len, int* idp);
     * }
     */
    public static int nc_def_dim(int ncid, MemorySegment name, long len, MemorySegment idp) {
        var mh$ = nc_def_dim$MH();
        try {
            return (int)mh$.invokeExact(ncid, name, len, idp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_dimid$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$5,"nc_inq_dimid");
    }
    /**
     * {@snippet :
     * int nc_inq_dimid(int ncid, char* name, int* idp);
     * }
     */
    public static int nc_inq_dimid(int ncid, MemorySegment name, MemorySegment idp) {
        var mh$ = nc_inq_dimid$MH();
        try {
            return (int)mh$.invokeExact(ncid, name, idp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_dim$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$0,"nc_inq_dim");
    }
    /**
     * {@snippet :
     * int nc_inq_dim(int ncid, int dimid, char* name, size_t* lenp);
     * }
     */
    public static int nc_inq_dim(int ncid, int dimid, MemorySegment name, MemorySegment lenp) {
        var mh$ = nc_inq_dim$MH();
        try {
            return (int)mh$.invokeExact(ncid, dimid, name, lenp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_dimname$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$1,"nc_inq_dimname");
    }
    /**
     * {@snippet :
     * int nc_inq_dimname(int ncid, int dimid, char* name);
     * }
     */
    public static int nc_inq_dimname(int ncid, int dimid, MemorySegment name) {
        var mh$ = nc_inq_dimname$MH();
        try {
            return (int)mh$.invokeExact(ncid, dimid, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_dimlen$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$2,"nc_inq_dimlen");
    }
    /**
     * {@snippet :
     * int nc_inq_dimlen(int ncid, int dimid, size_t* lenp);
     * }
     */
    public static int nc_inq_dimlen(int ncid, int dimid, MemorySegment lenp) {
        var mh$ = nc_inq_dimlen$MH();
        try {
            return (int)mh$.invokeExact(ncid, dimid, lenp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_rename_dim$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$3,"nc_rename_dim");
    }
    /**
     * {@snippet :
     * int nc_rename_dim(int ncid, int dimid, char* name);
     * }
     */
    public static int nc_rename_dim(int ncid, int dimid, MemorySegment name) {
        var mh$ = nc_rename_dim$MH();
        try {
            return (int)mh$.invokeExact(ncid, dimid, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_att$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$4,"nc_inq_att");
    }
    /**
     * {@snippet :
     * int nc_inq_att(int ncid, int varid, char* name, nc_type* xtypep, size_t* lenp);
     * }
     */
    public static int nc_inq_att(int ncid, int varid, MemorySegment name, MemorySegment xtypep, MemorySegment lenp) {
        var mh$ = nc_inq_att$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, xtypep, lenp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_attid$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$5,"nc_inq_attid");
    }
    /**
     * {@snippet :
     * int nc_inq_attid(int ncid, int varid, char* name, int* idp);
     * }
     */
    public static int nc_inq_attid(int ncid, int varid, MemorySegment name, MemorySegment idp) {
        var mh$ = nc_inq_attid$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, idp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_atttype$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$0,"nc_inq_atttype");
    }
    /**
     * {@snippet :
     * int nc_inq_atttype(int ncid, int varid, char* name, nc_type* xtypep);
     * }
     */
    public static int nc_inq_atttype(int ncid, int varid, MemorySegment name, MemorySegment xtypep) {
        var mh$ = nc_inq_atttype$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, xtypep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_attlen$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$1,"nc_inq_attlen");
    }
    /**
     * {@snippet :
     * int nc_inq_attlen(int ncid, int varid, char* name, size_t* lenp);
     * }
     */
    public static int nc_inq_attlen(int ncid, int varid, MemorySegment name, MemorySegment lenp) {
        var mh$ = nc_inq_attlen$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, lenp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_attname$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$2,"nc_inq_attname");
    }
    /**
     * {@snippet :
     * int nc_inq_attname(int ncid, int varid, int attnum, char* name);
     * }
     */
    public static int nc_inq_attname(int ncid, int varid, int attnum, MemorySegment name) {
        var mh$ = nc_inq_attname$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, attnum, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_copy_att$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$4,"nc_copy_att");
    }
    /**
     * {@snippet :
     * int nc_copy_att(int ncid_in, int varid_in, char* name, int ncid_out, int varid_out);
     * }
     */
    public static int nc_copy_att(int ncid_in, int varid_in, MemorySegment name, int ncid_out, int varid_out) {
        var mh$ = nc_copy_att$MH();
        try {
            return (int)mh$.invokeExact(ncid_in, varid_in, name, ncid_out, varid_out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_rename_att$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$5,"nc_rename_att");
    }
    /**
     * {@snippet :
     * int nc_rename_att(int ncid, int varid, char* name, char* newname);
     * }
     */
    public static int nc_rename_att(int ncid, int varid, MemorySegment name, MemorySegment newname) {
        var mh$ = nc_rename_att$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, newname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_del_att$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$0,"nc_del_att");
    }
    /**
     * {@snippet :
     * int nc_del_att(int ncid, int varid, char* name);
     * }
     */
    public static int nc_del_att(int ncid, int varid, MemorySegment name) {
        var mh$ = nc_del_att$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_att_text$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$1,"nc_put_att_text");
    }
    /**
     * {@snippet :
     * int nc_put_att_text(int ncid, int varid, char* name, size_t len, char* op);
     * }
     */
    public static int nc_put_att_text(int ncid, int varid, MemorySegment name, long len, MemorySegment op) {
        var mh$ = nc_put_att_text$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, len, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_att_text$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$2,"nc_get_att_text");
    }
    /**
     * {@snippet :
     * int nc_get_att_text(int ncid, int varid, char* name, char* ip);
     * }
     */
    public static int nc_get_att_text(int ncid, int varid, MemorySegment name, MemorySegment ip) {
        var mh$ = nc_get_att_text$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_att_string$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$3,"nc_put_att_string");
    }
    /**
     * {@snippet :
     * int nc_put_att_string(int ncid, int varid, char* name, size_t len, char** op);
     * }
     */
    public static int nc_put_att_string(int ncid, int varid, MemorySegment name, long len, MemorySegment op) {
        var mh$ = nc_put_att_string$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, len, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_att_string$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$4,"nc_get_att_string");
    }
    /**
     * {@snippet :
     * int nc_get_att_string(int ncid, int varid, char* name, char** ip);
     * }
     */
    public static int nc_get_att_string(int ncid, int varid, MemorySegment name, MemorySegment ip) {
        var mh$ = nc_get_att_string$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_att_uchar$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$5,"nc_put_att_uchar");
    }
    /**
     * {@snippet :
     * int nc_put_att_uchar(int ncid, int varid, char* name, nc_type xtype, size_t len, unsigned char* op);
     * }
     */
    public static int nc_put_att_uchar(int ncid, int varid, MemorySegment name, int xtype, long len, MemorySegment op) {
        var mh$ = nc_put_att_uchar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, xtype, len, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_att_uchar$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$0,"nc_get_att_uchar");
    }
    /**
     * {@snippet :
     * int nc_get_att_uchar(int ncid, int varid, char* name, unsigned char* ip);
     * }
     */
    public static int nc_get_att_uchar(int ncid, int varid, MemorySegment name, MemorySegment ip) {
        var mh$ = nc_get_att_uchar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_att_schar$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$1,"nc_put_att_schar");
    }
    /**
     * {@snippet :
     * int nc_put_att_schar(int ncid, int varid, char* name, nc_type xtype, size_t len, signed char* op);
     * }
     */
    public static int nc_put_att_schar(int ncid, int varid, MemorySegment name, int xtype, long len, MemorySegment op) {
        var mh$ = nc_put_att_schar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, xtype, len, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_att_schar$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$2,"nc_get_att_schar");
    }
    /**
     * {@snippet :
     * int nc_get_att_schar(int ncid, int varid, char* name, signed char* ip);
     * }
     */
    public static int nc_get_att_schar(int ncid, int varid, MemorySegment name, MemorySegment ip) {
        var mh$ = nc_get_att_schar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_att_short$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$3,"nc_put_att_short");
    }
    /**
     * {@snippet :
     * int nc_put_att_short(int ncid, int varid, char* name, nc_type xtype, size_t len, short* op);
     * }
     */
    public static int nc_put_att_short(int ncid, int varid, MemorySegment name, int xtype, long len, MemorySegment op) {
        var mh$ = nc_put_att_short$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, xtype, len, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_att_short$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$4,"nc_get_att_short");
    }
    /**
     * {@snippet :
     * int nc_get_att_short(int ncid, int varid, char* name, short* ip);
     * }
     */
    public static int nc_get_att_short(int ncid, int varid, MemorySegment name, MemorySegment ip) {
        var mh$ = nc_get_att_short$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_att_int$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$5,"nc_put_att_int");
    }
    /**
     * {@snippet :
     * int nc_put_att_int(int ncid, int varid, char* name, nc_type xtype, size_t len, int* op);
     * }
     */
    public static int nc_put_att_int(int ncid, int varid, MemorySegment name, int xtype, long len, MemorySegment op) {
        var mh$ = nc_put_att_int$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, xtype, len, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_att_int$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$0,"nc_get_att_int");
    }
    /**
     * {@snippet :
     * int nc_get_att_int(int ncid, int varid, char* name, int* ip);
     * }
     */
    public static int nc_get_att_int(int ncid, int varid, MemorySegment name, MemorySegment ip) {
        var mh$ = nc_get_att_int$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_att_long$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$1,"nc_put_att_long");
    }
    /**
     * {@snippet :
     * int nc_put_att_long(int ncid, int varid, char* name, nc_type xtype, size_t len, long* op);
     * }
     */
    public static int nc_put_att_long(int ncid, int varid, MemorySegment name, int xtype, long len, MemorySegment op) {
        var mh$ = nc_put_att_long$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, xtype, len, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_att_long$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$2,"nc_get_att_long");
    }
    /**
     * {@snippet :
     * int nc_get_att_long(int ncid, int varid, char* name, long* ip);
     * }
     */
    public static int nc_get_att_long(int ncid, int varid, MemorySegment name, MemorySegment ip) {
        var mh$ = nc_get_att_long$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_att_float$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$3,"nc_put_att_float");
    }
    /**
     * {@snippet :
     * int nc_put_att_float(int ncid, int varid, char* name, nc_type xtype, size_t len, float* op);
     * }
     */
    public static int nc_put_att_float(int ncid, int varid, MemorySegment name, int xtype, long len, MemorySegment op) {
        var mh$ = nc_put_att_float$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, xtype, len, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_att_float$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$4,"nc_get_att_float");
    }
    /**
     * {@snippet :
     * int nc_get_att_float(int ncid, int varid, char* name, float* ip);
     * }
     */
    public static int nc_get_att_float(int ncid, int varid, MemorySegment name, MemorySegment ip) {
        var mh$ = nc_get_att_float$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_att_double$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$5,"nc_put_att_double");
    }
    /**
     * {@snippet :
     * int nc_put_att_double(int ncid, int varid, char* name, nc_type xtype, size_t len, double* op);
     * }
     */
    public static int nc_put_att_double(int ncid, int varid, MemorySegment name, int xtype, long len, MemorySegment op) {
        var mh$ = nc_put_att_double$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, xtype, len, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_att_double$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$0,"nc_get_att_double");
    }
    /**
     * {@snippet :
     * int nc_get_att_double(int ncid, int varid, char* name, double* ip);
     * }
     */
    public static int nc_get_att_double(int ncid, int varid, MemorySegment name, MemorySegment ip) {
        var mh$ = nc_get_att_double$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_att_ushort$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$1,"nc_put_att_ushort");
    }
    /**
     * {@snippet :
     * int nc_put_att_ushort(int ncid, int varid, char* name, nc_type xtype, size_t len, unsigned short* op);
     * }
     */
    public static int nc_put_att_ushort(int ncid, int varid, MemorySegment name, int xtype, long len, MemorySegment op) {
        var mh$ = nc_put_att_ushort$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, xtype, len, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_att_ushort$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$2,"nc_get_att_ushort");
    }
    /**
     * {@snippet :
     * int nc_get_att_ushort(int ncid, int varid, char* name, unsigned short* ip);
     * }
     */
    public static int nc_get_att_ushort(int ncid, int varid, MemorySegment name, MemorySegment ip) {
        var mh$ = nc_get_att_ushort$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_att_uint$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$3,"nc_put_att_uint");
    }
    /**
     * {@snippet :
     * int nc_put_att_uint(int ncid, int varid, char* name, nc_type xtype, size_t len, unsigned int* op);
     * }
     */
    public static int nc_put_att_uint(int ncid, int varid, MemorySegment name, int xtype, long len, MemorySegment op) {
        var mh$ = nc_put_att_uint$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, xtype, len, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_att_uint$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$4,"nc_get_att_uint");
    }
    /**
     * {@snippet :
     * int nc_get_att_uint(int ncid, int varid, char* name, unsigned int* ip);
     * }
     */
    public static int nc_get_att_uint(int ncid, int varid, MemorySegment name, MemorySegment ip) {
        var mh$ = nc_get_att_uint$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_att_longlong$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$5,"nc_put_att_longlong");
    }
    /**
     * {@snippet :
     * int nc_put_att_longlong(int ncid, int varid, char* name, nc_type xtype, size_t len, long long* op);
     * }
     */
    public static int nc_put_att_longlong(int ncid, int varid, MemorySegment name, int xtype, long len, MemorySegment op) {
        var mh$ = nc_put_att_longlong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, xtype, len, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_att_longlong$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$0,"nc_get_att_longlong");
    }
    /**
     * {@snippet :
     * int nc_get_att_longlong(int ncid, int varid, char* name, long long* ip);
     * }
     */
    public static int nc_get_att_longlong(int ncid, int varid, MemorySegment name, MemorySegment ip) {
        var mh$ = nc_get_att_longlong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_att_ulonglong$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$1,"nc_put_att_ulonglong");
    }
    /**
     * {@snippet :
     * int nc_put_att_ulonglong(int ncid, int varid, char* name, nc_type xtype, size_t len, unsigned long long* op);
     * }
     */
    public static int nc_put_att_ulonglong(int ncid, int varid, MemorySegment name, int xtype, long len, MemorySegment op) {
        var mh$ = nc_put_att_ulonglong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, xtype, len, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_att_ulonglong$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$2,"nc_get_att_ulonglong");
    }
    /**
     * {@snippet :
     * int nc_get_att_ulonglong(int ncid, int varid, char* name, unsigned long long* ip);
     * }
     */
    public static int nc_get_att_ulonglong(int ncid, int varid, MemorySegment name, MemorySegment ip) {
        var mh$ = nc_get_att_ulonglong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_def_var$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$4,"nc_def_var");
    }
    /**
     * {@snippet :
     * int nc_def_var(int ncid, char* name, nc_type xtype, int ndims, int* dimidsp, int* varidp);
     * }
     */
    public static int nc_def_var(int ncid, MemorySegment name, int xtype, int ndims, MemorySegment dimidsp, MemorySegment varidp) {
        var mh$ = nc_def_var$MH();
        try {
            return (int)mh$.invokeExact(ncid, name, xtype, ndims, dimidsp, varidp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_var$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$5,"nc_inq_var");
    }
    /**
     * {@snippet :
     * int nc_inq_var(int ncid, int varid, char* name, nc_type* xtypep, int* ndimsp, int* dimidsp, int* nattsp);
     * }
     */
    public static int nc_inq_var(int ncid, int varid, MemorySegment name, MemorySegment xtypep, MemorySegment ndimsp, MemorySegment dimidsp, MemorySegment nattsp) {
        var mh$ = nc_inq_var$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, xtypep, ndimsp, dimidsp, nattsp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_varid$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$0,"nc_inq_varid");
    }
    /**
     * {@snippet :
     * int nc_inq_varid(int ncid, char* name, int* varidp);
     * }
     */
    public static int nc_inq_varid(int ncid, MemorySegment name, MemorySegment varidp) {
        var mh$ = nc_inq_varid$MH();
        try {
            return (int)mh$.invokeExact(ncid, name, varidp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_varname$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$1,"nc_inq_varname");
    }
    /**
     * {@snippet :
     * int nc_inq_varname(int ncid, int varid, char* name);
     * }
     */
    public static int nc_inq_varname(int ncid, int varid, MemorySegment name) {
        var mh$ = nc_inq_varname$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_vartype$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$2,"nc_inq_vartype");
    }
    /**
     * {@snippet :
     * int nc_inq_vartype(int ncid, int varid, nc_type* xtypep);
     * }
     */
    public static int nc_inq_vartype(int ncid, int varid, MemorySegment xtypep) {
        var mh$ = nc_inq_vartype$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, xtypep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_varndims$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$3,"nc_inq_varndims");
    }
    /**
     * {@snippet :
     * int nc_inq_varndims(int ncid, int varid, int* ndimsp);
     * }
     */
    public static int nc_inq_varndims(int ncid, int varid, MemorySegment ndimsp) {
        var mh$ = nc_inq_varndims$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, ndimsp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_vardimid$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$4,"nc_inq_vardimid");
    }
    /**
     * {@snippet :
     * int nc_inq_vardimid(int ncid, int varid, int* dimidsp);
     * }
     */
    public static int nc_inq_vardimid(int ncid, int varid, MemorySegment dimidsp) {
        var mh$ = nc_inq_vardimid$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, dimidsp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_varnatts$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$5,"nc_inq_varnatts");
    }
    /**
     * {@snippet :
     * int nc_inq_varnatts(int ncid, int varid, int* nattsp);
     * }
     */
    public static int nc_inq_varnatts(int ncid, int varid, MemorySegment nattsp) {
        var mh$ = nc_inq_varnatts$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, nattsp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_rename_var$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$0,"nc_rename_var");
    }
    /**
     * {@snippet :
     * int nc_rename_var(int ncid, int varid, char* name);
     * }
     */
    public static int nc_rename_var(int ncid, int varid, MemorySegment name) {
        var mh$ = nc_rename_var$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_copy_var$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$1,"nc_copy_var");
    }
    /**
     * {@snippet :
     * int nc_copy_var(int ncid_in, int varid, int ncid_out);
     * }
     */
    public static int nc_copy_var(int ncid_in, int varid, int ncid_out) {
        var mh$ = nc_copy_var$MH();
        try {
            return (int)mh$.invokeExact(ncid_in, varid, ncid_out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var1_text$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$2,"nc_put_var1_text");
    }
    /**
     * {@snippet :
     * int nc_put_var1_text(int ncid, int varid, const size_t* indexp, char* op);
     * }
     */
    public static int nc_put_var1_text(int ncid, int varid, MemorySegment indexp, MemorySegment op) {
        var mh$ = nc_put_var1_text$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var1_text$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$3,"nc_get_var1_text");
    }
    /**
     * {@snippet :
     * int nc_get_var1_text(int ncid, int varid, const size_t* indexp, char* ip);
     * }
     */
    public static int nc_get_var1_text(int ncid, int varid, MemorySegment indexp, MemorySegment ip) {
        var mh$ = nc_get_var1_text$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var1_uchar$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$4,"nc_put_var1_uchar");
    }
    /**
     * {@snippet :
     * int nc_put_var1_uchar(int ncid, int varid, const size_t* indexp, unsigned char* op);
     * }
     */
    public static int nc_put_var1_uchar(int ncid, int varid, MemorySegment indexp, MemorySegment op) {
        var mh$ = nc_put_var1_uchar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var1_uchar$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$5,"nc_get_var1_uchar");
    }
    /**
     * {@snippet :
     * int nc_get_var1_uchar(int ncid, int varid, const size_t* indexp, unsigned char* ip);
     * }
     */
    public static int nc_get_var1_uchar(int ncid, int varid, MemorySegment indexp, MemorySegment ip) {
        var mh$ = nc_get_var1_uchar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var1_schar$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$0,"nc_put_var1_schar");
    }
    /**
     * {@snippet :
     * int nc_put_var1_schar(int ncid, int varid, const size_t* indexp, signed char* op);
     * }
     */
    public static int nc_put_var1_schar(int ncid, int varid, MemorySegment indexp, MemorySegment op) {
        var mh$ = nc_put_var1_schar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var1_schar$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$1,"nc_get_var1_schar");
    }
    /**
     * {@snippet :
     * int nc_get_var1_schar(int ncid, int varid, const size_t* indexp, signed char* ip);
     * }
     */
    public static int nc_get_var1_schar(int ncid, int varid, MemorySegment indexp, MemorySegment ip) {
        var mh$ = nc_get_var1_schar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var1_short$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$2,"nc_put_var1_short");
    }
    /**
     * {@snippet :
     * int nc_put_var1_short(int ncid, int varid, const size_t* indexp, short* op);
     * }
     */
    public static int nc_put_var1_short(int ncid, int varid, MemorySegment indexp, MemorySegment op) {
        var mh$ = nc_put_var1_short$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var1_short$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$3,"nc_get_var1_short");
    }
    /**
     * {@snippet :
     * int nc_get_var1_short(int ncid, int varid, const size_t* indexp, short* ip);
     * }
     */
    public static int nc_get_var1_short(int ncid, int varid, MemorySegment indexp, MemorySegment ip) {
        var mh$ = nc_get_var1_short$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var1_int$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$4,"nc_put_var1_int");
    }
    /**
     * {@snippet :
     * int nc_put_var1_int(int ncid, int varid, const size_t* indexp, int* op);
     * }
     */
    public static int nc_put_var1_int(int ncid, int varid, MemorySegment indexp, MemorySegment op) {
        var mh$ = nc_put_var1_int$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var1_int$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$5,"nc_get_var1_int");
    }
    /**
     * {@snippet :
     * int nc_get_var1_int(int ncid, int varid, const size_t* indexp, int* ip);
     * }
     */
    public static int nc_get_var1_int(int ncid, int varid, MemorySegment indexp, MemorySegment ip) {
        var mh$ = nc_get_var1_int$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var1_long$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$0,"nc_put_var1_long");
    }
    /**
     * {@snippet :
     * int nc_put_var1_long(int ncid, int varid, const size_t* indexp, long* op);
     * }
     */
    public static int nc_put_var1_long(int ncid, int varid, MemorySegment indexp, MemorySegment op) {
        var mh$ = nc_put_var1_long$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var1_long$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$1,"nc_get_var1_long");
    }
    /**
     * {@snippet :
     * int nc_get_var1_long(int ncid, int varid, const size_t* indexp, long* ip);
     * }
     */
    public static int nc_get_var1_long(int ncid, int varid, MemorySegment indexp, MemorySegment ip) {
        var mh$ = nc_get_var1_long$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var1_float$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$2,"nc_put_var1_float");
    }
    /**
     * {@snippet :
     * int nc_put_var1_float(int ncid, int varid, const size_t* indexp, float* op);
     * }
     */
    public static int nc_put_var1_float(int ncid, int varid, MemorySegment indexp, MemorySegment op) {
        var mh$ = nc_put_var1_float$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var1_float$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$3,"nc_get_var1_float");
    }
    /**
     * {@snippet :
     * int nc_get_var1_float(int ncid, int varid, const size_t* indexp, float* ip);
     * }
     */
    public static int nc_get_var1_float(int ncid, int varid, MemorySegment indexp, MemorySegment ip) {
        var mh$ = nc_get_var1_float$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var1_double$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$4,"nc_put_var1_double");
    }
    /**
     * {@snippet :
     * int nc_put_var1_double(int ncid, int varid, const size_t* indexp, double* op);
     * }
     */
    public static int nc_put_var1_double(int ncid, int varid, MemorySegment indexp, MemorySegment op) {
        var mh$ = nc_put_var1_double$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var1_double$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$5,"nc_get_var1_double");
    }
    /**
     * {@snippet :
     * int nc_get_var1_double(int ncid, int varid, const size_t* indexp, double* ip);
     * }
     */
    public static int nc_get_var1_double(int ncid, int varid, MemorySegment indexp, MemorySegment ip) {
        var mh$ = nc_get_var1_double$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var1_ushort$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$0,"nc_put_var1_ushort");
    }
    /**
     * {@snippet :
     * int nc_put_var1_ushort(int ncid, int varid, const size_t* indexp, unsigned short* op);
     * }
     */
    public static int nc_put_var1_ushort(int ncid, int varid, MemorySegment indexp, MemorySegment op) {
        var mh$ = nc_put_var1_ushort$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var1_ushort$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$1,"nc_get_var1_ushort");
    }
    /**
     * {@snippet :
     * int nc_get_var1_ushort(int ncid, int varid, const size_t* indexp, unsigned short* ip);
     * }
     */
    public static int nc_get_var1_ushort(int ncid, int varid, MemorySegment indexp, MemorySegment ip) {
        var mh$ = nc_get_var1_ushort$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var1_uint$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$2,"nc_put_var1_uint");
    }
    /**
     * {@snippet :
     * int nc_put_var1_uint(int ncid, int varid, const size_t* indexp, unsigned int* op);
     * }
     */
    public static int nc_put_var1_uint(int ncid, int varid, MemorySegment indexp, MemorySegment op) {
        var mh$ = nc_put_var1_uint$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var1_uint$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$3,"nc_get_var1_uint");
    }
    /**
     * {@snippet :
     * int nc_get_var1_uint(int ncid, int varid, const size_t* indexp, unsigned int* ip);
     * }
     */
    public static int nc_get_var1_uint(int ncid, int varid, MemorySegment indexp, MemorySegment ip) {
        var mh$ = nc_get_var1_uint$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var1_longlong$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$4,"nc_put_var1_longlong");
    }
    /**
     * {@snippet :
     * int nc_put_var1_longlong(int ncid, int varid, const size_t* indexp, long long* op);
     * }
     */
    public static int nc_put_var1_longlong(int ncid, int varid, MemorySegment indexp, MemorySegment op) {
        var mh$ = nc_put_var1_longlong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var1_longlong$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$5,"nc_get_var1_longlong");
    }
    /**
     * {@snippet :
     * int nc_get_var1_longlong(int ncid, int varid, const size_t* indexp, long long* ip);
     * }
     */
    public static int nc_get_var1_longlong(int ncid, int varid, MemorySegment indexp, MemorySegment ip) {
        var mh$ = nc_get_var1_longlong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var1_ulonglong$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$0,"nc_put_var1_ulonglong");
    }
    /**
     * {@snippet :
     * int nc_put_var1_ulonglong(int ncid, int varid, const size_t* indexp, unsigned long long* op);
     * }
     */
    public static int nc_put_var1_ulonglong(int ncid, int varid, MemorySegment indexp, MemorySegment op) {
        var mh$ = nc_put_var1_ulonglong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var1_ulonglong$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$1,"nc_get_var1_ulonglong");
    }
    /**
     * {@snippet :
     * int nc_get_var1_ulonglong(int ncid, int varid, const size_t* indexp, unsigned long long* ip);
     * }
     */
    public static int nc_get_var1_ulonglong(int ncid, int varid, MemorySegment indexp, MemorySegment ip) {
        var mh$ = nc_get_var1_ulonglong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var1_string$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$2,"nc_put_var1_string");
    }
    /**
     * {@snippet :
     * int nc_put_var1_string(int ncid, int varid, const size_t* indexp, char** op);
     * }
     */
    public static int nc_put_var1_string(int ncid, int varid, MemorySegment indexp, MemorySegment op) {
        var mh$ = nc_put_var1_string$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var1_string$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$3,"nc_get_var1_string");
    }
    /**
     * {@snippet :
     * int nc_get_var1_string(int ncid, int varid, const size_t* indexp, char** ip);
     * }
     */
    public static int nc_get_var1_string(int ncid, int varid, MemorySegment indexp, MemorySegment ip) {
        var mh$ = nc_get_var1_string$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vara_text$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$4,"nc_put_vara_text");
    }
    /**
     * {@snippet :
     * int nc_put_vara_text(int ncid, int varid, const size_t* startp, const size_t* countp, char* op);
     * }
     */
    public static int nc_put_vara_text(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment op) {
        var mh$ = nc_put_vara_text$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vara_text$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$5,"nc_get_vara_text");
    }
    /**
     * {@snippet :
     * int nc_get_vara_text(int ncid, int varid, const size_t* startp, const size_t* countp, char* ip);
     * }
     */
    public static int nc_get_vara_text(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment ip) {
        var mh$ = nc_get_vara_text$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vara_uchar$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$0,"nc_put_vara_uchar");
    }
    /**
     * {@snippet :
     * int nc_put_vara_uchar(int ncid, int varid, const size_t* startp, const size_t* countp, unsigned char* op);
     * }
     */
    public static int nc_put_vara_uchar(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment op) {
        var mh$ = nc_put_vara_uchar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vara_uchar$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$1,"nc_get_vara_uchar");
    }
    /**
     * {@snippet :
     * int nc_get_vara_uchar(int ncid, int varid, const size_t* startp, const size_t* countp, unsigned char* ip);
     * }
     */
    public static int nc_get_vara_uchar(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment ip) {
        var mh$ = nc_get_vara_uchar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vara_schar$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$2,"nc_put_vara_schar");
    }
    /**
     * {@snippet :
     * int nc_put_vara_schar(int ncid, int varid, const size_t* startp, const size_t* countp, signed char* op);
     * }
     */
    public static int nc_put_vara_schar(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment op) {
        var mh$ = nc_put_vara_schar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vara_schar$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$3,"nc_get_vara_schar");
    }
    /**
     * {@snippet :
     * int nc_get_vara_schar(int ncid, int varid, const size_t* startp, const size_t* countp, signed char* ip);
     * }
     */
    public static int nc_get_vara_schar(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment ip) {
        var mh$ = nc_get_vara_schar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vara_short$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$4,"nc_put_vara_short");
    }
    /**
     * {@snippet :
     * int nc_put_vara_short(int ncid, int varid, const size_t* startp, const size_t* countp, short* op);
     * }
     */
    public static int nc_put_vara_short(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment op) {
        var mh$ = nc_put_vara_short$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vara_short$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$5,"nc_get_vara_short");
    }
    /**
     * {@snippet :
     * int nc_get_vara_short(int ncid, int varid, const size_t* startp, const size_t* countp, short* ip);
     * }
     */
    public static int nc_get_vara_short(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment ip) {
        var mh$ = nc_get_vara_short$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vara_int$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$0,"nc_put_vara_int");
    }
    /**
     * {@snippet :
     * int nc_put_vara_int(int ncid, int varid, const size_t* startp, const size_t* countp, int* op);
     * }
     */
    public static int nc_put_vara_int(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment op) {
        var mh$ = nc_put_vara_int$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vara_int$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$1,"nc_get_vara_int");
    }
    /**
     * {@snippet :
     * int nc_get_vara_int(int ncid, int varid, const size_t* startp, const size_t* countp, int* ip);
     * }
     */
    public static int nc_get_vara_int(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment ip) {
        var mh$ = nc_get_vara_int$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vara_long$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$2,"nc_put_vara_long");
    }
    /**
     * {@snippet :
     * int nc_put_vara_long(int ncid, int varid, const size_t* startp, const size_t* countp, long* op);
     * }
     */
    public static int nc_put_vara_long(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment op) {
        var mh$ = nc_put_vara_long$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vara_long$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$3,"nc_get_vara_long");
    }
    /**
     * {@snippet :
     * int nc_get_vara_long(int ncid, int varid, const size_t* startp, const size_t* countp, long* ip);
     * }
     */
    public static int nc_get_vara_long(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment ip) {
        var mh$ = nc_get_vara_long$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vara_float$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$4,"nc_put_vara_float");
    }
    /**
     * {@snippet :
     * int nc_put_vara_float(int ncid, int varid, const size_t* startp, const size_t* countp, float* op);
     * }
     */
    public static int nc_put_vara_float(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment op) {
        var mh$ = nc_put_vara_float$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vara_float$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$5,"nc_get_vara_float");
    }
    /**
     * {@snippet :
     * int nc_get_vara_float(int ncid, int varid, const size_t* startp, const size_t* countp, float* ip);
     * }
     */
    public static int nc_get_vara_float(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment ip) {
        var mh$ = nc_get_vara_float$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vara_double$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$0,"nc_put_vara_double");
    }
    /**
     * {@snippet :
     * int nc_put_vara_double(int ncid, int varid, const size_t* startp, const size_t* countp, double* op);
     * }
     */
    public static int nc_put_vara_double(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment op) {
        var mh$ = nc_put_vara_double$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vara_double$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$1,"nc_get_vara_double");
    }
    /**
     * {@snippet :
     * int nc_get_vara_double(int ncid, int varid, const size_t* startp, const size_t* countp, double* ip);
     * }
     */
    public static int nc_get_vara_double(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment ip) {
        var mh$ = nc_get_vara_double$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vara_ushort$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$2,"nc_put_vara_ushort");
    }
    /**
     * {@snippet :
     * int nc_put_vara_ushort(int ncid, int varid, const size_t* startp, const size_t* countp, unsigned short* op);
     * }
     */
    public static int nc_put_vara_ushort(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment op) {
        var mh$ = nc_put_vara_ushort$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vara_ushort$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$3,"nc_get_vara_ushort");
    }
    /**
     * {@snippet :
     * int nc_get_vara_ushort(int ncid, int varid, const size_t* startp, const size_t* countp, unsigned short* ip);
     * }
     */
    public static int nc_get_vara_ushort(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment ip) {
        var mh$ = nc_get_vara_ushort$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vara_uint$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$4,"nc_put_vara_uint");
    }
    /**
     * {@snippet :
     * int nc_put_vara_uint(int ncid, int varid, const size_t* startp, const size_t* countp, unsigned int* op);
     * }
     */
    public static int nc_put_vara_uint(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment op) {
        var mh$ = nc_put_vara_uint$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vara_uint$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$5,"nc_get_vara_uint");
    }
    /**
     * {@snippet :
     * int nc_get_vara_uint(int ncid, int varid, const size_t* startp, const size_t* countp, unsigned int* ip);
     * }
     */
    public static int nc_get_vara_uint(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment ip) {
        var mh$ = nc_get_vara_uint$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vara_longlong$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$0,"nc_put_vara_longlong");
    }
    /**
     * {@snippet :
     * int nc_put_vara_longlong(int ncid, int varid, const size_t* startp, const size_t* countp, long long* op);
     * }
     */
    public static int nc_put_vara_longlong(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment op) {
        var mh$ = nc_put_vara_longlong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vara_longlong$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$1,"nc_get_vara_longlong");
    }
    /**
     * {@snippet :
     * int nc_get_vara_longlong(int ncid, int varid, const size_t* startp, const size_t* countp, long long* ip);
     * }
     */
    public static int nc_get_vara_longlong(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment ip) {
        var mh$ = nc_get_vara_longlong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vara_ulonglong$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$2,"nc_put_vara_ulonglong");
    }
    /**
     * {@snippet :
     * int nc_put_vara_ulonglong(int ncid, int varid, const size_t* startp, const size_t* countp, unsigned long long* op);
     * }
     */
    public static int nc_put_vara_ulonglong(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment op) {
        var mh$ = nc_put_vara_ulonglong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vara_ulonglong$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$3,"nc_get_vara_ulonglong");
    }
    /**
     * {@snippet :
     * int nc_get_vara_ulonglong(int ncid, int varid, const size_t* startp, const size_t* countp, unsigned long long* ip);
     * }
     */
    public static int nc_get_vara_ulonglong(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment ip) {
        var mh$ = nc_get_vara_ulonglong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vara_string$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$4,"nc_put_vara_string");
    }
    /**
     * {@snippet :
     * int nc_put_vara_string(int ncid, int varid, const size_t* startp, const size_t* countp, char** op);
     * }
     */
    public static int nc_put_vara_string(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment op) {
        var mh$ = nc_put_vara_string$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vara_string$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$5,"nc_get_vara_string");
    }
    /**
     * {@snippet :
     * int nc_get_vara_string(int ncid, int varid, const size_t* startp, const size_t* countp, char** ip);
     * }
     */
    public static int nc_get_vara_string(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment ip) {
        var mh$ = nc_get_vara_string$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vars_text$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$0,"nc_put_vars_text");
    }
    /**
     * {@snippet :
     * int nc_put_vars_text(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, char* op);
     * }
     */
    public static int nc_put_vars_text(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment op) {
        var mh$ = nc_put_vars_text$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vars_text$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$1,"nc_get_vars_text");
    }
    /**
     * {@snippet :
     * int nc_get_vars_text(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, char* ip);
     * }
     */
    public static int nc_get_vars_text(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment ip) {
        var mh$ = nc_get_vars_text$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vars_uchar$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$2,"nc_put_vars_uchar");
    }
    /**
     * {@snippet :
     * int nc_put_vars_uchar(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, unsigned char* op);
     * }
     */
    public static int nc_put_vars_uchar(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment op) {
        var mh$ = nc_put_vars_uchar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vars_uchar$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$3,"nc_get_vars_uchar");
    }
    /**
     * {@snippet :
     * int nc_get_vars_uchar(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, unsigned char* ip);
     * }
     */
    public static int nc_get_vars_uchar(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment ip) {
        var mh$ = nc_get_vars_uchar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vars_schar$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$4,"nc_put_vars_schar");
    }
    /**
     * {@snippet :
     * int nc_put_vars_schar(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, signed char* op);
     * }
     */
    public static int nc_put_vars_schar(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment op) {
        var mh$ = nc_put_vars_schar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vars_schar$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$5,"nc_get_vars_schar");
    }
    /**
     * {@snippet :
     * int nc_get_vars_schar(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, signed char* ip);
     * }
     */
    public static int nc_get_vars_schar(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment ip) {
        var mh$ = nc_get_vars_schar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vars_short$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$0,"nc_put_vars_short");
    }
    /**
     * {@snippet :
     * int nc_put_vars_short(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, short* op);
     * }
     */
    public static int nc_put_vars_short(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment op) {
        var mh$ = nc_put_vars_short$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vars_short$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$1,"nc_get_vars_short");
    }
    /**
     * {@snippet :
     * int nc_get_vars_short(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, short* ip);
     * }
     */
    public static int nc_get_vars_short(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment ip) {
        var mh$ = nc_get_vars_short$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vars_int$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$2,"nc_put_vars_int");
    }
    /**
     * {@snippet :
     * int nc_put_vars_int(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, int* op);
     * }
     */
    public static int nc_put_vars_int(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment op) {
        var mh$ = nc_put_vars_int$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vars_int$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$3,"nc_get_vars_int");
    }
    /**
     * {@snippet :
     * int nc_get_vars_int(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, int* ip);
     * }
     */
    public static int nc_get_vars_int(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment ip) {
        var mh$ = nc_get_vars_int$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vars_long$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$4,"nc_put_vars_long");
    }
    /**
     * {@snippet :
     * int nc_put_vars_long(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, long* op);
     * }
     */
    public static int nc_put_vars_long(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment op) {
        var mh$ = nc_put_vars_long$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vars_long$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$5,"nc_get_vars_long");
    }
    /**
     * {@snippet :
     * int nc_get_vars_long(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, long* ip);
     * }
     */
    public static int nc_get_vars_long(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment ip) {
        var mh$ = nc_get_vars_long$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vars_float$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$0,"nc_put_vars_float");
    }
    /**
     * {@snippet :
     * int nc_put_vars_float(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, float* op);
     * }
     */
    public static int nc_put_vars_float(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment op) {
        var mh$ = nc_put_vars_float$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vars_float$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$1,"nc_get_vars_float");
    }
    /**
     * {@snippet :
     * int nc_get_vars_float(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, float* ip);
     * }
     */
    public static int nc_get_vars_float(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment ip) {
        var mh$ = nc_get_vars_float$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vars_double$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$2,"nc_put_vars_double");
    }
    /**
     * {@snippet :
     * int nc_put_vars_double(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, double* op);
     * }
     */
    public static int nc_put_vars_double(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment op) {
        var mh$ = nc_put_vars_double$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vars_double$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$3,"nc_get_vars_double");
    }
    /**
     * {@snippet :
     * int nc_get_vars_double(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, double* ip);
     * }
     */
    public static int nc_get_vars_double(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment ip) {
        var mh$ = nc_get_vars_double$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vars_ushort$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$4,"nc_put_vars_ushort");
    }
    /**
     * {@snippet :
     * int nc_put_vars_ushort(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, unsigned short* op);
     * }
     */
    public static int nc_put_vars_ushort(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment op) {
        var mh$ = nc_put_vars_ushort$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vars_ushort$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$5,"nc_get_vars_ushort");
    }
    /**
     * {@snippet :
     * int nc_get_vars_ushort(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, unsigned short* ip);
     * }
     */
    public static int nc_get_vars_ushort(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment ip) {
        var mh$ = nc_get_vars_ushort$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vars_uint$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$0,"nc_put_vars_uint");
    }
    /**
     * {@snippet :
     * int nc_put_vars_uint(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, unsigned int* op);
     * }
     */
    public static int nc_put_vars_uint(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment op) {
        var mh$ = nc_put_vars_uint$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vars_uint$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$1,"nc_get_vars_uint");
    }
    /**
     * {@snippet :
     * int nc_get_vars_uint(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, unsigned int* ip);
     * }
     */
    public static int nc_get_vars_uint(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment ip) {
        var mh$ = nc_get_vars_uint$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vars_longlong$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$2,"nc_put_vars_longlong");
    }
    /**
     * {@snippet :
     * int nc_put_vars_longlong(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, long long* op);
     * }
     */
    public static int nc_put_vars_longlong(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment op) {
        var mh$ = nc_put_vars_longlong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vars_longlong$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$3,"nc_get_vars_longlong");
    }
    /**
     * {@snippet :
     * int nc_get_vars_longlong(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, long long* ip);
     * }
     */
    public static int nc_get_vars_longlong(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment ip) {
        var mh$ = nc_get_vars_longlong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vars_ulonglong$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$4,"nc_put_vars_ulonglong");
    }
    /**
     * {@snippet :
     * int nc_put_vars_ulonglong(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, unsigned long long* op);
     * }
     */
    public static int nc_put_vars_ulonglong(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment op) {
        var mh$ = nc_put_vars_ulonglong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vars_ulonglong$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$5,"nc_get_vars_ulonglong");
    }
    /**
     * {@snippet :
     * int nc_get_vars_ulonglong(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, unsigned long long* ip);
     * }
     */
    public static int nc_get_vars_ulonglong(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment ip) {
        var mh$ = nc_get_vars_ulonglong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vars_string$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$0,"nc_put_vars_string");
    }
    /**
     * {@snippet :
     * int nc_put_vars_string(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, char** op);
     * }
     */
    public static int nc_put_vars_string(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment op) {
        var mh$ = nc_put_vars_string$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vars_string$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$1,"nc_get_vars_string");
    }
    /**
     * {@snippet :
     * int nc_get_vars_string(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, char** ip);
     * }
     */
    public static int nc_get_vars_string(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment ip) {
        var mh$ = nc_get_vars_string$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_varm_text$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$2,"nc_put_varm_text");
    }
    /**
     * {@snippet :
     * int nc_put_varm_text(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, const ptrdiff_t* imapp, char* op);
     * }
     */
    public static int nc_put_varm_text(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment imapp, MemorySegment op) {
        var mh$ = nc_put_varm_text$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_varm_text$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$3,"nc_get_varm_text");
    }
    /**
     * {@snippet :
     * int nc_get_varm_text(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, const ptrdiff_t* imapp, char* ip);
     * }
     */
    public static int nc_get_varm_text(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment imapp, MemorySegment ip) {
        var mh$ = nc_get_varm_text$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_varm_uchar$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$4,"nc_put_varm_uchar");
    }
    /**
     * {@snippet :
     * int nc_put_varm_uchar(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, const ptrdiff_t* imapp, unsigned char* op);
     * }
     */
    public static int nc_put_varm_uchar(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment imapp, MemorySegment op) {
        var mh$ = nc_put_varm_uchar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_varm_uchar$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$5,"nc_get_varm_uchar");
    }
    /**
     * {@snippet :
     * int nc_get_varm_uchar(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, const ptrdiff_t* imapp, unsigned char* ip);
     * }
     */
    public static int nc_get_varm_uchar(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment imapp, MemorySegment ip) {
        var mh$ = nc_get_varm_uchar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_varm_schar$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$0,"nc_put_varm_schar");
    }
    /**
     * {@snippet :
     * int nc_put_varm_schar(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, const ptrdiff_t* imapp, signed char* op);
     * }
     */
    public static int nc_put_varm_schar(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment imapp, MemorySegment op) {
        var mh$ = nc_put_varm_schar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_varm_schar$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$1,"nc_get_varm_schar");
    }
    /**
     * {@snippet :
     * int nc_get_varm_schar(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, const ptrdiff_t* imapp, signed char* ip);
     * }
     */
    public static int nc_get_varm_schar(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment imapp, MemorySegment ip) {
        var mh$ = nc_get_varm_schar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_varm_short$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$2,"nc_put_varm_short");
    }
    /**
     * {@snippet :
     * int nc_put_varm_short(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, const ptrdiff_t* imapp, short* op);
     * }
     */
    public static int nc_put_varm_short(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment imapp, MemorySegment op) {
        var mh$ = nc_put_varm_short$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_varm_short$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$3,"nc_get_varm_short");
    }
    /**
     * {@snippet :
     * int nc_get_varm_short(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, const ptrdiff_t* imapp, short* ip);
     * }
     */
    public static int nc_get_varm_short(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment imapp, MemorySegment ip) {
        var mh$ = nc_get_varm_short$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_varm_int$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$4,"nc_put_varm_int");
    }
    /**
     * {@snippet :
     * int nc_put_varm_int(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, const ptrdiff_t* imapp, int* op);
     * }
     */
    public static int nc_put_varm_int(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment imapp, MemorySegment op) {
        var mh$ = nc_put_varm_int$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_varm_int$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$5,"nc_get_varm_int");
    }
    /**
     * {@snippet :
     * int nc_get_varm_int(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, const ptrdiff_t* imapp, int* ip);
     * }
     */
    public static int nc_get_varm_int(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment imapp, MemorySegment ip) {
        var mh$ = nc_get_varm_int$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_varm_long$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$0,"nc_put_varm_long");
    }
    /**
     * {@snippet :
     * int nc_put_varm_long(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, const ptrdiff_t* imapp, long* op);
     * }
     */
    public static int nc_put_varm_long(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment imapp, MemorySegment op) {
        var mh$ = nc_put_varm_long$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_varm_long$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$1,"nc_get_varm_long");
    }
    /**
     * {@snippet :
     * int nc_get_varm_long(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, const ptrdiff_t* imapp, long* ip);
     * }
     */
    public static int nc_get_varm_long(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment imapp, MemorySegment ip) {
        var mh$ = nc_get_varm_long$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_varm_float$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$2,"nc_put_varm_float");
    }
    /**
     * {@snippet :
     * int nc_put_varm_float(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, const ptrdiff_t* imapp, float* op);
     * }
     */
    public static int nc_put_varm_float(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment imapp, MemorySegment op) {
        var mh$ = nc_put_varm_float$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_varm_float$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$3,"nc_get_varm_float");
    }
    /**
     * {@snippet :
     * int nc_get_varm_float(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, const ptrdiff_t* imapp, float* ip);
     * }
     */
    public static int nc_get_varm_float(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment imapp, MemorySegment ip) {
        var mh$ = nc_get_varm_float$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_varm_double$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$4,"nc_put_varm_double");
    }
    /**
     * {@snippet :
     * int nc_put_varm_double(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, const ptrdiff_t* imapp, double* op);
     * }
     */
    public static int nc_put_varm_double(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment imapp, MemorySegment op) {
        var mh$ = nc_put_varm_double$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_varm_double$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$5,"nc_get_varm_double");
    }
    /**
     * {@snippet :
     * int nc_get_varm_double(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, const ptrdiff_t* imapp, double* ip);
     * }
     */
    public static int nc_get_varm_double(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment imapp, MemorySegment ip) {
        var mh$ = nc_get_varm_double$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_varm_ushort$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$0,"nc_put_varm_ushort");
    }
    /**
     * {@snippet :
     * int nc_put_varm_ushort(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, const ptrdiff_t* imapp, unsigned short* op);
     * }
     */
    public static int nc_put_varm_ushort(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment imapp, MemorySegment op) {
        var mh$ = nc_put_varm_ushort$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_varm_ushort$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$1,"nc_get_varm_ushort");
    }
    /**
     * {@snippet :
     * int nc_get_varm_ushort(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, const ptrdiff_t* imapp, unsigned short* ip);
     * }
     */
    public static int nc_get_varm_ushort(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment imapp, MemorySegment ip) {
        var mh$ = nc_get_varm_ushort$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_varm_uint$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$2,"nc_put_varm_uint");
    }
    /**
     * {@snippet :
     * int nc_put_varm_uint(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, const ptrdiff_t* imapp, unsigned int* op);
     * }
     */
    public static int nc_put_varm_uint(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment imapp, MemorySegment op) {
        var mh$ = nc_put_varm_uint$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_varm_uint$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$3,"nc_get_varm_uint");
    }
    /**
     * {@snippet :
     * int nc_get_varm_uint(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, const ptrdiff_t* imapp, unsigned int* ip);
     * }
     */
    public static int nc_get_varm_uint(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment imapp, MemorySegment ip) {
        var mh$ = nc_get_varm_uint$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_varm_longlong$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$4,"nc_put_varm_longlong");
    }
    /**
     * {@snippet :
     * int nc_put_varm_longlong(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, const ptrdiff_t* imapp, long long* op);
     * }
     */
    public static int nc_put_varm_longlong(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment imapp, MemorySegment op) {
        var mh$ = nc_put_varm_longlong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_varm_longlong$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$5,"nc_get_varm_longlong");
    }
    /**
     * {@snippet :
     * int nc_get_varm_longlong(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, const ptrdiff_t* imapp, long long* ip);
     * }
     */
    public static int nc_get_varm_longlong(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment imapp, MemorySegment ip) {
        var mh$ = nc_get_varm_longlong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_varm_ulonglong$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$0,"nc_put_varm_ulonglong");
    }
    /**
     * {@snippet :
     * int nc_put_varm_ulonglong(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, const ptrdiff_t* imapp, unsigned long long* op);
     * }
     */
    public static int nc_put_varm_ulonglong(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment imapp, MemorySegment op) {
        var mh$ = nc_put_varm_ulonglong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_varm_ulonglong$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$1,"nc_get_varm_ulonglong");
    }
    /**
     * {@snippet :
     * int nc_get_varm_ulonglong(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, const ptrdiff_t* imapp, unsigned long long* ip);
     * }
     */
    public static int nc_get_varm_ulonglong(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment imapp, MemorySegment ip) {
        var mh$ = nc_get_varm_ulonglong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_varm_string$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$2,"nc_put_varm_string");
    }
    /**
     * {@snippet :
     * int nc_put_varm_string(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, const ptrdiff_t* imapp, char** op);
     * }
     */
    public static int nc_put_varm_string(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment imapp, MemorySegment op) {
        var mh$ = nc_put_varm_string$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_varm_string$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$3,"nc_get_varm_string");
    }
    /**
     * {@snippet :
     * int nc_get_varm_string(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, const ptrdiff_t* imapp, char** ip);
     * }
     */
    public static int nc_get_varm_string(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment imapp, MemorySegment ip) {
        var mh$ = nc_get_varm_string$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var_text$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$4,"nc_put_var_text");
    }
    /**
     * {@snippet :
     * int nc_put_var_text(int ncid, int varid, char* op);
     * }
     */
    public static int nc_put_var_text(int ncid, int varid, MemorySegment op) {
        var mh$ = nc_put_var_text$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var_text$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$5,"nc_get_var_text");
    }
    /**
     * {@snippet :
     * int nc_get_var_text(int ncid, int varid, char* ip);
     * }
     */
    public static int nc_get_var_text(int ncid, int varid, MemorySegment ip) {
        var mh$ = nc_get_var_text$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var_uchar$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$0,"nc_put_var_uchar");
    }
    /**
     * {@snippet :
     * int nc_put_var_uchar(int ncid, int varid, unsigned char* op);
     * }
     */
    public static int nc_put_var_uchar(int ncid, int varid, MemorySegment op) {
        var mh$ = nc_put_var_uchar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var_uchar$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$1,"nc_get_var_uchar");
    }
    /**
     * {@snippet :
     * int nc_get_var_uchar(int ncid, int varid, unsigned char* ip);
     * }
     */
    public static int nc_get_var_uchar(int ncid, int varid, MemorySegment ip) {
        var mh$ = nc_get_var_uchar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var_schar$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$2,"nc_put_var_schar");
    }
    /**
     * {@snippet :
     * int nc_put_var_schar(int ncid, int varid, signed char* op);
     * }
     */
    public static int nc_put_var_schar(int ncid, int varid, MemorySegment op) {
        var mh$ = nc_put_var_schar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var_schar$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$3,"nc_get_var_schar");
    }
    /**
     * {@snippet :
     * int nc_get_var_schar(int ncid, int varid, signed char* ip);
     * }
     */
    public static int nc_get_var_schar(int ncid, int varid, MemorySegment ip) {
        var mh$ = nc_get_var_schar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var_short$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$4,"nc_put_var_short");
    }
    /**
     * {@snippet :
     * int nc_put_var_short(int ncid, int varid, short* op);
     * }
     */
    public static int nc_put_var_short(int ncid, int varid, MemorySegment op) {
        var mh$ = nc_put_var_short$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var_short$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$5,"nc_get_var_short");
    }
    /**
     * {@snippet :
     * int nc_get_var_short(int ncid, int varid, short* ip);
     * }
     */
    public static int nc_get_var_short(int ncid, int varid, MemorySegment ip) {
        var mh$ = nc_get_var_short$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var_int$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$0,"nc_put_var_int");
    }
    /**
     * {@snippet :
     * int nc_put_var_int(int ncid, int varid, int* op);
     * }
     */
    public static int nc_put_var_int(int ncid, int varid, MemorySegment op) {
        var mh$ = nc_put_var_int$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var_int$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$1,"nc_get_var_int");
    }
    /**
     * {@snippet :
     * int nc_get_var_int(int ncid, int varid, int* ip);
     * }
     */
    public static int nc_get_var_int(int ncid, int varid, MemorySegment ip) {
        var mh$ = nc_get_var_int$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var_long$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$2,"nc_put_var_long");
    }
    /**
     * {@snippet :
     * int nc_put_var_long(int ncid, int varid, long* op);
     * }
     */
    public static int nc_put_var_long(int ncid, int varid, MemorySegment op) {
        var mh$ = nc_put_var_long$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var_long$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$3,"nc_get_var_long");
    }
    /**
     * {@snippet :
     * int nc_get_var_long(int ncid, int varid, long* ip);
     * }
     */
    public static int nc_get_var_long(int ncid, int varid, MemorySegment ip) {
        var mh$ = nc_get_var_long$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var_float$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$4,"nc_put_var_float");
    }
    /**
     * {@snippet :
     * int nc_put_var_float(int ncid, int varid, float* op);
     * }
     */
    public static int nc_put_var_float(int ncid, int varid, MemorySegment op) {
        var mh$ = nc_put_var_float$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var_float$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$5,"nc_get_var_float");
    }
    /**
     * {@snippet :
     * int nc_get_var_float(int ncid, int varid, float* ip);
     * }
     */
    public static int nc_get_var_float(int ncid, int varid, MemorySegment ip) {
        var mh$ = nc_get_var_float$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var_double$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$0,"nc_put_var_double");
    }
    /**
     * {@snippet :
     * int nc_put_var_double(int ncid, int varid, double* op);
     * }
     */
    public static int nc_put_var_double(int ncid, int varid, MemorySegment op) {
        var mh$ = nc_put_var_double$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var_double$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$1,"nc_get_var_double");
    }
    /**
     * {@snippet :
     * int nc_get_var_double(int ncid, int varid, double* ip);
     * }
     */
    public static int nc_get_var_double(int ncid, int varid, MemorySegment ip) {
        var mh$ = nc_get_var_double$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var_ushort$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$2,"nc_put_var_ushort");
    }
    /**
     * {@snippet :
     * int nc_put_var_ushort(int ncid, int varid, unsigned short* op);
     * }
     */
    public static int nc_put_var_ushort(int ncid, int varid, MemorySegment op) {
        var mh$ = nc_put_var_ushort$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var_ushort$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$3,"nc_get_var_ushort");
    }
    /**
     * {@snippet :
     * int nc_get_var_ushort(int ncid, int varid, unsigned short* ip);
     * }
     */
    public static int nc_get_var_ushort(int ncid, int varid, MemorySegment ip) {
        var mh$ = nc_get_var_ushort$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var_uint$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$4,"nc_put_var_uint");
    }
    /**
     * {@snippet :
     * int nc_put_var_uint(int ncid, int varid, unsigned int* op);
     * }
     */
    public static int nc_put_var_uint(int ncid, int varid, MemorySegment op) {
        var mh$ = nc_put_var_uint$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var_uint$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$5,"nc_get_var_uint");
    }
    /**
     * {@snippet :
     * int nc_get_var_uint(int ncid, int varid, unsigned int* ip);
     * }
     */
    public static int nc_get_var_uint(int ncid, int varid, MemorySegment ip) {
        var mh$ = nc_get_var_uint$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var_longlong$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$0,"nc_put_var_longlong");
    }
    /**
     * {@snippet :
     * int nc_put_var_longlong(int ncid, int varid, long long* op);
     * }
     */
    public static int nc_put_var_longlong(int ncid, int varid, MemorySegment op) {
        var mh$ = nc_put_var_longlong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var_longlong$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$1,"nc_get_var_longlong");
    }
    /**
     * {@snippet :
     * int nc_get_var_longlong(int ncid, int varid, long long* ip);
     * }
     */
    public static int nc_get_var_longlong(int ncid, int varid, MemorySegment ip) {
        var mh$ = nc_get_var_longlong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var_ulonglong$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$2,"nc_put_var_ulonglong");
    }
    /**
     * {@snippet :
     * int nc_put_var_ulonglong(int ncid, int varid, unsigned long long* op);
     * }
     */
    public static int nc_put_var_ulonglong(int ncid, int varid, MemorySegment op) {
        var mh$ = nc_put_var_ulonglong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var_ulonglong$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$3,"nc_get_var_ulonglong");
    }
    /**
     * {@snippet :
     * int nc_get_var_ulonglong(int ncid, int varid, unsigned long long* ip);
     * }
     */
    public static int nc_get_var_ulonglong(int ncid, int varid, MemorySegment ip) {
        var mh$ = nc_get_var_ulonglong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var_string$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$4,"nc_put_var_string");
    }
    /**
     * {@snippet :
     * int nc_put_var_string(int ncid, int varid, char** op);
     * }
     */
    public static int nc_put_var_string(int ncid, int varid, MemorySegment op) {
        var mh$ = nc_put_var_string$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var_string$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$5,"nc_get_var_string");
    }
    /**
     * {@snippet :
     * int nc_get_var_string(int ncid, int varid, char** ip);
     * }
     */
    public static int nc_get_var_string(int ncid, int varid, MemorySegment ip) {
        var mh$ = nc_get_var_string$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_free_string$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$1,"nc_free_string");
    }
    /**
     * {@snippet :
     * int nc_free_string(size_t nelems, char** data);
     * }
     */
    public static int nc_free_string(long nelems, MemorySegment data) {
        var mh$ = nc_free_string$MH();
        try {
            return (int)mh$.invokeExact(nelems, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_free_vlens$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$2,"nc_free_vlens");
    }
    /**
     * {@snippet :
     * int nc_free_vlens(size_t nelems, nc_vlen_t vlens[]);
     * }
     */
    public static int nc_free_vlens(long nelems, MemorySegment vlens) {
        var mh$ = nc_free_vlens$MH();
        try {
            return (int)mh$.invokeExact(nelems, vlens);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_free_vlen$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$4,"nc_free_vlen");
    }
    /**
     * {@snippet :
     * int nc_free_vlen(nc_vlen_t* vl);
     * }
     */
    public static int nc_free_vlen(MemorySegment vl) {
        var mh$ = nc_free_vlen$MH();
        try {
            return (int)mh$.invokeExact(vl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_reclaim_data$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$6,"nc_reclaim_data");
    }
    /**
     * {@snippet :
     * int nc_reclaim_data(int ncid, nc_type xtypeid, void* memory, size_t nelems);
     * }
     */
    public static int nc_reclaim_data(int ncid, int xtypeid, MemorySegment memory, long nelems) {
        var mh$ = nc_reclaim_data$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtypeid, memory, nelems);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_reclaim_data_all$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$0,"nc_reclaim_data_all");
    }
    /**
     * {@snippet :
     * int nc_reclaim_data_all(int ncid, nc_type xtypeid, void* memory, size_t nelems);
     * }
     */
    public static int nc_reclaim_data_all(int ncid, int xtypeid, MemorySegment memory, long nelems) {
        var mh$ = nc_reclaim_data_all$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtypeid, memory, nelems);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_copy_data$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$1,"nc_copy_data");
    }
    /**
     * {@snippet :
     * int nc_copy_data(int ncid, nc_type xtypeid, void* memory, size_t count, void* copy);
     * }
     */
    public static int nc_copy_data(int ncid, int xtypeid, MemorySegment memory, long count, MemorySegment copy) {
        var mh$ = nc_copy_data$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtypeid, memory, count, copy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_copy_data_all$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$2,"nc_copy_data_all");
    }
    /**
     * {@snippet :
     * int nc_copy_data_all(int ncid, nc_type xtypeid, void* memory, size_t count, void** copyp);
     * }
     */
    public static int nc_copy_data_all(int ncid, int xtypeid, MemorySegment memory, long count, MemorySegment copyp) {
        var mh$ = nc_copy_data_all$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtypeid, memory, count, copyp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_att_ubyte$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$3,"nc_put_att_ubyte");
    }
    /**
     * {@snippet :
     * int nc_put_att_ubyte(int ncid, int varid, char* name, nc_type xtype, size_t len, unsigned char* op);
     * }
     */
    public static int nc_put_att_ubyte(int ncid, int varid, MemorySegment name, int xtype, long len, MemorySegment op) {
        var mh$ = nc_put_att_ubyte$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, xtype, len, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_att_ubyte$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$4,"nc_get_att_ubyte");
    }
    /**
     * {@snippet :
     * int nc_get_att_ubyte(int ncid, int varid, char* name, unsigned char* ip);
     * }
     */
    public static int nc_get_att_ubyte(int ncid, int varid, MemorySegment name, MemorySegment ip) {
        var mh$ = nc_get_att_ubyte$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var1_ubyte$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$5,"nc_put_var1_ubyte");
    }
    /**
     * {@snippet :
     * int nc_put_var1_ubyte(int ncid, int varid, const size_t* indexp, unsigned char* op);
     * }
     */
    public static int nc_put_var1_ubyte(int ncid, int varid, MemorySegment indexp, MemorySegment op) {
        var mh$ = nc_put_var1_ubyte$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var1_ubyte$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$0,"nc_get_var1_ubyte");
    }
    /**
     * {@snippet :
     * int nc_get_var1_ubyte(int ncid, int varid, const size_t* indexp, unsigned char* ip);
     * }
     */
    public static int nc_get_var1_ubyte(int ncid, int varid, MemorySegment indexp, MemorySegment ip) {
        var mh$ = nc_get_var1_ubyte$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vara_ubyte$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$1,"nc_put_vara_ubyte");
    }
    /**
     * {@snippet :
     * int nc_put_vara_ubyte(int ncid, int varid, const size_t* startp, const size_t* countp, unsigned char* op);
     * }
     */
    public static int nc_put_vara_ubyte(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment op) {
        var mh$ = nc_put_vara_ubyte$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vara_ubyte$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$2,"nc_get_vara_ubyte");
    }
    /**
     * {@snippet :
     * int nc_get_vara_ubyte(int ncid, int varid, const size_t* startp, const size_t* countp, unsigned char* ip);
     * }
     */
    public static int nc_get_vara_ubyte(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment ip) {
        var mh$ = nc_get_vara_ubyte$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vars_ubyte$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$3,"nc_put_vars_ubyte");
    }
    /**
     * {@snippet :
     * int nc_put_vars_ubyte(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, unsigned char* op);
     * }
     */
    public static int nc_put_vars_ubyte(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment op) {
        var mh$ = nc_put_vars_ubyte$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vars_ubyte$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$4,"nc_get_vars_ubyte");
    }
    /**
     * {@snippet :
     * int nc_get_vars_ubyte(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, unsigned char* ip);
     * }
     */
    public static int nc_get_vars_ubyte(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment ip) {
        var mh$ = nc_get_vars_ubyte$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_varm_ubyte$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$5,"nc_put_varm_ubyte");
    }
    /**
     * {@snippet :
     * int nc_put_varm_ubyte(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, const ptrdiff_t* imapp, unsigned char* op);
     * }
     */
    public static int nc_put_varm_ubyte(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment imapp, MemorySegment op) {
        var mh$ = nc_put_varm_ubyte$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_varm_ubyte$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$0,"nc_get_varm_ubyte");
    }
    /**
     * {@snippet :
     * int nc_get_varm_ubyte(int ncid, int varid, const size_t* startp, const size_t* countp, const ptrdiff_t* stridep, const ptrdiff_t* imapp, unsigned char* ip);
     * }
     */
    public static int nc_get_varm_ubyte(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment imapp, MemorySegment ip) {
        var mh$ = nc_get_varm_ubyte$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var_ubyte$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$1,"nc_put_var_ubyte");
    }
    /**
     * {@snippet :
     * int nc_put_var_ubyte(int ncid, int varid, unsigned char* op);
     * }
     */
    public static int nc_put_var_ubyte(int ncid, int varid, MemorySegment op) {
        var mh$ = nc_put_var_ubyte$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var_ubyte$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$2,"nc_get_var_ubyte");
    }
    /**
     * {@snippet :
     * int nc_get_var_ubyte(int ncid, int varid, unsigned char* ip);
     * }
     */
    public static int nc_get_var_ubyte(int ncid, int varid, MemorySegment ip) {
        var mh$ = nc_get_var_ubyte$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_set_log_level$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$3,"nc_set_log_level");
    }
    /**
     * {@snippet :
     * int nc_set_log_level(int new_level);
     * }
     */
    public static int nc_set_log_level(int new_level) {
        var mh$ = nc_set_log_level$MH();
        try {
            return (int)mh$.invokeExact(new_level);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_show_metadata$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$4,"nc_show_metadata");
    }
    /**
     * {@snippet :
     * int nc_show_metadata(int ncid);
     * }
     */
    public static int nc_show_metadata(int ncid) {
        var mh$ = nc_show_metadata$MH();
        try {
            return (int)mh$.invokeExact(ncid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$5,"nc_delete");
    }
    /**
     * {@snippet :
     * int nc_delete(char* path);
     * }
     */
    public static int nc_delete(MemorySegment path) {
        var mh$ = nc_delete$MH();
        try {
            return (int)mh$.invokeExact(path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc__create_mp$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$1,"nc__create_mp");
    }
    /**
     * {@snippet :
     * int nc__create_mp(char* path, int cmode, size_t initialsz, int basepe, size_t* chunksizehintp, int* ncidp);
     * }
     */
    public static int nc__create_mp(MemorySegment path, int cmode, long initialsz, int basepe, MemorySegment chunksizehintp, MemorySegment ncidp) {
        var mh$ = nc__create_mp$MH();
        try {
            return (int)mh$.invokeExact(path, cmode, initialsz, basepe, chunksizehintp, ncidp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc__open_mp$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$3,"nc__open_mp");
    }
    /**
     * {@snippet :
     * int nc__open_mp(char* path, int mode, int basepe, size_t* chunksizehintp, int* ncidp);
     * }
     */
    public static int nc__open_mp(MemorySegment path, int mode, int basepe, MemorySegment chunksizehintp, MemorySegment ncidp) {
        var mh$ = nc__open_mp$MH();
        try {
            return (int)mh$.invokeExact(path, mode, basepe, chunksizehintp, ncidp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_delete_mp$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$5,"nc_delete_mp");
    }
    /**
     * {@snippet :
     * int nc_delete_mp(char* path, int basepe);
     * }
     */
    public static int nc_delete_mp(MemorySegment path, int basepe) {
        var mh$ = nc_delete_mp$MH();
        try {
            return (int)mh$.invokeExact(path, basepe);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_set_base_pe$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$0,"nc_set_base_pe");
    }
    /**
     * {@snippet :
     * int nc_set_base_pe(int ncid, int pe);
     * }
     */
    public static int nc_set_base_pe(int ncid, int pe) {
        var mh$ = nc_set_base_pe$MH();
        try {
            return (int)mh$.invokeExact(ncid, pe);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_base_pe$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$1,"nc_inq_base_pe");
    }
    /**
     * {@snippet :
     * int nc_inq_base_pe(int ncid, int* pe);
     * }
     */
    public static int nc_inq_base_pe(int ncid, MemorySegment pe) {
        var mh$ = nc_inq_base_pe$MH();
        try {
            return (int)mh$.invokeExact(ncid, pe);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nctypelen$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$2,"nctypelen");
    }
    /**
     * {@snippet :
     * int nctypelen(nc_type datatype);
     * }
     */
    public static int nctypelen(int datatype) {
        var mh$ = nctypelen$MH();
        try {
            return (int)mh$.invokeExact(datatype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout ncerr$LAYOUT() {
        return JAVA_INT;
    }
    public static VarHandle ncerr$VH() {
        return constants$58.const$3;
    }
    public static MemorySegment ncerr$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$58.const$4,"ncerr");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * int ncerr;
     * }
     */
    public static int ncerr$get() {
        return (int) constants$58.const$3.get(RuntimeHelper.requireNonNull(constants$58.const$4, "ncerr"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * int ncerr;
     * }
     */
    public static void ncerr$set(int x) {
        constants$58.const$3.set(RuntimeHelper.requireNonNull(constants$58.const$4, "ncerr"), x);
    }
    public static MemoryLayout ncopts$LAYOUT() {
        return JAVA_INT;
    }
    public static VarHandle ncopts$VH() {
        return constants$58.const$3;
    }
    public static MemorySegment ncopts$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$58.const$5,"ncopts");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * int ncopts;
     * }
     */
    public static int ncopts$get() {
        return (int) constants$58.const$3.get(RuntimeHelper.requireNonNull(constants$58.const$5, "ncopts"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * int ncopts;
     * }
     */
    public static void ncopts$set(int x) {
        constants$58.const$3.set(RuntimeHelper.requireNonNull(constants$58.const$5, "ncopts"), x);
    }
    public static MethodHandle nc_advise$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$1,"nc_advise");
    }
    /**
     * {@snippet :
     * void nc_advise(char* cdf_routine_name, int err, char* fmt,...);
     * }
     */
    public static void nc_advise(MemorySegment cdf_routine_name, int err, MemorySegment fmt, Object... x3) {
        var mh$ = nc_advise$MH();
        try {
            mh$.invokeExact(cdf_routine_name, err, fmt, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef int nclong;
     * }
     */
    public static final OfInt nclong = JAVA_INT;
    public static MethodHandle nccreate$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$2,"nccreate");
    }
    /**
     * {@snippet :
     * int nccreate(char* path, int cmode);
     * }
     */
    public static int nccreate(MemorySegment path, int cmode) {
        var mh$ = nccreate$MH();
        try {
            return (int)mh$.invokeExact(path, cmode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncopen$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$3,"ncopen");
    }
    /**
     * {@snippet :
     * int ncopen(char* path, int mode);
     * }
     */
    public static int ncopen(MemorySegment path, int mode) {
        var mh$ = ncopen$MH();
        try {
            return (int)mh$.invokeExact(path, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncsetfill$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$4,"ncsetfill");
    }
    /**
     * {@snippet :
     * int ncsetfill(int ncid, int fillmode);
     * }
     */
    public static int ncsetfill(int ncid, int fillmode) {
        var mh$ = ncsetfill$MH();
        try {
            return (int)mh$.invokeExact(ncid, fillmode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncredef$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$5,"ncredef");
    }
    /**
     * {@snippet :
     * int ncredef(int ncid);
     * }
     */
    public static int ncredef(int ncid) {
        var mh$ = ncredef$MH();
        try {
            return (int)mh$.invokeExact(ncid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncendef$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$0,"ncendef");
    }
    /**
     * {@snippet :
     * int ncendef(int ncid);
     * }
     */
    public static int ncendef(int ncid) {
        var mh$ = ncendef$MH();
        try {
            return (int)mh$.invokeExact(ncid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncsync$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$1,"ncsync");
    }
    /**
     * {@snippet :
     * int ncsync(int ncid);
     * }
     */
    public static int ncsync(int ncid) {
        var mh$ = ncsync$MH();
        try {
            return (int)mh$.invokeExact(ncid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncabort$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$2,"ncabort");
    }
    /**
     * {@snippet :
     * int ncabort(int ncid);
     * }
     */
    public static int ncabort(int ncid) {
        var mh$ = ncabort$MH();
        try {
            return (int)mh$.invokeExact(ncid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncclose$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$3,"ncclose");
    }
    /**
     * {@snippet :
     * int ncclose(int ncid);
     * }
     */
    public static int ncclose(int ncid) {
        var mh$ = ncclose$MH();
        try {
            return (int)mh$.invokeExact(ncid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncinquire$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$4,"ncinquire");
    }
    /**
     * {@snippet :
     * int ncinquire(int ncid, int* ndimsp, int* nvarsp, int* nattsp, int* unlimdimp);
     * }
     */
    public static int ncinquire(int ncid, MemorySegment ndimsp, MemorySegment nvarsp, MemorySegment nattsp, MemorySegment unlimdimp) {
        var mh$ = ncinquire$MH();
        try {
            return (int)mh$.invokeExact(ncid, ndimsp, nvarsp, nattsp, unlimdimp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncdimdef$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$6,"ncdimdef");
    }
    /**
     * {@snippet :
     * int ncdimdef(int ncid, char* name, long len);
     * }
     */
    public static int ncdimdef(int ncid, MemorySegment name, long len) {
        var mh$ = ncdimdef$MH();
        try {
            return (int)mh$.invokeExact(ncid, name, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncdimid$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$0,"ncdimid");
    }
    /**
     * {@snippet :
     * int ncdimid(int ncid, char* name);
     * }
     */
    public static int ncdimid(int ncid, MemorySegment name) {
        var mh$ = ncdimid$MH();
        try {
            return (int)mh$.invokeExact(ncid, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncdiminq$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$1,"ncdiminq");
    }
    /**
     * {@snippet :
     * int ncdiminq(int ncid, int dimid, char* name, long* lenp);
     * }
     */
    public static int ncdiminq(int ncid, int dimid, MemorySegment name, MemorySegment lenp) {
        var mh$ = ncdiminq$MH();
        try {
            return (int)mh$.invokeExact(ncid, dimid, name, lenp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncdimrename$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$2,"ncdimrename");
    }
    /**
     * {@snippet :
     * int ncdimrename(int ncid, int dimid, char* name);
     * }
     */
    public static int ncdimrename(int ncid, int dimid, MemorySegment name) {
        var mh$ = ncdimrename$MH();
        try {
            return (int)mh$.invokeExact(ncid, dimid, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncattput$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$4,"ncattput");
    }
    /**
     * {@snippet :
     * int ncattput(int ncid, int varid, char* name, nc_type xtype, int len, void* op);
     * }
     */
    public static int ncattput(int ncid, int varid, MemorySegment name, int xtype, int len, MemorySegment op) {
        var mh$ = ncattput$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, xtype, len, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncattinq$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$5,"ncattinq");
    }
    /**
     * {@snippet :
     * int ncattinq(int ncid, int varid, char* name, nc_type* xtypep, int* lenp);
     * }
     */
    public static int ncattinq(int ncid, int varid, MemorySegment name, MemorySegment xtypep, MemorySegment lenp) {
        var mh$ = ncattinq$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, xtypep, lenp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncattget$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$0,"ncattget");
    }
    /**
     * {@snippet :
     * int ncattget(int ncid, int varid, char* name, void* ip);
     * }
     */
    public static int ncattget(int ncid, int varid, MemorySegment name, MemorySegment ip) {
        var mh$ = ncattget$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncattcopy$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$1,"ncattcopy");
    }
    /**
     * {@snippet :
     * int ncattcopy(int ncid_in, int varid_in, char* name, int ncid_out, int varid_out);
     * }
     */
    public static int ncattcopy(int ncid_in, int varid_in, MemorySegment name, int ncid_out, int varid_out) {
        var mh$ = ncattcopy$MH();
        try {
            return (int)mh$.invokeExact(ncid_in, varid_in, name, ncid_out, varid_out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncattname$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$2,"ncattname");
    }
    /**
     * {@snippet :
     * int ncattname(int ncid, int varid, int attnum, char* name);
     * }
     */
    public static int ncattname(int ncid, int varid, int attnum, MemorySegment name) {
        var mh$ = ncattname$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, attnum, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncattrename$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$3,"ncattrename");
    }
    /**
     * {@snippet :
     * int ncattrename(int ncid, int varid, char* name, char* newname);
     * }
     */
    public static int ncattrename(int ncid, int varid, MemorySegment name, MemorySegment newname) {
        var mh$ = ncattrename$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, newname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncattdel$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$4,"ncattdel");
    }
    /**
     * {@snippet :
     * int ncattdel(int ncid, int varid, char* name);
     * }
     */
    public static int ncattdel(int ncid, int varid, MemorySegment name) {
        var mh$ = ncattdel$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncvardef$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$6,"ncvardef");
    }
    /**
     * {@snippet :
     * int ncvardef(int ncid, char* name, nc_type xtype, int ndims, int* dimidsp);
     * }
     */
    public static int ncvardef(int ncid, MemorySegment name, int xtype, int ndims, MemorySegment dimidsp) {
        var mh$ = ncvardef$MH();
        try {
            return (int)mh$.invokeExact(ncid, name, xtype, ndims, dimidsp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncvarid$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$0,"ncvarid");
    }
    /**
     * {@snippet :
     * int ncvarid(int ncid, char* name);
     * }
     */
    public static int ncvarid(int ncid, MemorySegment name) {
        var mh$ = ncvarid$MH();
        try {
            return (int)mh$.invokeExact(ncid, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncvarinq$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$1,"ncvarinq");
    }
    /**
     * {@snippet :
     * int ncvarinq(int ncid, int varid, char* name, nc_type* xtypep, int* ndimsp, int* dimidsp, int* nattsp);
     * }
     */
    public static int ncvarinq(int ncid, int varid, MemorySegment name, MemorySegment xtypep, MemorySegment ndimsp, MemorySegment dimidsp, MemorySegment nattsp) {
        var mh$ = ncvarinq$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, xtypep, ndimsp, dimidsp, nattsp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncvarput1$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$2,"ncvarput1");
    }
    /**
     * {@snippet :
     * int ncvarput1(int ncid, int varid, long* indexp, void* op);
     * }
     */
    public static int ncvarput1(int ncid, int varid, MemorySegment indexp, MemorySegment op) {
        var mh$ = ncvarput1$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncvarget1$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$3,"ncvarget1");
    }
    /**
     * {@snippet :
     * int ncvarget1(int ncid, int varid, long* indexp, void* ip);
     * }
     */
    public static int ncvarget1(int ncid, int varid, MemorySegment indexp, MemorySegment ip) {
        var mh$ = ncvarget1$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncvarput$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$4,"ncvarput");
    }
    /**
     * {@snippet :
     * int ncvarput(int ncid, int varid, long* startp, long* countp, void* op);
     * }
     */
    public static int ncvarput(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment op) {
        var mh$ = ncvarput$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncvarget$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$5,"ncvarget");
    }
    /**
     * {@snippet :
     * int ncvarget(int ncid, int varid, long* startp, long* countp, void* ip);
     * }
     */
    public static int ncvarget(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment ip) {
        var mh$ = ncvarget$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncvarputs$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$0,"ncvarputs");
    }
    /**
     * {@snippet :
     * int ncvarputs(int ncid, int varid, long* startp, long* countp, long* stridep, void* op);
     * }
     */
    public static int ncvarputs(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment op) {
        var mh$ = ncvarputs$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncvargets$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$1,"ncvargets");
    }
    /**
     * {@snippet :
     * int ncvargets(int ncid, int varid, long* startp, long* countp, long* stridep, void* ip);
     * }
     */
    public static int ncvargets(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment ip) {
        var mh$ = ncvargets$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncvarputg$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$2,"ncvarputg");
    }
    /**
     * {@snippet :
     * int ncvarputg(int ncid, int varid, long* startp, long* countp, long* stridep, long* imapp, void* op);
     * }
     */
    public static int ncvarputg(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment imapp, MemorySegment op) {
        var mh$ = ncvarputg$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncvargetg$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$3,"ncvargetg");
    }
    /**
     * {@snippet :
     * int ncvargetg(int ncid, int varid, long* startp, long* countp, long* stridep, long* imapp, void* ip);
     * }
     */
    public static int ncvargetg(int ncid, int varid, MemorySegment startp, MemorySegment countp, MemorySegment stridep, MemorySegment imapp, MemorySegment ip) {
        var mh$ = ncvargetg$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncvarrename$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$4,"ncvarrename");
    }
    /**
     * {@snippet :
     * int ncvarrename(int ncid, int varid, char* name);
     * }
     */
    public static int ncvarrename(int ncid, int varid, MemorySegment name) {
        var mh$ = ncvarrename$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncrecinq$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$6,"ncrecinq");
    }
    /**
     * {@snippet :
     * int ncrecinq(int ncid, int* nrecvarsp, int* recvaridsp, long* recsizesp);
     * }
     */
    public static int ncrecinq(int ncid, MemorySegment nrecvarsp, MemorySegment recvaridsp, MemorySegment recsizesp) {
        var mh$ = ncrecinq$MH();
        try {
            return (int)mh$.invokeExact(ncid, nrecvarsp, recvaridsp, recsizesp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncrecget$MH() {
        return RuntimeHelper.requireNonNull(constants$65.const$1,"ncrecget");
    }
    /**
     * {@snippet :
     * int ncrecget(int ncid, long recnum, void** datap);
     * }
     */
    public static int ncrecget(int ncid, long recnum, MemorySegment datap) {
        var mh$ = ncrecget$MH();
        try {
            return (int)mh$.invokeExact(ncid, recnum, datap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncrecput$MH() {
        return RuntimeHelper.requireNonNull(constants$65.const$2,"ncrecput");
    }
    /**
     * {@snippet :
     * int ncrecput(int ncid, long recnum, void** datap);
     * }
     */
    public static int ncrecput(int ncid, long recnum, MemorySegment datap) {
        var mh$ = ncrecput$MH();
        try {
            return (int)mh$.invokeExact(ncid, recnum, datap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_initialize$MH() {
        return RuntimeHelper.requireNonNull(constants$65.const$4,"nc_initialize");
    }
    /**
     * {@snippet :
     * int nc_initialize();
     * }
     */
    public static int nc_initialize() {
        var mh$ = nc_initialize$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_finalize$MH() {
        return RuntimeHelper.requireNonNull(constants$65.const$5,"nc_finalize");
    }
    /**
     * {@snippet :
     * int nc_finalize();
     * }
     */
    public static int nc_finalize() {
        var mh$ = nc_finalize$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_rc_get$MH() {
        return RuntimeHelper.requireNonNull(constants$66.const$1,"nc_rc_get");
    }
    /**
     * {@snippet :
     * char* nc_rc_get(char* key);
     * }
     */
    public static MemorySegment nc_rc_get(MemorySegment key) {
        var mh$ = nc_rc_get$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_rc_set$MH() {
        return RuntimeHelper.requireNonNull(constants$66.const$2,"nc_rc_set");
    }
    /**
     * {@snippet :
     * int nc_rc_set(char* key, char* value);
     * }
     */
    public static int nc_rc_set(MemorySegment key, MemorySegment value) {
        var mh$ = nc_rc_set$MH();
        try {
            return (int)mh$.invokeExact(key, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * #define NULL 0
     * }
     */
    public static MemorySegment NULL() {
        return constants$66.const$3;
    }
    /**
     * {@snippet :
     * #define _POSIX_C_SOURCE 200809
     * }
     */
    public static long _POSIX_C_SOURCE() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define __TIMESIZE 64
     * }
     */
    public static int __TIMESIZE() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define __STDC_IEC_60559_BFP__ 201404
     * }
     */
    public static long __STDC_IEC_60559_BFP__() {
        return 201404L;
    }
    /**
     * {@snippet :
     * #define __STDC_IEC_60559_COMPLEX__ 201404
     * }
     */
    public static long __STDC_IEC_60559_COMPLEX__() {
        return 201404L;
    }
    /**
     * {@snippet :
     * #define __STDC_ISO_10646__ 201706
     * }
     */
    public static long __STDC_ISO_10646__() {
        return 201706L;
    }
    /**
     * {@snippet :
     * #define EWOULDBLOCK 11
     * }
     */
    public static int EWOULDBLOCK() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * #define EDEADLOCK 35
     * }
     */
    public static int EDEADLOCK() {
        return (int)35L;
    }
    /**
     * {@snippet :
     * #define ENOTSUP 95
     * }
     */
    public static int ENOTSUP() {
        return (int)95L;
    }
    /**
     * {@snippet :
     * #define NC_LONG 4
     * }
     */
    public static int NC_LONG() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define NC_MAX_ATOMIC_TYPE 12
     * }
     */
    public static int NC_MAX_ATOMIC_TYPE() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * #define NC_FILL_BYTE -127
     * }
     */
    public static byte NC_FILL_BYTE() {
        return (byte)-127L;
    }
    /**
     * {@snippet :
     * #define NC_FILL_CHAR 0
     * }
     */
    public static byte NC_FILL_CHAR() {
        return (byte)0L;
    }
    /**
     * {@snippet :
     * #define NC_FILL_SHORT -32767
     * }
     */
    public static short NC_FILL_SHORT() {
        return (short)-32767L;
    }
    /**
     * {@snippet :
     * #define NC_FILL_INT -2147483647
     * }
     */
    public static int NC_FILL_INT() {
        return (int)-2147483647L;
    }
    /**
     * {@snippet :
     * #define NC_FILL_FLOAT 9.969209968386869E36
     * }
     */
    public static float NC_FILL_FLOAT() {
        return 9.969209968386869E36f;
    }
    /**
     * {@snippet :
     * #define NC_FILL_DOUBLE 9.969209968386869E36
     * }
     */
    public static double NC_FILL_DOUBLE() {
        return 9.969209968386869E36d;
    }
    /**
     * {@snippet :
     * #define NC_FILL_UBYTE 255
     * }
     */
    public static int NC_FILL_UBYTE() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define NC_FILL_USHORT 65535
     * }
     */
    public static int NC_FILL_USHORT() {
        return (int)65535L;
    }
    /**
     * {@snippet :
     * #define NC_FILL_UINT 4294967295
     * }
     */
    public static int NC_FILL_UINT() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define NC_FILL_INT64 -9223372036854775806
     * }
     */
    public static long NC_FILL_INT64() {
        return -9223372036854775806L;
    }
    /**
     * {@snippet :
     * #define NC_FILL_UINT64 -2
     * }
     */
    public static long NC_FILL_UINT64() {
        return -2L;
    }
    /**
     * {@snippet :
     * #define NC_MIN_BYTE -128
     * }
     */
    public static int NC_MIN_BYTE() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define NC_MIN_SHORT -32768
     * }
     */
    public static int NC_MIN_SHORT() {
        return (int)-32768L;
    }
    /**
     * {@snippet :
     * #define NC_MIN_INT -2147483648
     * }
     */
    public static int NC_MIN_INT() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define NC_MAX_FLOAT 3.4028234663852886E38
     * }
     */
    public static float NC_MAX_FLOAT() {
        return 3.4028234663852886E38f;
    }
    /**
     * {@snippet :
     * #define NC_MIN_FLOAT -3.4028234663852886E38
     * }
     */
    public static float NC_MIN_FLOAT() {
        return -3.4028234663852886E38f;
    }
    /**
     * {@snippet :
     * #define NC_MAX_DOUBLE 1.7976931348623157E308
     * }
     */
    public static double NC_MAX_DOUBLE() {
        return 1.7976931348623157E308d;
    }
    /**
     * {@snippet :
     * #define NC_MIN_DOUBLE -1.7976931348623157E308
     * }
     */
    public static double NC_MIN_DOUBLE() {
        return -1.7976931348623157E308d;
    }
    /**
     * {@snippet :
     * #define NC_MAX_UBYTE 255
     * }
     */
    public static int NC_MAX_UBYTE() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define NC_MAX_USHORT 65535
     * }
     */
    public static int NC_MAX_USHORT() {
        return (int)65535L;
    }
    /**
     * {@snippet :
     * #define NC_MAX_UINT 4294967295
     * }
     */
    public static int NC_MAX_UINT() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define NC_MAX_INT64 9223372036854775807
     * }
     */
    public static long NC_MAX_INT64() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define NC_MIN_INT64 -9223372036854775808
     * }
     */
    public static long NC_MIN_INT64() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define NC_MAX_UINT64 -1
     * }
     */
    public static long NC_MAX_UINT64() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define NC_FillValue "_FillValue"
     * }
     */
    public static MemorySegment NC_FillValue() {
        return constants$66.const$4;
    }
    /**
     * {@snippet :
     * #define NC_CDF5 32
     * }
     */
    public static int NC_CDF5() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define NC_MPIPOSIX 8192
     * }
     */
    public static int NC_MPIPOSIX() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * #define NC_PNETCDF 8192
     * }
     */
    public static int NC_PNETCDF() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * #define NC_FORMAT_CLASSIC 1
     * }
     */
    public static int NC_FORMAT_CLASSIC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define NC_FORMAT_64BIT_OFFSET 2
     * }
     */
    public static int NC_FORMAT_64BIT_OFFSET() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define NC_FORMAT_64BIT 2
     * }
     */
    public static int NC_FORMAT_64BIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define NC_FORMAT_NETCDF4 3
     * }
     */
    public static int NC_FORMAT_NETCDF4() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define NC_FORMAT_NETCDF4_CLASSIC 4
     * }
     */
    public static int NC_FORMAT_NETCDF4_CLASSIC() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define NC_FORMAT_64BIT_DATA 5
     * }
     */
    public static int NC_FORMAT_64BIT_DATA() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define NC_FORMAT_CDF5 5
     * }
     */
    public static int NC_FORMAT_CDF5() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define NC_FORMAT_ALL 5088
     * }
     */
    public static int NC_FORMAT_ALL() {
        return (int)5088L;
    }
    /**
     * {@snippet :
     * #define NC_FORMATX_NC3 1
     * }
     */
    public static int NC_FORMATX_NC3() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define NC_FORMATX_NC_HDF5 2
     * }
     */
    public static int NC_FORMATX_NC_HDF5() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define NC_FORMATX_NC4 2
     * }
     */
    public static int NC_FORMATX_NC4() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define NC_FORMATX_NC_HDF4 3
     * }
     */
    public static int NC_FORMATX_NC_HDF4() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define NC_FORMATX_PNETCDF 4
     * }
     */
    public static int NC_FORMATX_PNETCDF() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define NC_FORMATX_DAP2 5
     * }
     */
    public static int NC_FORMATX_DAP2() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define NC_FORMATX_DAP4 6
     * }
     */
    public static int NC_FORMATX_DAP4() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define NC_FORMATX_UDF0 8
     * }
     */
    public static int NC_FORMATX_UDF0() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define NC_FORMATX_UDF1 9
     * }
     */
    public static int NC_FORMATX_UDF1() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define NC_FORMATX_NCZARR 10
     * }
     */
    public static int NC_FORMATX_NCZARR() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * #define NC_FORMATX_UNDEFINED 0
     * }
     */
    public static int NC_FORMATX_UNDEFINED() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define NC_FORMAT_NC3 1
     * }
     */
    public static int NC_FORMAT_NC3() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define NC_FORMAT_NC_HDF5 2
     * }
     */
    public static int NC_FORMAT_NC_HDF5() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define NC_FORMAT_NC4 2
     * }
     */
    public static int NC_FORMAT_NC4() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define NC_FORMAT_NC_HDF4 3
     * }
     */
    public static int NC_FORMAT_NC_HDF4() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define NC_FORMAT_PNETCDF 4
     * }
     */
    public static int NC_FORMAT_PNETCDF() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define NC_FORMAT_DAP2 5
     * }
     */
    public static int NC_FORMAT_DAP2() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define NC_FORMAT_DAP4 6
     * }
     */
    public static int NC_FORMAT_DAP4() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define NC_FORMAT_UNDEFINED 0
     * }
     */
    public static int NC_FORMAT_UNDEFINED() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define NC_FORMATX_ZARR 10
     * }
     */
    public static int NC_FORMATX_ZARR() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * #define NC_ALIGN_CHUNK -1
     * }
     */
    public static long NC_ALIGN_CHUNK() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define NC_UNLIMITED 0
     * }
     */
    public static long NC_UNLIMITED() {
        return 0L;
    }
    /**
     * {@snippet :
     * #define NC_GLOBAL -1
     * }
     */
    public static int NC_GLOBAL() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define NC_MAX_HDF4_NAME 256
     * }
     */
    public static int NC_MAX_HDF4_NAME() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define NC_QUANTIZE_BITGROOM_ATT_NAME "_QuantizeBitGroomNumberOfSignificantDigits"
     * }
     */
    public static MemorySegment NC_QUANTIZE_BITGROOM_ATT_NAME() {
        return constants$66.const$5;
    }
    /**
     * {@snippet :
     * #define NC_QUANTIZE_GRANULARBR_ATT_NAME "_QuantizeGranularBitRoundNumberOfSignificantDigits"
     * }
     */
    public static MemorySegment NC_QUANTIZE_GRANULARBR_ATT_NAME() {
        return constants$67.const$0;
    }
    /**
     * {@snippet :
     * #define NC_QUANTIZE_BITROUND_ATT_NAME "_QuantizeBitRoundNumberOfSignificantBits"
     * }
     */
    public static MemorySegment NC_QUANTIZE_BITROUND_ATT_NAME() {
        return constants$67.const$1;
    }
    /**
     * {@snippet :
     * #define NC_QUANTIZE_MAX_FLOAT_NSD 7
     * }
     */
    public static int NC_QUANTIZE_MAX_FLOAT_NSD() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define NC_QUANTIZE_MAX_FLOAT_NSB 23
     * }
     */
    public static int NC_QUANTIZE_MAX_FLOAT_NSB() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * #define NC_QUANTIZE_MAX_DOUBLE_NSD 15
     * }
     */
    public static int NC_QUANTIZE_MAX_DOUBLE_NSD() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * #define NC_QUANTIZE_MAX_DOUBLE_NSB 52
     * }
     */
    public static int NC_QUANTIZE_MAX_DOUBLE_NSB() {
        return (int)52L;
    }
    /**
     * {@snippet :
     * #define NC2_ERR -1
     * }
     */
    public static int NC2_ERR() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define NC_EBADID -33
     * }
     */
    public static int NC_EBADID() {
        return (int)-33L;
    }
    /**
     * {@snippet :
     * #define NC_ENFILE -34
     * }
     */
    public static int NC_ENFILE() {
        return (int)-34L;
    }
    /**
     * {@snippet :
     * #define NC_EEXIST -35
     * }
     */
    public static int NC_EEXIST() {
        return (int)-35L;
    }
    /**
     * {@snippet :
     * #define NC_EINVAL -36
     * }
     */
    public static int NC_EINVAL() {
        return (int)-36L;
    }
    /**
     * {@snippet :
     * #define NC_EPERM -37
     * }
     */
    public static int NC_EPERM() {
        return (int)-37L;
    }
    /**
     * {@snippet :
     * #define NC_ENOTINDEFINE -38
     * }
     */
    public static int NC_ENOTINDEFINE() {
        return (int)-38L;
    }
    /**
     * {@snippet :
     * #define NC_EINDEFINE -39
     * }
     */
    public static int NC_EINDEFINE() {
        return (int)-39L;
    }
    /**
     * {@snippet :
     * #define NC_EINVALCOORDS -40
     * }
     */
    public static int NC_EINVALCOORDS() {
        return (int)-40L;
    }
    /**
     * {@snippet :
     * #define NC_EMAXDIMS -41
     * }
     */
    public static int NC_EMAXDIMS() {
        return (int)-41L;
    }
    /**
     * {@snippet :
     * #define NC_ENAMEINUSE -42
     * }
     */
    public static int NC_ENAMEINUSE() {
        return (int)-42L;
    }
    /**
     * {@snippet :
     * #define NC_ENOTATT -43
     * }
     */
    public static int NC_ENOTATT() {
        return (int)-43L;
    }
    /**
     * {@snippet :
     * #define NC_EMAXATTS -44
     * }
     */
    public static int NC_EMAXATTS() {
        return (int)-44L;
    }
    /**
     * {@snippet :
     * #define NC_EBADTYPE -45
     * }
     */
    public static int NC_EBADTYPE() {
        return (int)-45L;
    }
    /**
     * {@snippet :
     * #define NC_EBADDIM -46
     * }
     */
    public static int NC_EBADDIM() {
        return (int)-46L;
    }
    /**
     * {@snippet :
     * #define NC_EUNLIMPOS -47
     * }
     */
    public static int NC_EUNLIMPOS() {
        return (int)-47L;
    }
    /**
     * {@snippet :
     * #define NC_EMAXVARS -48
     * }
     */
    public static int NC_EMAXVARS() {
        return (int)-48L;
    }
    /**
     * {@snippet :
     * #define NC_ENOTVAR -49
     * }
     */
    public static int NC_ENOTVAR() {
        return (int)-49L;
    }
    /**
     * {@snippet :
     * #define NC_EGLOBAL -50
     * }
     */
    public static int NC_EGLOBAL() {
        return (int)-50L;
    }
    /**
     * {@snippet :
     * #define NC_ENOTNC -51
     * }
     */
    public static int NC_ENOTNC() {
        return (int)-51L;
    }
    /**
     * {@snippet :
     * #define NC_ESTS -52
     * }
     */
    public static int NC_ESTS() {
        return (int)-52L;
    }
    /**
     * {@snippet :
     * #define NC_EMAXNAME -53
     * }
     */
    public static int NC_EMAXNAME() {
        return (int)-53L;
    }
    /**
     * {@snippet :
     * #define NC_EUNLIMIT -54
     * }
     */
    public static int NC_EUNLIMIT() {
        return (int)-54L;
    }
    /**
     * {@snippet :
     * #define NC_ENORECVARS -55
     * }
     */
    public static int NC_ENORECVARS() {
        return (int)-55L;
    }
    /**
     * {@snippet :
     * #define NC_ECHAR -56
     * }
     */
    public static int NC_ECHAR() {
        return (int)-56L;
    }
    /**
     * {@snippet :
     * #define NC_EEDGE -57
     * }
     */
    public static int NC_EEDGE() {
        return (int)-57L;
    }
    /**
     * {@snippet :
     * #define NC_ESTRIDE -58
     * }
     */
    public static int NC_ESTRIDE() {
        return (int)-58L;
    }
    /**
     * {@snippet :
     * #define NC_EBADNAME -59
     * }
     */
    public static int NC_EBADNAME() {
        return (int)-59L;
    }
    /**
     * {@snippet :
     * #define NC_ERANGE -60
     * }
     */
    public static int NC_ERANGE() {
        return (int)-60L;
    }
    /**
     * {@snippet :
     * #define NC_ENOMEM -61
     * }
     */
    public static int NC_ENOMEM() {
        return (int)-61L;
    }
    /**
     * {@snippet :
     * #define NC_EVARSIZE -62
     * }
     */
    public static int NC_EVARSIZE() {
        return (int)-62L;
    }
    /**
     * {@snippet :
     * #define NC_EDIMSIZE -63
     * }
     */
    public static int NC_EDIMSIZE() {
        return (int)-63L;
    }
    /**
     * {@snippet :
     * #define NC_ETRUNC -64
     * }
     */
    public static int NC_ETRUNC() {
        return (int)-64L;
    }
    /**
     * {@snippet :
     * #define NC_EAXISTYPE -65
     * }
     */
    public static int NC_EAXISTYPE() {
        return (int)-65L;
    }
    /**
     * {@snippet :
     * #define NC_EDAP -66
     * }
     */
    public static int NC_EDAP() {
        return (int)-66L;
    }
    /**
     * {@snippet :
     * #define NC_ECURL -67
     * }
     */
    public static int NC_ECURL() {
        return (int)-67L;
    }
    /**
     * {@snippet :
     * #define NC_EIO -68
     * }
     */
    public static int NC_EIO() {
        return (int)-68L;
    }
    /**
     * {@snippet :
     * #define NC_ENODATA -69
     * }
     */
    public static int NC_ENODATA() {
        return (int)-69L;
    }
    /**
     * {@snippet :
     * #define NC_EDAPSVC -70
     * }
     */
    public static int NC_EDAPSVC() {
        return (int)-70L;
    }
    /**
     * {@snippet :
     * #define NC_EDAS -71
     * }
     */
    public static int NC_EDAS() {
        return (int)-71L;
    }
    /**
     * {@snippet :
     * #define NC_EDDS -72
     * }
     */
    public static int NC_EDDS() {
        return (int)-72L;
    }
    /**
     * {@snippet :
     * #define NC_EDMR -72
     * }
     */
    public static int NC_EDMR() {
        return (int)-72L;
    }
    /**
     * {@snippet :
     * #define NC_EDATADDS -73
     * }
     */
    public static int NC_EDATADDS() {
        return (int)-73L;
    }
    /**
     * {@snippet :
     * #define NC_EDATADAP -73
     * }
     */
    public static int NC_EDATADAP() {
        return (int)-73L;
    }
    /**
     * {@snippet :
     * #define NC_EDAPURL -74
     * }
     */
    public static int NC_EDAPURL() {
        return (int)-74L;
    }
    /**
     * {@snippet :
     * #define NC_EDAPCONSTRAINT -75
     * }
     */
    public static int NC_EDAPCONSTRAINT() {
        return (int)-75L;
    }
    /**
     * {@snippet :
     * #define NC_ETRANSLATION -76
     * }
     */
    public static int NC_ETRANSLATION() {
        return (int)-76L;
    }
    /**
     * {@snippet :
     * #define NC_EACCESS -77
     * }
     */
    public static int NC_EACCESS() {
        return (int)-77L;
    }
    /**
     * {@snippet :
     * #define NC_EAUTH -78
     * }
     */
    public static int NC_EAUTH() {
        return (int)-78L;
    }
    /**
     * {@snippet :
     * #define NC_ENOTFOUND -90
     * }
     */
    public static int NC_ENOTFOUND() {
        return (int)-90L;
    }
    /**
     * {@snippet :
     * #define NC_ECANTREMOVE -91
     * }
     */
    public static int NC_ECANTREMOVE() {
        return (int)-91L;
    }
    /**
     * {@snippet :
     * #define NC_EINTERNAL -92
     * }
     */
    public static int NC_EINTERNAL() {
        return (int)-92L;
    }
    /**
     * {@snippet :
     * #define NC_EPNETCDF -93
     * }
     */
    public static int NC_EPNETCDF() {
        return (int)-93L;
    }
    /**
     * {@snippet :
     * #define NC4_FIRST_ERROR -100
     * }
     */
    public static int NC4_FIRST_ERROR() {
        return (int)-100L;
    }
    /**
     * {@snippet :
     * #define NC_EHDFERR -101
     * }
     */
    public static int NC_EHDFERR() {
        return (int)-101L;
    }
    /**
     * {@snippet :
     * #define NC_ECANTREAD -102
     * }
     */
    public static int NC_ECANTREAD() {
        return (int)-102L;
    }
    /**
     * {@snippet :
     * #define NC_ECANTWRITE -103
     * }
     */
    public static int NC_ECANTWRITE() {
        return (int)-103L;
    }
    /**
     * {@snippet :
     * #define NC_ECANTCREATE -104
     * }
     */
    public static int NC_ECANTCREATE() {
        return (int)-104L;
    }
    /**
     * {@snippet :
     * #define NC_EFILEMETA -105
     * }
     */
    public static int NC_EFILEMETA() {
        return (int)-105L;
    }
    /**
     * {@snippet :
     * #define NC_EDIMMETA -106
     * }
     */
    public static int NC_EDIMMETA() {
        return (int)-106L;
    }
    /**
     * {@snippet :
     * #define NC_EATTMETA -107
     * }
     */
    public static int NC_EATTMETA() {
        return (int)-107L;
    }
    /**
     * {@snippet :
     * #define NC_EVARMETA -108
     * }
     */
    public static int NC_EVARMETA() {
        return (int)-108L;
    }
    /**
     * {@snippet :
     * #define NC_ENOCOMPOUND -109
     * }
     */
    public static int NC_ENOCOMPOUND() {
        return (int)-109L;
    }
    /**
     * {@snippet :
     * #define NC_EATTEXISTS -110
     * }
     */
    public static int NC_EATTEXISTS() {
        return (int)-110L;
    }
    /**
     * {@snippet :
     * #define NC_ENOTNC4 -111
     * }
     */
    public static int NC_ENOTNC4() {
        return (int)-111L;
    }
    /**
     * {@snippet :
     * #define NC_ESTRICTNC3 -112
     * }
     */
    public static int NC_ESTRICTNC3() {
        return (int)-112L;
    }
    /**
     * {@snippet :
     * #define NC_ENOTNC3 -113
     * }
     */
    public static int NC_ENOTNC3() {
        return (int)-113L;
    }
    /**
     * {@snippet :
     * #define NC_ENOPAR -114
     * }
     */
    public static int NC_ENOPAR() {
        return (int)-114L;
    }
    /**
     * {@snippet :
     * #define NC_EPARINIT -115
     * }
     */
    public static int NC_EPARINIT() {
        return (int)-115L;
    }
    /**
     * {@snippet :
     * #define NC_EBADGRPID -116
     * }
     */
    public static int NC_EBADGRPID() {
        return (int)-116L;
    }
    /**
     * {@snippet :
     * #define NC_EBADTYPID -117
     * }
     */
    public static int NC_EBADTYPID() {
        return (int)-117L;
    }
    /**
     * {@snippet :
     * #define NC_ETYPDEFINED -118
     * }
     */
    public static int NC_ETYPDEFINED() {
        return (int)-118L;
    }
    /**
     * {@snippet :
     * #define NC_EBADFIELD -119
     * }
     */
    public static int NC_EBADFIELD() {
        return (int)-119L;
    }
    /**
     * {@snippet :
     * #define NC_EBADCLASS -120
     * }
     */
    public static int NC_EBADCLASS() {
        return (int)-120L;
    }
    /**
     * {@snippet :
     * #define NC_EMAPTYPE -121
     * }
     */
    public static int NC_EMAPTYPE() {
        return (int)-121L;
    }
    /**
     * {@snippet :
     * #define NC_ELATEFILL -122
     * }
     */
    public static int NC_ELATEFILL() {
        return (int)-122L;
    }
    /**
     * {@snippet :
     * #define NC_ELATEDEF -123
     * }
     */
    public static int NC_ELATEDEF() {
        return (int)-123L;
    }
    /**
     * {@snippet :
     * #define NC_EDIMSCALE -124
     * }
     */
    public static int NC_EDIMSCALE() {
        return (int)-124L;
    }
    /**
     * {@snippet :
     * #define NC_ENOGRP -125
     * }
     */
    public static int NC_ENOGRP() {
        return (int)-125L;
    }
    /**
     * {@snippet :
     * #define NC_ESTORAGE -126
     * }
     */
    public static int NC_ESTORAGE() {
        return (int)-126L;
    }
    /**
     * {@snippet :
     * #define NC_EBADCHUNK -127
     * }
     */
    public static int NC_EBADCHUNK() {
        return (int)-127L;
    }
    /**
     * {@snippet :
     * #define NC_ENOTBUILT -128
     * }
     */
    public static int NC_ENOTBUILT() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define NC_EDISKLESS -129
     * }
     */
    public static int NC_EDISKLESS() {
        return (int)-129L;
    }
    /**
     * {@snippet :
     * #define NC_ECANTEXTEND -130
     * }
     */
    public static int NC_ECANTEXTEND() {
        return (int)-130L;
    }
    /**
     * {@snippet :
     * #define NC_EMPI -131
     * }
     */
    public static int NC_EMPI() {
        return (int)-131L;
    }
    /**
     * {@snippet :
     * #define NC_EFILTER -132
     * }
     */
    public static int NC_EFILTER() {
        return (int)-132L;
    }
    /**
     * {@snippet :
     * #define NC_ERCFILE -133
     * }
     */
    public static int NC_ERCFILE() {
        return (int)-133L;
    }
    /**
     * {@snippet :
     * #define NC_ENULLPAD -134
     * }
     */
    public static int NC_ENULLPAD() {
        return (int)-134L;
    }
    /**
     * {@snippet :
     * #define NC_EINMEMORY -135
     * }
     */
    public static int NC_EINMEMORY() {
        return (int)-135L;
    }
    /**
     * {@snippet :
     * #define NC_ENOFILTER -136
     * }
     */
    public static int NC_ENOFILTER() {
        return (int)-136L;
    }
    /**
     * {@snippet :
     * #define NC_ENCZARR -137
     * }
     */
    public static int NC_ENCZARR() {
        return (int)-137L;
    }
    /**
     * {@snippet :
     * #define NC_ES3 -138
     * }
     */
    public static int NC_ES3() {
        return (int)-138L;
    }
    /**
     * {@snippet :
     * #define NC_EEMPTY -139
     * }
     */
    public static int NC_EEMPTY() {
        return (int)-139L;
    }
    /**
     * {@snippet :
     * #define NC_EOBJECT -140
     * }
     */
    public static int NC_EOBJECT() {
        return (int)-140L;
    }
    /**
     * {@snippet :
     * #define NC_ENOOBJECT -141
     * }
     */
    public static int NC_ENOOBJECT() {
        return (int)-141L;
    }
    /**
     * {@snippet :
     * #define NC_EPLUGIN -142
     * }
     */
    public static int NC_EPLUGIN() {
        return (int)-142L;
    }
    /**
     * {@snippet :
     * #define NC4_LAST_ERROR -142
     * }
     */
    public static int NC4_LAST_ERROR() {
        return (int)-142L;
    }
    /**
     * {@snippet :
     * #define NC_EURL -74
     * }
     */
    public static int NC_EURL() {
        return (int)-74L;
    }
    /**
     * {@snippet :
     * #define NC_ECONSTRAINT -75
     * }
     */
    public static int NC_ECONSTRAINT() {
        return (int)-75L;
    }
    /**
     * {@snippet :
     * #define DIM_WITHOUT_VARIABLE "This is a netCDF dimension but not a netCDF variable."
     * }
     */
    public static MemorySegment DIM_WITHOUT_VARIABLE() {
        return constants$67.const$2;
    }
    /**
     * {@snippet :
     * #define NC_UNDEFINED_ENUM_IDENT "_UNDEFINED"
     * }
     */
    public static MemorySegment NC_UNDEFINED_ENUM_IDENT() {
        return constants$67.const$3;
    }
    /**
     * {@snippet :
     * #define NC_TURN_OFF_LOGGING -1
     * }
     */
    public static int NC_TURN_OFF_LOGGING() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define FILL_BYTE -127
     * }
     */
    public static byte FILL_BYTE() {
        return (byte)-127L;
    }
    /**
     * {@snippet :
     * #define FILL_CHAR 0
     * }
     */
    public static byte FILL_CHAR() {
        return (byte)0L;
    }
    /**
     * {@snippet :
     * #define FILL_SHORT -32767
     * }
     */
    public static short FILL_SHORT() {
        return (short)-32767L;
    }
    /**
     * {@snippet :
     * #define FILL_LONG -2147483647
     * }
     */
    public static int FILL_LONG() {
        return (int)-2147483647L;
    }
    /**
     * {@snippet :
     * #define FILL_FLOAT 9.969209968386869E36
     * }
     */
    public static float FILL_FLOAT() {
        return 9.969209968386869E36f;
    }
    /**
     * {@snippet :
     * #define FILL_DOUBLE 9.969209968386869E36
     * }
     */
    public static double FILL_DOUBLE() {
        return 9.969209968386869E36d;
    }
    /**
     * {@snippet :
     * #define MAX_NC_DIMS 1024
     * }
     */
    public static int MAX_NC_DIMS() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define MAX_NC_ATTRS 8192
     * }
     */
    public static int MAX_NC_ATTRS() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * #define MAX_NC_VARS 8192
     * }
     */
    public static int MAX_NC_VARS() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * #define MAX_NC_NAME 256
     * }
     */
    public static int MAX_NC_NAME() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define MAX_VAR_DIMS 1024
     * }
     */
    public static int MAX_VAR_DIMS() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define NC_ENTOOL -53
     * }
     */
    public static int NC_ENTOOL() {
        return (int)-53L;
    }
    /**
     * {@snippet :
     * #define NC_EXDR -32
     * }
     */
    public static int NC_EXDR() {
        return (int)-32L;
    }
    /**
     * {@snippet :
     * #define NC_SYSERR -31
     * }
     */
    public static int NC_SYSERR() {
        return (int)-31L;
    }
}


