package com.sunya.netchdf.hdf5Clib

import com.sunya.cdm.api.SectionPartial
import com.sunya.netchdf.*
import com.sunya.netchdf.testfiles.H5CFiles
import com.sunya.netchdf.testfiles.testData
import com.sunya.netchdf.testutil.*

import kotlin.test.*

// Sanity check read Hdf5File header, for non-netcdf4 files
class H5CopenTest {

    companion object {
        fun files(): Sequence<String> {
            return H5CFiles.params()
        }

        fun beforeAll() {
            Stats.clear()
        }

        fun afterAll() {
            if (versions.size > 0) {
                versions.keys.forEach { println("$it = ${versions[it]!!.size} files") }
            }
            Stats.show()
        }

        private val versions = mutableMapOf<String, MutableList<String>>()
    }

    @Test
    fun problemReferenceObjects() {
        compareCdlWithClib(testData + "cdmUnitTest/formats/hdf5/msg/test.h5")
    }

    @Test
    fun bigAttribute() {
        val filename = testData + "cdmUnitTest/formats/hdf5/aura/MLS-Aura_L2GP-BrO_v01-52-c01_2007d029.he5"
        //showNetchdfHeader(filename)
        //readNetchdfData(filename)
        compareCdlWithClib(filename)
    }

    @Test
    fun dimScales() {
        compareCdlWithClib(testData + "cdmUnitTest/formats/hdf5/extLink/JA2_IPR_2PcP021_001_20090126_085038_20090126_094651.nc")
    }

    // netcdf cstr.h5 {
    //  types:
    //    compound Compound_String {
    //      string a_string ;
    //      string b_string ;
    //    }; // Compound_String
    //  variables:
    //    Compound_String Compound_String(10) ;
    //}
    @Test
    fun fixlengthStringsInCompound() {
        val filename = testData + "devcdm/hdf5/cstr.h5"
        compareCdlWithClib(filename)
        readNetchdfData(filename, "Compound_String")
        compareDataWithClib(filename)
    }

    // netcdf compound_complex.h5 {
    //  types:
    //    compound CompoundComplex {
    //      int a_name ;
    //      string b_name(4) ;
    //      string c_name ;
    //      short d_name(5,4) ;
    //      float e_name ;
    //      double f_name(10) ;
    //      byte g_name ;
    //    }; // CompoundComplex
    //  variables:
    //    CompoundComplex CompoundComplex(6) ;
    //}
    @Test
    fun vlenStringsInCompound() {
        val filename = testData + "devcdm/hdf5/compound_complex.h5"
        // compareCdlWithClib(filename)
        // readNetchdfData(filename, "CompoundComplex")
        openH5C(filename, "CompoundComplex")
        // compareDataWithClib(filename)
    }

    // netcdf matlab_cols.mat {
    //  variables:
    //    double b(4, 3) ;
    //      :MATLAB_class = "double" ;
    //}
    @Test
    fun compactStorage() {
        val filename = testData + "devcdm/hdf5/matlab_cols.mat"
        compareCdlWithClib(filename)
        readNetchdfData(filename, "b")
        openH5C(filename, "b")
        compareDataWithClib(filename)
    }

    @Test
    fun problem() {
        val filename = testData + "devcdm/hdf5/SDS_array_type.h5"
        compareCdlWithClib(filename)
        compareDataWithClib(filename, "IntArray")
    }

    // @Test fails
    // H5C cant find dataset reference for Attribute(orgName=DIMENSION_LIST, datatype=reference, values=[-1])
    // but netcdf4   /home/all/testdata/cdmUnitTest/formats/hdf5/extLink/JA2_IPR_2PcP021_001_20090126_085038_20090126_094651.nc seems to work
    fun externalLinks() {
        val filename = testData + "formats/hdf5/extLink/extlink_source.h5"
        compareCdlWithClib(filename)
        compareDataWithClib(filename, "IntArray")
    }

    @Test
    fun testConfuseHdf5WithNetcdf4() {
        val filename =
            "/home/all/testdata/netchdf/knox/SATMS_justdims_npp_d20120619_t1121416_e1122133_b03335_c20120619200237705890_noaa_ops.h5"
        // compareCdlWithClib(filename, true)
        compareDataWithHdf5Clib(filename, "Granule")
    }

    ///////////////////////////////////////////////////////////////////////////////////

    @Test
    fun checkVersion() {
        files().forEach { filename ->
            openNetchdfFile(filename).use { ncfile ->
                if (ncfile == null) {
                    println("Not a netchdf file=$filename ")
                    return
                }
                println("${ncfile.type()} $filename ")
                val paths = versions.getOrPut(ncfile.type()) { mutableListOf() }
                paths.add(filename)
            }
        }
    }

    @Test
    fun testOpenH5C() {
        files().forEach { filename ->
            openH5C(filename, null)
        }
    }

    @Test
    fun testCdlWithH5Clib() {
        files().forEach { filename ->
            compareCdlWithClib(filename)
        }
    }

    @Test
    fun compareDataWithHdf5Clib() {
        files().forEach { filename ->
            compareDataWithHdf5Clib(filename, null, null)
        }
    }

    /////////////////////////////////////////////////////////

}

fun compareDataWithHdf5Clib(filename: String, varname: String? = null, section: SectionPartial? = null) {
    openNetchdfFile(filename).use { netchdf ->
        if (netchdf == null) {
            println("*** not a netchdf file = $filename")
            return
        }
        println("compareDataWithHdf5Clib ${netchdf.type()} $filename ${"%.2f".format(netchdf.size / 1000.0 / 1000.0)} Mbytes")

        Hdf5ClibFile(filename).use { ncfile ->
            compareNetcdfData(netchdf, ncfile, varname, section)
        }
    }
}

fun openH5C(filename: String, varname : String? = null) {
    println("=================")
    println(filename)
    Hdf5ClibFile(filename).use { h5cfile ->
        println(h5cfile.cdl())
        h5cfile.rootGroup().allVariables().forEach { println("  ${it.fullname()}") }

        if (varname != null) {
            val h5var = h5cfile.rootGroup().allVariables().find { it.fullname() == varname } ?: throw RuntimeException("cant find $varname")
            val h5data = h5cfile.readArrayData(h5var)
            println(" $varname = $h5data")
        }
    }
}
